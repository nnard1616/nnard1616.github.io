<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Progress Blog</title>
		<description>This is a blog where I document my projects and progress as a computer scientist/programmer/software engineer.</description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>MCS 1st Semester Week 8 Notes</title>
				<description>&lt;h1 id=&quot;cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;(under constructior construction)&lt;/p&gt;

&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h1 id=&quot;cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;No new content this week, midterm.&lt;/p&gt;

&lt;h1 id=&quot;cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Design pattern&lt;/li&gt;
  &lt;li&gt;Observer pattern&lt;/li&gt;
  &lt;li&gt;Composite pattern&lt;/li&gt;
  &lt;li&gt;Interpreter Pattern&lt;/li&gt;
  &lt;li&gt;Visitor Pattern&lt;/li&gt;
  &lt;li&gt;Template Method Pattern&lt;/li&gt;
  &lt;li&gt;Iterator Pattern&lt;/li&gt;
  &lt;li&gt;Strategy Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;5-7-design-pattern&quot;&gt;5-7 Design Pattern&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;A design pattern is the description of &lt;strong class=&quot;highlighted&quot;&gt;communicating objects and classes&lt;/strong&gt; that are customized to solve a general design problem in a particular context, identifying:
    &lt;ul&gt;
      &lt;li&gt;The participating classes and objects&lt;/li&gt;
      &lt;li&gt;Their roles and collaborations&lt;/li&gt;
      &lt;li&gt;The distribution of responsibilities&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Gang of Four Book: Design Patterns, elements of reusable object-oriented software
    &lt;ul&gt;
      &lt;li&gt;presents 23 object-oriented patterns:
        &lt;ul&gt;
          &lt;li&gt;creational patterns (5)&lt;/li&gt;
          &lt;li&gt;structural patterns (7)&lt;/li&gt;
          &lt;li&gt;behavioral patterns (11)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-8-observer-pattern&quot;&gt;5-8 Observer Pattern&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Using an observer pattern can reduce cycles of dependency (one to many dependency)
    &lt;ul&gt;
      &lt;li&gt;Cycles of dependence
        &lt;ul&gt;
          &lt;li&gt;If package A depends on package B, then you cannot run the tests for A unless you also have B
            &lt;ul&gt;
              &lt;li&gt;“A depends on B” means you cannot use A unless you have B&lt;/li&gt;
              &lt;li&gt;“Package A depends on packageB” means that something in A deponds on something in B&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;IF package A depends on package B, then package B should &lt;strong class=&quot;highlighted&quot;&gt;NOT&lt;/strong&gt; depend on package A
            &lt;ul&gt;
              &lt;li&gt;If classes C and D both depend on each other, put them in the same package&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-9-composite-pattern&quot;&gt;5-9 Composite Pattern&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Composite
    &lt;ul&gt;
      &lt;li&gt;problem:
        &lt;ul&gt;
          &lt;li&gt;Complex part-whole hierarchy has lots of similar classes
            &lt;ul&gt;
              &lt;li&gt;Example: book, chaptter, section, paragraph&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Objectives
        &lt;ul&gt;
          &lt;li&gt;Simplicity - treat composite (ie, composition of parts) like a part&lt;/li&gt;
          &lt;li&gt;Power - create new kind of part by composing existing ones&lt;/li&gt;
          &lt;li&gt;Safety - treat parts and composites uniformly (no special cases)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181017/CS427-wk8-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Behavioral Patterns:
    &lt;ul&gt;
      &lt;li&gt;Observer: Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.&lt;/li&gt;
      &lt;li&gt;Visitor: Represent an operation to be performed on the elements of an object structure.  Visitor lets you define a new operation without changing the classes of the elements on which it operates.&lt;/li&gt;
      &lt;li&gt;Interpreter: Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.&lt;/li&gt;
      &lt;li&gt;Template Method: Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.  Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.&lt;/li&gt;
      &lt;li&gt;Iterator: Provide a way to access the elemetns of an aggregate object sequentially without exposing its underlying representation.&lt;/li&gt;
      &lt;li&gt;Strategy: Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Structural Patterns
    &lt;ul&gt;
      &lt;li&gt;Composite: Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181017/CS427-wk8-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

</description>
				<pubDate>Wed, 17 Oct 2018 00:00:00 -0500</pubDate>
				<link>/2018/10/17/MCS-Notes-Week-8</link>
				<guid isPermaLink="true">/2018/10/17/MCS-Notes-Week-8</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 7 Notes</title>
				<description>&lt;h1 id=&quot;cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/h1&gt;

&lt;hr /&gt;
&lt;p&gt;(under construction)&lt;/p&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h1 id=&quot;cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;No content this week, midterm.&lt;/p&gt;

&lt;h1 id=&quot;cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;No content this week, work on mp1.&lt;/p&gt;

</description>
				<pubDate>Wed, 17 Oct 2018 00:00:00 -0500</pubDate>
				<link>/2018/10/17/MCS-Notes-Week-7</link>
				<guid isPermaLink="true">/2018/10/17/MCS-Notes-Week-7</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 6 Notes</title>
				<description>&lt;!-- vim-markdown-toc Redcarpet --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#goals-and-objectives&quot;&gt;Goals and Objectives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#guiding-questions&quot;&gt;Guiding Questions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#6-1-learning-to-rank-part-1&quot;&gt;6-1 Learning to Rank Part 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-learning-to-rank-part-2&quot;&gt;6-2 Learning to Rank Part 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-3-learning-to-rank-part-3&quot;&gt;6-3 Learning to Rank Part 3&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-4-future-of-web-search&quot;&gt;6-4 Future of Web Search&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-5-recommender-systems-content-based-filtering-part-1&quot;&gt;6-5 Recommender Systems-Content-Based Filtering Part 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-6-recommender-systems-content-based-filtering-part-2&quot;&gt;6-6 Recommender Systems-Content-Based Filtering Part 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-7-recommender-systems-collaborative-filtering-part-1&quot;&gt;6-7 Recommender Systems-Collaborative Filtering Part 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-8-recommender-systems-collaborative-filtering-part-2&quot;&gt;6-8 Recommender Systems-Collaborative Filtering Part 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-9-recommender-systems-collaborative-filtering-part-3&quot;&gt;6-9 Recommender Systems-Collaborative Filtering Part 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#goals&quot;&gt;Goals&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#key-concepts&quot;&gt;Key Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#guiding-questions&quot;&gt;Guiding Questions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#readings-and-resources&quot;&gt;Readings and Resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#6-1-1-what-is-global-snapshot&quot;&gt;6-1-1 What is Global Snapshot&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-1-2-glboal-snapshot-algorithm&quot;&gt;6-1-2 Glboal snapshot algorithm&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-1-3-consistent-cuts&quot;&gt;6-1-3 Consistent cuts&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-1-4-safety-and-liveness&quot;&gt;6-1-4 Safety and liveness&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-1-multicast-ordering&quot;&gt;6-2-1 Multicast ordering&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-2-implementing-multicast-ordering-1&quot;&gt;6-2-2 Implementing Multicast Ordering 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-3-implementing-multicast-ordering-2&quot;&gt;6-2-3 Implementing Multicast Ordering 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-4-reliable-multicast&quot;&gt;6-2-4 Reliable Multicast&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#6-2-5-virtual-synchrony&quot;&gt;6-2-5 Virtual Synchrony&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-object-oriented-modeling&quot;&gt;5-1 Object-Oriented Modeling&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-class-diagram-overview&quot;&gt;5-2 Class Diagram-Overview&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-3-class-diagram-relationships&quot;&gt;5-3 Class Diagram-Relationships&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-4-class-diagram-miscellaneous&quot;&gt;5-4 Class Diagram-Miscellaneous&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-5-requirements-to-class-diagram&quot;&gt;5-5 Requirements to Class Diagram&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-6-sequence-diagram&quot;&gt;5-6 Sequence Diagram&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- vim-markdown-toc --&gt;
&lt;h1 id=&quot;cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain how we can extend a retrieval system to perform content-based information filtering (recommendation).&lt;/li&gt;
  &lt;li&gt;Explain how we can use a linear utility function to evaluate an information filtering system.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of collaborative filtering.&lt;/li&gt;
  &lt;li&gt;Explain how the memory-based collaborative filtering algorithm works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is content-based information filtering?&lt;/li&gt;
  &lt;li&gt;How can we use a linear utility function to evaluate a filtering system? How should we set the coefficients in such a linear utility function?&lt;/li&gt;
  &lt;li&gt;How can we extend a retrieval system to perform content-based information filtering?&lt;/li&gt;
  &lt;li&gt;What is the exploration-exploitation tradeoff?&lt;/li&gt;
  &lt;li&gt;How does the beta-gamma threshold learning algorithm work?&lt;/li&gt;
  &lt;li&gt;What is the basic idea of collaborative filtering?&lt;/li&gt;
  &lt;li&gt;How does the memory-based collaborative filtering algorithm work?&lt;/li&gt;
  &lt;li&gt;What is the “cold start” problem in collaborative filtering?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapters 10 - Section 10.4,Chapters 11&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Content-based filtering&lt;/li&gt;
  &lt;li&gt;Collaborative filtering&lt;/li&gt;
  &lt;li&gt;Beta-gamma threshold learning&lt;/li&gt;
  &lt;li&gt;Linear utility&lt;/li&gt;
  &lt;li&gt;User profile&lt;/li&gt;
  &lt;li&gt;Exploration-exploitation tradeoff&lt;/li&gt;
  &lt;li&gt;Memory-based collaborative filtering&lt;/li&gt;
  &lt;li&gt;Cold start&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;6-1-learning-to-rank-part-1&quot;&gt;6-1 Learning to Rank Part 1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;How can we combine many features?  (learning to rank)
    &lt;ul&gt;
      &lt;li&gt;General Idea:
        &lt;ul&gt;
          &lt;li&gt;Given a query-doc pair (Q,D), define various kinds of features Xi(Q,D)&lt;/li&gt;
          &lt;li&gt;Examples of feature: the number of overlapping terms, BM25 score of Q and D, p(Q|D), PageRank of D, p(Q|Di), where Di may be anchor text or big font text, “does the URL contain ‘~’?”…&lt;/li&gt;
          &lt;li&gt;Hypothesize p(R=1|Q,D)=s(X1(Q,D)),…,Xn(Q,D),λ) where λ is a set of parameters&lt;/li&gt;
          &lt;li&gt;Learn λ by fitting functions with training data, ie, 3-tuples like (D,Q,1)(Dis relevant to Q) or (D,Q,0)(D is non-relevant to Q)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-2-learning-to-rank-part-2&quot;&gt;6-2 Learning to Rank Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-3-learning-to-rank-part-3&quot;&gt;6-3 Learning to Rank Part 3&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;More Advanced Learning Algorithms
    &lt;ul&gt;
      &lt;li&gt;Attempt to directly optimize a retrieval measure (eg MAP, nDCG)
        &lt;ul&gt;
          &lt;li&gt;More difficult as an optimization problem&lt;/li&gt;
          &lt;li&gt;Many solutions were proposed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Can be applied to many other ranking problems beyond search
        &lt;ul&gt;
          &lt;li&gt;Recommender systems&lt;/li&gt;
          &lt;li&gt;Computational advertising&lt;/li&gt;
          &lt;li&gt;Summarization&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;Machine Learning has been applied to text retrieval since many decades ago (eg, Rocchio feedback)&lt;/li&gt;
      &lt;li&gt;Recent use of machine learning is driven by
        &lt;ul&gt;
          &lt;li&gt;large-scale training data available&lt;/li&gt;
          &lt;li&gt;need for combining many features&lt;/li&gt;
          &lt;li&gt;need for robust ranking (again spams)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Modern Web search engines all use some kind of ML technique to combine many features to optimize ranking&lt;/li&gt;
      &lt;li&gt;Learning to ranki is still an active research topic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-4-future-of-web-search&quot;&gt;6-4 Future of Web Search&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Next generation search engines
    &lt;ul&gt;
      &lt;li&gt;more specialized/customized (vertical search engines)
        &lt;ul&gt;
          &lt;li&gt;special group of users (community engines, eg, Citeseer)&lt;/li&gt;
          &lt;li&gt;Personalized (better understanding of users)&lt;/li&gt;
          &lt;li&gt;Special genre/domain (better understanding of documents)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Learning over time (evolving)&lt;/li&gt;
      &lt;li&gt;Integration of search, navigation, and recommendation/filtering (full-fledged information management)&lt;/li&gt;
      &lt;li&gt;Beyond search to support tasks (eg shopping)&lt;/li&gt;
      &lt;li&gt;Many opportunities for innovations!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Above image shows what current search engines do (search, keyword queries, bag of words), and what people are working to expand it to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-5-recommender-systems-content-based-filtering-part-1&quot;&gt;6-5 Recommender Systems-Content-Based Filtering Part 1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Two modes of text access: Pull vs Push
    &lt;ul&gt;
      &lt;li&gt;Pull mode (search engines)
        &lt;ul&gt;
          &lt;li&gt;users take initiative&lt;/li&gt;
          &lt;li&gt;Ad hoc information need&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Push mode (recommender systems)
        &lt;ul&gt;
          &lt;li&gt;systems take initiative&lt;/li&gt;
          &lt;li&gt;stable information need or system has good knowledge about a user’s need&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Recommender ≈ Filtering system
    &lt;ul&gt;
      &lt;li&gt;Stable &amp;amp; long term interest, dynamic info source&lt;/li&gt;
      &lt;li&gt;System must make a delivery decision immediately as a document “arrives”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic Filtering Question: Will User U Like Item X?
    &lt;ul&gt;
      &lt;li&gt;Two different ways of answering it
        &lt;ul&gt;
          &lt;li&gt;look at what items U likes, and then check if X is similar
            &lt;ul&gt;
              &lt;li&gt;Item similarity =&amp;gt; content-based filtering&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Look at who likes X, and then check if U is similar
            &lt;ul&gt;
              &lt;li&gt;User similarity =&amp;gt; collaborative filtering&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Can be combined&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Three Basic Problems in content-based filtering
    &lt;ul&gt;
      &lt;li&gt;making &lt;strong class=&quot;highlighted&quot;&gt;filtering decision&lt;/strong&gt; (binary classifier)
        &lt;ul&gt;
          &lt;li&gt;Doc text, profile text –&amp;gt; yes/no&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Initialization&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;initialize the filter based on only the profile text or very few examples&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Learning&lt;/strong&gt; from
        &lt;ul&gt;
          &lt;li&gt;Limited relevance judegements (only on “yes” docs)&lt;/li&gt;
          &lt;li&gt;Accumulated documents&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;All trying to maximize the utility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extend a retrieval system for information filtering
    &lt;ul&gt;
      &lt;li&gt;“Reuse” retrieval techniques to score documents&lt;/li&gt;
      &lt;li&gt;use a score threshold for filtering decision&lt;/li&gt;
      &lt;li&gt;learn to improve scoring with traditional feedback&lt;/li&gt;
      &lt;li&gt;new approaches to threshold setting and learning&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-6-recommender-systems-content-based-filtering-part-2&quot;&gt;6-6 Recommender Systems-Content-Based Filtering Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Empirical utility optimization
    &lt;ul&gt;
      &lt;li&gt;Basic idea
        &lt;ul&gt;
          &lt;li&gt;compute the utility on the training data for each candidate score threshold&lt;/li&gt;
          &lt;li&gt;choose the threshold that gives the maximum utility on the training data set&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;difficulty: biased training sample!
        &lt;ul&gt;
          &lt;li&gt;we can only get an upper bound for the true optimal threshold&lt;/li&gt;
          &lt;li&gt;could a discarded item be possibly interesing to the user?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;solution:
        &lt;ul&gt;
          &lt;li&gt;heuristic adjustment (lowering) of threshold&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Beta-Gamma thereshold learning
    &lt;ul&gt;
      &lt;li&gt;Pros
        &lt;ul&gt;
          &lt;li&gt;explicitly addresses exploration-exploitation tradeoff (“safe” exploration)&lt;/li&gt;
          &lt;li&gt;Arbitrary utility (with appropriate lower bound)&lt;/li&gt;
          &lt;li&gt;empirically effective&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Cons
        &lt;ul&gt;
          &lt;li&gt;Purely heuristic&lt;/li&gt;
          &lt;li&gt;Zero utility lower bound often too conservative&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;Two strategies for recommendation/filtering
        &lt;ul&gt;
          &lt;li&gt;content-based (item similarity)&lt;/li&gt;
          &lt;li&gt;collaborative filtering (user similarity)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Content-based recommender system can be built based on a search engine system by
        &lt;ul&gt;
          &lt;li&gt;adding threshold mechanism&lt;/li&gt;
          &lt;li&gt;adding adaptive learning algorithms&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-7-recommender-systems-collaborative-filtering-part-1&quot;&gt;6-7 Recommender Systems-Collaborative Filtering Part 1&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is Collaborative filtering (CF) ?
    &lt;ul&gt;
      &lt;li&gt;Making filtering decisions for an individual user based on the judgements of other users&lt;/li&gt;
      &lt;li&gt;Inferring individual’s interest/preferences from that of other similar users&lt;/li&gt;
      &lt;li&gt;General idea
        &lt;ul&gt;
          &lt;li&gt;Given a user u, find similar users {u1, …, um}&lt;/li&gt;
          &lt;li&gt;Predict u’s preferences based on the preferences of u1, …, um&lt;/li&gt;
          &lt;li&gt;User similarity can be judged based on their similarity in preferences on a common set of items.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CF: Assumptions
    &lt;ul&gt;
      &lt;li&gt;Users with the same interest will have similar preferences&lt;/li&gt;
      &lt;li&gt;Users with similar preferences probably share the same interest&lt;/li&gt;
      &lt;li&gt;Examples
        &lt;ul&gt;
          &lt;li&gt;“interest is infomration retrieval” =&amp;gt; “favor SIGIR papers”&lt;/li&gt;
          &lt;li&gt;“favor SIGIR papers” =&amp;gt; “interest is information retrieval”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Sufficiently large number of user preferences are avaialable (if not, there will be a “cold start” problem)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-8-recommender-systems-collaborative-filtering-part-2&quot;&gt;6-8 Recommender Systems-Collaborative Filtering Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS410-wk6-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improving User similarity meeasures
    &lt;ul&gt;
      &lt;li&gt;Dealing with missing values: set to default ratings (eg, average ratings)&lt;/li&gt;
      &lt;li&gt;Inverse user frequency (IUF): similar to IDF&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-9-recommender-systems-collaborative-filtering-part-3&quot;&gt;6-9 Recommender Systems-Collaborative Filtering Part 3&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Summary of Recommender Systems
    &lt;ul&gt;
      &lt;li&gt;Filtering/Recommendations is “easy”
        &lt;ul&gt;
          &lt;li&gt;The user’s expectation is low&lt;/li&gt;
          &lt;li&gt;Any recommendation is better than none&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Filtering is “hard”
        &lt;ul&gt;
          &lt;li&gt;Must make a binary decision, though ranking is also possible&lt;/li&gt;
          &lt;li&gt;Data sparseness (limited feedback information)&lt;/li&gt;
          &lt;li&gt;“cold start” (little information about users at the beginning)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Content-based vs Collaborative filtering vs Hybrid&lt;/li&gt;
      &lt;li&gt;Recommendation can be combined with search –&amp;gt; Push+Pull&lt;/li&gt;
      &lt;li&gt;Many advanced algorithms have been proposed to use more context information and advanced machine learning.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Design an algorithm to calculate a distributed snapshot.&lt;/li&gt;
  &lt;li&gt;Assign FIFO/Causal/Total ordering to multicast messages.&lt;/li&gt;
  &lt;li&gt;Design a reliable multicast protocol.&lt;/li&gt;
  &lt;li&gt;Know the working of the industry-standard protocol called Paxos.&lt;/li&gt;
  &lt;li&gt;Know why consensus is hard to solve.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Global Snapshots&lt;/li&gt;
  &lt;li&gt;Multicast Ordering&lt;/li&gt;
  &lt;li&gt;Multicast Reliability&lt;/li&gt;
  &lt;li&gt;Paxos&lt;/li&gt;
  &lt;li&gt;Impossibility of Consensus&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is the difference between a safety property and a liveness property?&lt;/li&gt;
  &lt;li&gt;How does the Chandy-Lamport algorithm work?&lt;/li&gt;
  &lt;li&gt;How do you assign FIFO/Causal timestamps to multicasts in a distributed system?&lt;/li&gt;
  &lt;li&gt;How does Paxos use quorums to ensure safety?&lt;/li&gt;
  &lt;li&gt;Why is consensus impossible to solve in asynchronous systems?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings-and-resources&quot;&gt;Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://research.google.com/archive/chubby.html&quot;&gt;Google Chubby&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zookeeper.apache.org/&quot;&gt;Apache Zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;6-1-1-what-is-global-snapshot&quot;&gt;6-1-1 What is Global Snapshot&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Distributed Snapshot
    &lt;ul&gt;
      &lt;li&gt;More often, each country’s representative is sitting in their respective capital, and sending messages to each other (say emails)&lt;/li&gt;
      &lt;li&gt;How do you calculate a “global snapshot” in that DS ?&lt;/li&gt;
      &lt;li&gt;what does a “global snapshot” even mean?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In the Cloud
    &lt;ul&gt;
      &lt;li&gt;each application or service is running on multiple servers&lt;/li&gt;
      &lt;li&gt;servers handling concurrent events and interacting with each other&lt;/li&gt;
      &lt;li&gt;the ability to obtain a “global photograph” of the system is important&lt;/li&gt;
      &lt;li&gt;some uses of having a global picture of the system
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;checkpointing&lt;/strong&gt;: can restart distributed application on failure&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Garbage collection&lt;/strong&gt; of objects: objecst at servers that don’t have any other objects (at any servers) with pointers to them&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Deadlock detection&lt;/strong&gt;: useful in database transaction systems&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Termination of computation&lt;/strong&gt;: useful in batch computing systems like Folding@Home, SETI@Home&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What’s a global snapshot?
    &lt;ul&gt;
      &lt;li&gt;Global snapshot = global state = individual state of each process in the DS + Individual state of each communication channel in the DS&lt;/li&gt;
      &lt;li&gt;Capture the instantaneous state of each process&lt;/li&gt;
      &lt;li&gt;And the instantaneous state of each communication channel, ie messages in transit on the channels&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Obvious first solution
    &lt;ul&gt;
      &lt;li&gt;Synchronize clocks of all processes&lt;/li&gt;
      &lt;li&gt;ask all processes to record their states at known time t&lt;/li&gt;
      &lt;li&gt;Problems?
        &lt;ul&gt;
          &lt;li&gt;time synchronization always has error
            &lt;ul&gt;
              &lt;li&gt;your bank might inform you, “we lost the state of our distritbuted cluster due to a 1 ms clock skew in our snapshot algorithm”&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;also, does not record the state of messages in the channels&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;again: synchronization not reuired – causality is enough!&lt;/li&gt;
      &lt;li&gt;Why does time synchronization not work as a way to calculate a global snapshot in a distributed system? (select all correct answers)
        &lt;ul&gt;
          &lt;li&gt;time sync is inaccurate&lt;/li&gt;
          &lt;li&gt;it may not capture channel states&lt;/li&gt;
          &lt;li&gt;
            &lt;s&gt;it may not capture process states&lt;/s&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Moving from state to state
    &lt;ul&gt;
      &lt;li&gt;whenever an event happens anywhere in the system, the global state changes
        &lt;ul&gt;
          &lt;li&gt;process receives message&lt;/li&gt;
          &lt;li&gt;process sends message&lt;/li&gt;
          &lt;li&gt;process takes a step&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;state to state movement obeys causality
        &lt;ul&gt;
          &lt;li&gt;next: causal algorithm for global snapshot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-1-2-glboal-snapshot-algorithm&quot;&gt;6-1-2 Glboal snapshot algorithm&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;System model
    &lt;ul&gt;
      &lt;li&gt;Problem: record a global snapshot (state for each process, and state for each channel)&lt;/li&gt;
      &lt;li&gt;System model:
        &lt;ul&gt;
          &lt;li&gt;N processes in the system&lt;/li&gt;
          &lt;li&gt;there are two uni-directional communication channels between each ordered process pair: Pj –&amp;gt; Pi and Pi –&amp;gt; Pj&lt;/li&gt;
          &lt;li&gt;Communication channels are FIFO-ordered&lt;/li&gt;
          &lt;li&gt;No failure&lt;/li&gt;
          &lt;li&gt;All messages arrive intact, and are not duplicated
            &lt;ul&gt;
              &lt;li&gt;other papers later relaxed some of these assumptions&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Requirements
    &lt;ul&gt;
      &lt;li&gt;snapshot should not interfere with normal application actions, and it should not require application to stop sending messages&lt;/li&gt;
      &lt;li&gt;Each process is able to record its own state
        &lt;ul&gt;
          &lt;li&gt;process state: applicaiton-defined state or, in the worst case:&lt;/li&gt;
          &lt;li&gt;its heap, registers, program counter, code, etc (essentially the coredump)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Global state is collected in a distributed manner&lt;/li&gt;
      &lt;li&gt;Any process may initiate the snapshot
        &lt;ul&gt;
          &lt;li&gt;We’ll assume just one snapshot run for now&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chandy-Lamport global snapshot algorithm
    &lt;ul&gt;
      &lt;li&gt;first, initiator Pi records its own state&lt;/li&gt;
      &lt;li&gt;initiator process creates special messages called “Marker” messages
        &lt;ul&gt;
          &lt;li&gt;not an application message, does not interfere with application messages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;for j=1 to N except i
        &lt;ul&gt;
          &lt;li&gt;Pi sends out a Marker message on outgoing channel Cij&lt;/li&gt;
          &lt;li&gt;N-1 channels&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Starts recording the incoming messages on each of the incoming channels at Pi: Cji (for j= 1 to N except i)&lt;/li&gt;
      &lt;li&gt;Whenever a process Pi receives a Marker message on an incoming channel Cki
        &lt;ul&gt;
          &lt;li&gt;if (this is the first Marker Pi is seeing)
            &lt;ul&gt;
              &lt;li&gt;Pi records its own state first&lt;/li&gt;
              &lt;li&gt;Marks the state of channel Cki as “empty”&lt;/li&gt;
              &lt;li&gt;for j = 1 to N except i
                &lt;ul&gt;
                  &lt;li&gt;Pi sends out a Marker message on outgoing channel Cij&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Starts recording the incoming messages on each of the incoming channels at Pi: Cji (for j = 1 to N except i and k)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;else // already seen a Marker message
            &lt;ul&gt;
              &lt;li&gt;Mark the state of channel Cki as all the messages that have arrived on it since recording was turned on for Cki&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The algorithm terminates when
        &lt;ul&gt;
          &lt;li&gt;All processes have received a Marker
            &lt;ul&gt;
              &lt;li&gt;to record their own state&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;all processes have received a Marker on all the (N-1) incoming channels at each
            &lt;ul&gt;
              &lt;li&gt;to record the state of all channels&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Then, if needed, a central server collects all these partial state pieces to obtain the full global snapshot.&lt;/li&gt;
      &lt;li&gt;Which of the following does a process NOT do when it receives its first marker message?
        &lt;ul&gt;
          &lt;li&gt;
            &lt;s&gt;Starts recording the state of some incoming channels&lt;/s&gt;
          &lt;/li&gt;
          &lt;li&gt;Starts recording the state of some outgoing channels&lt;/li&gt;
          &lt;li&gt;
            &lt;s&gt;Records its own state&lt;/s&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;s&gt;Marks the state of the incoming channel as empty&lt;/s&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-1-3-consistent-cuts&quot;&gt;6-1-3 Consistent cuts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Cuts
    &lt;ul&gt;
      &lt;li&gt;cut = time frontier at each process and at each channel&lt;/li&gt;
      &lt;li&gt;events at the process/channel that happen before the cut are “in the cut”
        &lt;ul&gt;
          &lt;li&gt;and happening after the cut are “out of the cut”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Consistent cuts
    &lt;ul&gt;
      &lt;li&gt;a cut that obeys causality&lt;/li&gt;
      &lt;li&gt;a cut C is a consistent cut iff for (each pair of events e, f in the system)&lt;/li&gt;
      &lt;li&gt;such that event e is in the cut C, and if f –&amp;gt; e (f happens-before e)
        &lt;ul&gt;
          &lt;li&gt;then: event f is also in the cut C&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Any run of the Chandy-Lamport Global snapshot algorithm creates a consistent cut&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-1-4-safety-and-liveness&quot;&gt;6-1-4 Safety and liveness&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Correctness in DS
    &lt;ul&gt;
      &lt;li&gt;can be seen in two ways&lt;/li&gt;
      &lt;li&gt;liveness and safety&lt;/li&gt;
      &lt;li&gt;often confused – it’s important to distinguish from each other.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;liveness
    &lt;ul&gt;
      &lt;li&gt;guarantee that something good will happen, eventually, meaning if you let the system run long enough, then&lt;/li&gt;
      &lt;li&gt;Examples in real world
        &lt;ul&gt;
          &lt;li&gt;guarantee that “at least one of the atheletes in the 100m final will win gold” is liveness&lt;/li&gt;
          &lt;li&gt;a criminal will eventually be jailed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Examples in a DS
        &lt;ul&gt;
          &lt;li&gt;distributed computation: Guarantee that it will terminate&lt;/li&gt;
          &lt;li&gt;“Completeness” in failure detectors: every failure is eventually detected by some non-faulty process&lt;/li&gt;
          &lt;li&gt;In consensus: all processes eventually decide on a value&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Safety
    &lt;ul&gt;
      &lt;li&gt;guarantee that something bad will never happen&lt;/li&gt;
      &lt;li&gt;examples in real world
        &lt;ul&gt;
          &lt;li&gt;a peace treaty between two nations provides safety
            &lt;ul&gt;
              &lt;li&gt;war will never happen&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;an innocent person will never be jailed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;examples in DS:
        &lt;ul&gt;
          &lt;li&gt;There is no deadlock in a distributed transaction system&lt;/li&gt;
          &lt;li&gt;No object is orphaned in a distributed object system&lt;/li&gt;
          &lt;li&gt;“Accuracy” in failure detectors&lt;/li&gt;
          &lt;li&gt;in consensus: no two processes decide on different values&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Can we guarantee both?
    &lt;ul&gt;
      &lt;li&gt;Can be difficult to satisfy both liveness and safety in an asynchronous DS!
        &lt;ul&gt;
          &lt;li&gt;failure detector: completeness (liveness) and accuracy (safety) cannot both be guaranteed by a failure detector in an asynchronous DS&lt;/li&gt;
          &lt;li&gt;Consensus: Decisions (liveness) and correct decisions (Safety) cannot both be guaranteed by any consensus protocol in an asynchronous DS&lt;/li&gt;
          &lt;li&gt;Very difficult for legal systems (anywhere in the world) to guaranteed that all criminals are jailed (liveness) and no innocents are jailed (safety)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In the language of global states:
    &lt;ul&gt;
      &lt;li&gt;recall that a DS moves from one global state to another global state, via causal steps&lt;/li&gt;
      &lt;li&gt;liveness with respect to a property Pr in a given state S means
        &lt;ul&gt;
          &lt;li&gt;S satisfies Pr, or there is some causal path of global states from S to S’ where S’ satisfies Pr&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Safety with respect to a property Pr in a given state S means
        &lt;ul&gt;
          &lt;li&gt;S satisfies Pr, and all global states S’ reachable from S also satisfy Pr&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;using global snapshot algorithm
    &lt;ul&gt;
      &lt;li&gt;chandy-lamport algorithm can be used to detect global properties that are stable
        &lt;ul&gt;
          &lt;li&gt;stable = once true, stays true forever afterwards&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stable liveness examples
        &lt;ul&gt;
          &lt;li&gt;computation has terminated&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stable non-safety examples
        &lt;ul&gt;
          &lt;li&gt;there is a deadlock&lt;/li&gt;
          &lt;li&gt;an object is orphaned (no pointers point to it)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;all stable global properties can be detected using the Chandy-Lamport algorithm
        &lt;ul&gt;
          &lt;li&gt;due to its causal correctness&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;the ability to calculate global snapshots in a DS is very important&lt;/li&gt;
      &lt;li&gt;but don’t want to interrupt running DS application&lt;/li&gt;
      &lt;li&gt;chandy-lamport algorithm calculates global snapshot&lt;/li&gt;
      &lt;li&gt;obeys causality (creates a consistent cut)&lt;/li&gt;
      &lt;li&gt;can be used to detect stable global properties&lt;/li&gt;
      &lt;li&gt;safety vs liveness&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6-2-1-multicast-ordering&quot;&gt;6-2-1 Multicast ordering&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-2-2-implementing-multicast-ordering-1&quot;&gt;6-2-2 Implementing Multicast Ordering 1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-2-3-implementing-multicast-ordering-2&quot;&gt;6-2-3 Implementing Multicast Ordering 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-22.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-23.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-24.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-25.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-26.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-2-4-reliable-multicast&quot;&gt;6-2-4 Reliable Multicast&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-27.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-28.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-29.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-30.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-31.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-2-5-virtual-synchrony&quot;&gt;6-2-5 Virtual Synchrony&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-32.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-33.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-34.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-35.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-36.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-37.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-38.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-39.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-40.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-41.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-42.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-43.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-44.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-45.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS425-wk6-img-46.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;5-1-object-oriented-modeling&quot;&gt;5-1 Object-Oriented Modeling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Abstractions: Software under development
    &lt;ul&gt;
      &lt;li&gt;Architecture&lt;/li&gt;
      &lt;li&gt;OO Design&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Benefits of Modeling Notations
    &lt;ul&gt;
      &lt;li&gt;Communication&lt;/li&gt;
      &lt;li&gt;Documentation&lt;/li&gt;
      &lt;li&gt;Quality Assurance&lt;/li&gt;
      &lt;li&gt;Code Generation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unified Modeling Language (UML)
    &lt;ul&gt;
      &lt;li&gt;Class Diagram&lt;/li&gt;
      &lt;li&gt;Sequence Diagram&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-2-class-diagram-overview&quot;&gt;5-2 Class Diagram-Overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Purposes of class diagram
    &lt;ul&gt;
      &lt;li&gt;Analysis - conceptual
        &lt;ul&gt;
          &lt;li&gt;model problem, not software solution&lt;/li&gt;
          &lt;li&gt;can include actors outside system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Design - specification
        &lt;ul&gt;
          &lt;li&gt;the structure of how a software system will be written&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Design - implementation
        &lt;ul&gt;
          &lt;li&gt;Actual classes of implementation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;It &lt;strong class=&quot;highlighted&quot;&gt;DOES NOT&lt;/strong&gt; capture how:
        &lt;ul&gt;
          &lt;li&gt;classes interact with each other&lt;/li&gt;
          &lt;li&gt;algorithm or behavior detail&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-3-class-diagram-relationships&quot;&gt;5-3 Class Diagram-Relationships&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-4-class-diagram-miscellaneous&quot;&gt;5-4 Class Diagram-Miscellaneous&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-5-requirements-to-class-diagram&quot;&gt;5-5 Requirements to Class Diagram&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Nouns are good candidates for classes/attributes&lt;/li&gt;
  &lt;li&gt;Adjectives are good candidates for interfaces&lt;/li&gt;
  &lt;li&gt;Verbs are good candidates for methods or relationships between classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-6-sequence-diagram&quot;&gt;5-6 Sequence Diagram&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Purposes of UML Sequence Diagram
    &lt;ul&gt;
      &lt;li&gt;Used during requirements analysis
        &lt;ul&gt;
          &lt;li&gt;to refine use case descriptions&lt;/li&gt;
          &lt;li&gt;to find additional objects (“participating objects”)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Used during system design
        &lt;ul&gt;
          &lt;li&gt;to refine subsystem interfaces&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20181007/CS427-wk6-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 07 Oct 2018 00:00:00 -0500</pubDate>
				<link>/2018/10/07/MCS-Notes-Week-6</link>
				<guid isPermaLink="true">/2018/10/07/MCS-Notes-Week-6</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 5 Notes</title>
				<description>&lt;!-- vim-markdown-toc Redcarpet --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#goals-and-objectives&quot;&gt;Goals and Objectives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#guiding-questions&quot;&gt;Guiding Questions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-feedback-in-text-retrieval&quot;&gt;5-1 Feedback in Text Retrieval&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-feedback-in-vector-space-model-rocchio&quot;&gt;5-2 Feedback in Vector Space Model Rocchio&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-3-feedback-in-text-retrieval-feedback-in-lm&quot;&gt;5-3 Feedback in Text Retrieval feedback in LM&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-4-web-search-introduction-amp-web-crawler&quot;&gt;5-4 Web Search Introduction &amp;amp; Web Crawler&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-5-web-indexing&quot;&gt;5-5 Web indexing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-6-link-analysis&quot;&gt;5-6 Link Analysis&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-7-link-analysis-part-2&quot;&gt;5-7 Link Analysis Part 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-8-link-analysis-part-3&quot;&gt;5-8 Link analysis Part 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#goals&quot;&gt;Goals&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#key-concepts&quot;&gt;Key Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#guiding-questions&quot;&gt;Guiding Questions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#readings-and-resources&quot;&gt;Readings and Resources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-1-why-key-value-with-nosql&quot;&gt;5-1-1 Why Key-Value with NoSQL&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-2-cassandra&quot;&gt;5-1-2 Cassandra&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-3-the-cap-theorem&quot;&gt;5-1-3 The CAP theorem&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-4-the-consistency-spectrum&quot;&gt;5-1-4 The Consistency Spectrum&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-1-5-hbase&quot;&gt;5-1-5 HBase&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-1-introduction-and-basics-of-time-and-ordering&quot;&gt;5-2-1 Introduction and Basics of Time and Ordering&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-2-cristian-39-s-algorithm&quot;&gt;5-2-2 Cristian’s Algorithm&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-3-ntp&quot;&gt;5-2-3 NTP&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-4-lamport-timestamps&quot;&gt;5-2-4 Lamport Timestamps&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#5-2-5-vector-clocks&quot;&gt;5-2-5 Vector Clocks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#goals-and-objectives&quot;&gt;Goals and Objectives&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#4-1-definition-of-software-architecture&quot;&gt;4-1 Definition of Software Architecture&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-2-software-architect&quot;&gt;4-2 Software Architect&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-3-abstraction&quot;&gt;4-3 Abstraction&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-4-modularity&quot;&gt;4-4 Modularity&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-5-architecture&quot;&gt;4-5 Architecture&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-6-architectural-styles&quot;&gt;4-6 Architectural Styles&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-7-mvc-pattern&quot;&gt;4-7 MVC Pattern&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- vim-markdown-toc --&gt;

&lt;h1 id=&quot;cs-410-text-information-systems&quot;&gt;CS 410 Text Information Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain the similarity and differences in the three different kinds of feedback, i.e., relevance feedback, pseudo-relevance feedback, and implicit feedback.&lt;/li&gt;
  &lt;li&gt;Explain how the Rocchio feedback algorithm works.&lt;/li&gt;
  &lt;li&gt;Explain how the Kullback-Leibler (KL) divergence retrieval function generalizes the query likelihood retrieval function.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of using a mixture model for feedback.&lt;/li&gt;
  &lt;li&gt;Explain some of the main general challenges in creating a web search engine.&lt;/li&gt;
  &lt;li&gt;Explain what a web crawler is and what factors have to be considered when designing a web crawler.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of Google File System (GFS).&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of MapReduce and how we can use it to build an inverted index in parallel.&lt;/li&gt;
  &lt;li&gt;Explain how links on the web can be leveraged to improve search results.&lt;/li&gt;
  &lt;li&gt;Explain how PageRank algorithm works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is relevance feedback? What is pseudo-relevance feedback? What is implicit feedback?&lt;/li&gt;
  &lt;li&gt;How does Rocchio work? Why do we need to ensure that the original query terms have sufficiently large weights in feedback?&lt;/li&gt;
  &lt;li&gt;What is the KL-divergence retrieval function? How is it related to the query likelihood retrieval function?&lt;/li&gt;
  &lt;li&gt;What is the basic idea of the two-component mixture model for feedback?&lt;/li&gt;
  &lt;li&gt;What are some of the general challenges in building a web search engine?&lt;/li&gt;
  &lt;li&gt;What is a crawler? How can we implement a simple crawler?&lt;/li&gt;
  &lt;li&gt;What is focused crawling? What is incremental crawling?&lt;/li&gt;
  &lt;li&gt;What kind of pages should have a higher priority for recrawling in incremental crawling?&lt;/li&gt;
  &lt;li&gt;What can we do if the inverted index doesn’t fit in any single machine?&lt;/li&gt;
  &lt;li&gt;What’s the basic idea of the Google File System (GFS)?&lt;/li&gt;
  &lt;li&gt;How does MapReduce work? What are the two key functions that a programmer needs to implement when programming with a MapReduce framework?&lt;/li&gt;
  &lt;li&gt;How can we use MapReduce to build an inverted index in parallel?&lt;/li&gt;
  &lt;li&gt;What is anchor text? Why is it useful for improving search accuracy?&lt;/li&gt;
  &lt;li&gt;What is a hub page? What is an authority page?&lt;/li&gt;
  &lt;li&gt;What kind of web pages tend to receive high scores from PageRank?&lt;/li&gt;
  &lt;li&gt;How can we interpret PageRank from the perspective of a random surfer “walking” on the Web?&lt;/li&gt;
  &lt;li&gt;How exactly do you compute PageRank scores?&lt;/li&gt;
  &lt;li&gt;How does the HITS algorithm work?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapters 7 &amp;amp; 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Relevance feedback&lt;/li&gt;
  &lt;li&gt;Pseudo-relevance feedback&lt;/li&gt;
  &lt;li&gt;Implicit feedback&lt;/li&gt;
  &lt;li&gt;Rocchio feedback&lt;/li&gt;
  &lt;li&gt;Kullback-Leiber divergence (KL-divergence) retrieval function&lt;/li&gt;
  &lt;li&gt;Mixture language model&lt;/li&gt;
  &lt;li&gt;Scalability and efficiency&lt;/li&gt;
  &lt;li&gt;Spams&lt;/li&gt;
  &lt;li&gt;Crawler, focused crawling, and incremental crawling&lt;/li&gt;
  &lt;li&gt;Google File System (GFS)&lt;/li&gt;
  &lt;li&gt;MapReduce&lt;/li&gt;
  &lt;li&gt;Link analysis and anchor text&lt;/li&gt;
  &lt;li&gt;PageRank&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;
&lt;h3 id=&quot;5-1-feedback-in-text-retrieval&quot;&gt;5-1 Feedback in Text Retrieval&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-2-feedback-in-vector-space-model-rocchio&quot;&gt;5-2 Feedback in Vector Space Model Rocchio&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback in vector space model
    &lt;ul&gt;
      &lt;li&gt;how can a TR system learn from examples to improve retrieval accuracy?
        &lt;ul&gt;
          &lt;li&gt;positive examples: docs known to be relevant&lt;/li&gt;
          &lt;li&gt;negatvie examples: docs known to be non-relevant&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;general method: query modicfication
        &lt;ul&gt;
          &lt;li&gt;adding new (weighted) terms (query expansion)&lt;/li&gt;
          &lt;li&gt;adjusting weights of old terms&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rocchio in Practice
    &lt;ul&gt;
      &lt;li&gt;Negative (non-relevant) examples are not very important&lt;/li&gt;
      &lt;li&gt;Often truncate the vector (ie, consider only a small number of words that have highest weights in the centroid vector)(efficiency concern)&lt;/li&gt;
      &lt;li&gt;Avoid “over-fitting” (keep relatively high weight on the original query weights)&lt;/li&gt;
      &lt;li&gt;Can be used for relevence feedback and pseudo feedback (Β should be set to a larger value for relevance feedback than for pseudo feedback)&lt;/li&gt;
      &lt;li&gt;Usually robust and effective&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-3-feedback-in-text-retrieval-feedback-in-lm&quot;&gt;5-3 Feedback in Text Retrieval feedback in LM&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback with LM
    &lt;ul&gt;
      &lt;li&gt;Query likelihood method can’t naturally support relevance feedback&lt;/li&gt;
      &lt;li&gt;Solution:
        &lt;ul&gt;
          &lt;li&gt;Kullback-Leibler( KL) divergence retrieval model as a generalization of query likelihood&lt;/li&gt;
          &lt;li&gt;Feedback is achieved through query model estimation/updating&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Summary of feedback in Text Retrieval
    &lt;ul&gt;
      &lt;li&gt;Feedback = learn from examples&lt;/li&gt;
      &lt;li&gt;Three major feedback scenarios
        &lt;ul&gt;
          &lt;li&gt;Relevance, pseudo, and implicit feedback&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Rocchio for VSM (vector space model)&lt;/li&gt;
      &lt;li&gt;Query Model estimation for LM
        &lt;ul&gt;
          &lt;li&gt;Mixture model&lt;/li&gt;
          &lt;li&gt;many other methods (eg, relevance model) have been proposed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-4-web-search-introduction--web-crawler&quot;&gt;5-4 Web Search Introduction &amp;amp; Web Crawler&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Web Search: Challenges &amp;amp; Opportunities
    &lt;ul&gt;
      &lt;li&gt;Challenges
        &lt;ul&gt;
          &lt;li&gt;scalability
            &lt;ul&gt;
              &lt;li&gt;how to handle the size of the web and ensure completeness of coverage?&lt;/li&gt;
              &lt;li&gt;how to serve many user queries quickly?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;low quality information and spams&lt;/li&gt;
          &lt;li&gt;dynamics of the web
            &lt;ul&gt;
              &lt;li&gt;new pages are constantly created and some pages may be updated very quickly&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Opportunities
        &lt;ul&gt;
          &lt;li&gt;many additional heuristics (eg links) can be leveraged to improve search accuracy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Component I: Crawler/Spider/Robot
    &lt;ul&gt;
      &lt;li&gt;Building a “toy crawler” is easy
        &lt;ul&gt;
          &lt;li&gt;Start with a set of “seed pages” in a priority queue&lt;/li&gt;
          &lt;li&gt;fetch pages from the web&lt;/li&gt;
          &lt;li&gt;parse fetched pages for hyperlinks; add them to the queue&lt;/li&gt;
          &lt;li&gt;follow the hyperlinks in the queue&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A real crawler is much more complicated…
        &lt;ul&gt;
          &lt;li&gt;Robustness (server failure, trap, etc)&lt;/li&gt;
          &lt;li&gt;Crawling courtesy (server load balance, robot exlclusion, etc)&lt;/li&gt;
          &lt;li&gt;Handling file types (images, PDF files, etc)&lt;/li&gt;
          &lt;li&gt;URL extensions (cgi script, internal references, etc)&lt;/li&gt;
          &lt;li&gt;recognize redundant pages (identical and duplicates)&lt;/li&gt;
          &lt;li&gt;discover “hidden” urls (eg, truncating a long url)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Major Crawling strategies
    &lt;ul&gt;
      &lt;li&gt;Breadth-first is common (balance server load)&lt;/li&gt;
      &lt;li&gt;parallel crawling is natural&lt;/li&gt;
      &lt;li&gt;variation: focused crawling
        &lt;ul&gt;
          &lt;li&gt;targeting at a subset of pages (eg, all pages about “automobiles”)&lt;/li&gt;
          &lt;li&gt;typically given a query&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to find new pages (they may not linked to an old page!)&lt;/li&gt;
      &lt;li&gt;Incremental/repeated crawling
        &lt;ul&gt;
          &lt;li&gt;need to minimize reource overhead&lt;/li&gt;
          &lt;li&gt;can learn form the past experience (updated daily vs monthly)&lt;/li&gt;
          &lt;li&gt;target at 1) frequently updated pages; 2) frequently accessed pages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-5-web-indexing&quot;&gt;5-5 Web indexing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Overview of web indexing
    &lt;ul&gt;
      &lt;li&gt;standard IR techniques are the baseis, but insufficient
        &lt;ul&gt;
          &lt;li&gt;scalability&lt;/li&gt;
          &lt;li&gt;efficiency&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Google’s gontributions:
        &lt;ul&gt;
          &lt;li&gt;google file system (gfs): distributed file system&lt;/li&gt;
          &lt;li&gt;mapreduce: software framework for parallel computation&lt;/li&gt;
          &lt;li&gt;hadoop: open source implementation of mapreduce&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mapreduce: a framework for parallel programming
    &lt;ul&gt;
      &lt;li&gt;minimize effort of programmer for simple parallel processing tasks&lt;/li&gt;
      &lt;li&gt;Features
        &lt;ul&gt;
          &lt;li&gt;hide many low-level details (network, storage)&lt;/li&gt;
          &lt;li&gt;build-in fault tolerance&lt;/li&gt;
          &lt;li&gt;automatic load balancing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-6-link-analysis&quot;&gt;5-6 Link Analysis&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ranking Algorithms for Web Search
    &lt;ul&gt;
      &lt;li&gt;Standard IR (information retrieval) models apply but aren’t sufficient
        &lt;ul&gt;
          &lt;li&gt;Different information needs&lt;/li&gt;
          &lt;li&gt;documents have additional information&lt;/li&gt;
          &lt;li&gt;information quality varies a lot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Major extensions
        &lt;ul&gt;
          &lt;li&gt;exploiting links to improve scoring&lt;/li&gt;
          &lt;li&gt;exploiting clickthroughs for massive implicit feedback&lt;/li&gt;
          &lt;li&gt;in general, rely on machine learning to combine all kinds of features&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pagerank: capturing page “popularity”
    &lt;ul&gt;
      &lt;li&gt;intutions
        &lt;ul&gt;
          &lt;li&gt;links are like citations in literature&lt;/li&gt;
          &lt;li&gt;a page taht is cited often can be expected to be more useful in general&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;pagerank is essentially “citation counting”, but improves over simple counting
        &lt;ul&gt;
          &lt;li&gt;consider “indirect citations” (being cited by a highly cited paper counts a lot…)&lt;/li&gt;
          &lt;li&gt;smoothing of citations (every page is assumed to have a non-zero pseudo citation count)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;PageRank can also be interpreted as random surfing (thus capturing popularity)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-7-link-analysis-part-2&quot;&gt;5-7 Link Analysis Part 2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The pagerank algorithm
    &lt;ul&gt;
      &lt;li&gt;Random surfing model: At any range,
        &lt;ul&gt;
          &lt;li&gt;with probability α randomly jumping to another page&lt;/li&gt;
          &lt;li&gt;with probability (1-α), randomly picking a link to follow.
            &lt;ul&gt;
              &lt;li&gt;p(di): PageRank score of di = average probability of visiting page di&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PageRank in Practice
    &lt;ul&gt;
      &lt;li&gt;computation can be quite efficient since M is usually sparse&lt;/li&gt;
      &lt;li&gt;Normalization doesn’t affect ranking, leading to some variants of the formula&lt;/li&gt;
      &lt;li&gt;The zero-outlink problem: p(di)’s don’t sum to 1
        &lt;ul&gt;
          &lt;li&gt;one possible solution = page-specific damping factor (α =1-0 for a page with no outlink)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many extensions (eg, topic-specific PageRank)&lt;/li&gt;
      &lt;li&gt;Many other applications (eg, social network analysis)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-8-link-analysis-part-3&quot;&gt;5-8 Link analysis Part 3&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HITS: Capturing Authorities &amp;amp; Hubs
    &lt;ul&gt;
      &lt;li&gt;Intuitions
        &lt;ul&gt;
          &lt;li&gt;Pages that are widely cited are good authorities&lt;/li&gt;
          &lt;li&gt;Pages taht cite many other pages are good hubs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The key idea of HITS (Hypertext-Induced Topic Search)
        &lt;ul&gt;
          &lt;li&gt;Good authorities are cited by good hubs&lt;/li&gt;
          &lt;li&gt;Good hubs point to good authorities&lt;/li&gt;
          &lt;li&gt;Iterative reinforcement…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many applications in graph/network analysis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;link information is very useful
        &lt;ul&gt;
          &lt;li&gt;anchor text&lt;/li&gt;
          &lt;li&gt;pagerank&lt;/li&gt;
          &lt;li&gt;HITS&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Both pagerank and HITS have many applications in analyzing other graphs or networks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425-distributed-systems&quot;&gt;CS 425 Distributed Systems&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Know why key-value/NoSQL are gaining popularity&lt;/li&gt;
  &lt;li&gt;Know the design of Apache Cassandra&lt;/li&gt;
  &lt;li&gt;Know the design of Apache HBase&lt;/li&gt;
  &lt;li&gt;Use various time synchronization algorithms&lt;/li&gt;
  &lt;li&gt;Apply Lamport and vector timestamps to order events in a distributed system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Key-value and NoSQL stores&lt;/li&gt;
  &lt;li&gt;Cassandra system&lt;/li&gt;
  &lt;li&gt;CAP theorem&lt;/li&gt;
  &lt;li&gt;Consistency-availability tradeoff and spectrum&lt;/li&gt;
  &lt;li&gt;Eventual consistency&lt;/li&gt;
  &lt;li&gt;HBase system&lt;/li&gt;
  &lt;li&gt;ACID vs. BASE&lt;/li&gt;
  &lt;li&gt;Time synchronization algorithms in asynchronous systems: Cristian’s, NTP, and Berkeley algorithms&lt;/li&gt;
  &lt;li&gt;Lamport causality and timestamps&lt;/li&gt;
  &lt;li&gt;Vector timestamps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why are key-value/NoSQL systems popular today?&lt;/li&gt;
  &lt;li&gt;How does Cassandra make writes fast?&lt;/li&gt;
  &lt;li&gt;How does Cassandra handle failures?&lt;/li&gt;
  &lt;li&gt;What is the CAP theorem?&lt;/li&gt;
  &lt;li&gt;What is eventual consistency?&lt;/li&gt;
  &lt;li&gt;What is a quorum?&lt;/li&gt;
  &lt;li&gt;What are the different consistency levels in Cassandra?&lt;/li&gt;
  &lt;li&gt;How do snitches work in Cassandra?&lt;/li&gt;
  &lt;li&gt;Why is time synchronization hard in asynchronous systems?&lt;/li&gt;
  &lt;li&gt;How can you reduce the error while synchronizing time across two machines over a network?&lt;/li&gt;
  &lt;li&gt;How does HBase ensure consistency?&lt;/li&gt;
  &lt;li&gt;What is Lamport causality?&lt;/li&gt;
  &lt;li&gt;Can you assign Lamport timestamps to a run?&lt;/li&gt;
  &lt;li&gt;Can you assign vector timestamps to a run?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings-and-resources&quot;&gt;Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datastax.com/documentation/cassandra/2-0/cassandra/gettingStartedCassandraIntro.html&quot;&gt;Cassandra&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hbase.apache.org/&quot;&gt;HBase&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datastax.com/documentation/articles/cassandra/cassandrathenandnow.html&quot;&gt;Cassandra 2-0 Paper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/Eweaver/cassandra-presentation-at-nosql&quot;&gt;Cassandra NoSQL Presentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.datastax.com/docs/1-0/index&quot;&gt;Cassandra 1-0 documentation at datastax.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.apache.org/cassandra/ArchitectureOverview&quot;&gt;Cassandra Apache wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;5-1-1-why-key-value-with-nosql&quot;&gt;5-1-1 Why Key-Value with NoSQL&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Distributed Hash Table to construct relational database (P2P)&lt;/li&gt;
  &lt;li&gt;Mismatch with today’s workloads
    &lt;ul&gt;
      &lt;li&gt;Data: large and unstructured&lt;/li&gt;
      &lt;li&gt;lots of random reads and writes&lt;/li&gt;
      &lt;li&gt;sometime write-heavy&lt;/li&gt;
      &lt;li&gt;foreign keys rarely needed&lt;/li&gt;
      &lt;li&gt;joins infrequent&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Needs of today’s workloads
    &lt;ul&gt;
      &lt;li&gt;speed&lt;/li&gt;
      &lt;li&gt;avoid single point of failure (SPoF)&lt;/li&gt;
      &lt;li&gt;Fewer system administrators&lt;/li&gt;
      &lt;li&gt;incremental scalability&lt;/li&gt;
      &lt;li&gt;scale out, not up
        &lt;ul&gt;
          &lt;li&gt;why?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;scale out, not up
    &lt;ul&gt;
      &lt;li&gt;scale up = grow your cluster capacity by replacing with more powerful machines
        &lt;ul&gt;
          &lt;li&gt;traditional approach&lt;/li&gt;
          &lt;li&gt;not cost-effective, as you’re buying above the sweet spot on the price curve&lt;/li&gt;
          &lt;li&gt;and you need to replace machines often&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;scale out = incrementally grow your cluster capacity by adding more COTS machines (components off the shelf)
        &lt;ul&gt;
          &lt;li&gt;cheaper&lt;/li&gt;
          &lt;li&gt;over a long duration, phase in a few newer (faster) machines as you phase out a few older machines&lt;/li&gt;
          &lt;li&gt;used by most companies who run datacenters and clouds today&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;key-value/nosql data model
    &lt;ul&gt;
      &lt;li&gt;NoSQL = “Not only SQL”&lt;/li&gt;
      &lt;li&gt;Necessary API operations: get(key) and put(key, value)
        &lt;ul&gt;
          &lt;li&gt;get returns value; put updates value if already exists&lt;/li&gt;
          &lt;li&gt;and some extended operaitons, eg “CQL” in cassandra key-value store&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tables
        &lt;ul&gt;
          &lt;li&gt;“Column families” in Cassandra, “Table” in HBase, “Collection” in MongoDB&lt;/li&gt;
          &lt;li&gt;Like RDBMS tables, but…&lt;/li&gt;
          &lt;li&gt;May be unstructured: may not have schemas
            &lt;ul&gt;
              &lt;li&gt;some columns may be missing from some rows&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Don’t always support joins or have foreign keys&lt;/li&gt;
          &lt;li&gt;can have index tables, just like RDBMSs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Which of the following may NOT be present in key-value/NoSQL stores? (select all correct answers)
        &lt;ul&gt;
          &lt;li&gt;Joins (c)&lt;/li&gt;
          &lt;li&gt;Foreign Keys (c)&lt;/li&gt;
          &lt;li&gt;Tables (not c)&lt;/li&gt;
          &lt;li&gt;Rows (not c)&lt;/li&gt;
          &lt;li&gt;Some columns in some rows&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Column-Oriented Storage
    &lt;ul&gt;
      &lt;li&gt;NoSQL systems often use column-oriented storage
        &lt;ul&gt;
          &lt;li&gt;RDBMSs store an entire row together( on disk or at a server)&lt;/li&gt;
          &lt;li&gt;NoSQL systems typically store a column together (or a group of columns).
            &lt;ul&gt;
              &lt;li&gt;Entrie within a column are indexed and easy to locate, given a key (and vice-versa)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Why useful?
            &lt;ul&gt;
              &lt;li&gt;range searches within a column are fast since you don’t need to fetch the entire database&lt;/li&gt;
              &lt;li&gt;eg, Get me all the blog_ids from the blog table that were updated within the past month
                &lt;ul&gt;
                  &lt;li&gt;search in the last updated column, fetch corresponding blog_id column&lt;/li&gt;
                  &lt;li&gt;don’t need to fetch the other columns&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Why is column-oriented storage useful? (select all correct answers)
        &lt;ul&gt;
          &lt;li&gt;Queries that touch only a few columns are faster than those in a row-oriented storage. (c)&lt;/li&gt;
          &lt;li&gt;It enables faster range searches using one column. (c)&lt;/li&gt;
          &lt;li&gt;It leads to lower total storage for the table. (not c)&lt;/li&gt;
          &lt;li&gt;It prevents the entire table from being read for a query. (c)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-1-2-cassandra&quot;&gt;5-1-2 Cassandra&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Widely used&lt;/li&gt;
  &lt;li&gt;Data Placement Strategies
    &lt;ul&gt;
      &lt;li&gt;Replication Strategy: two options:
        &lt;ul&gt;
          &lt;li&gt;SimpleStrategy&lt;/li&gt;
          &lt;li&gt;NetworkTopologyStrategy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;u&gt;SimpleStrategy&lt;/u&gt;: uses the partitioner, of which there are two kinds
        &lt;ul&gt;
          &lt;li&gt;RandomPartitioner:Chord-like hash partitioning&lt;/li&gt;
          &lt;li&gt;ByteOrdered Partitioner: ASsigns ranges of keys to servers.
            &lt;ul&gt;
              &lt;li&gt;easier for &lt;strong class=&quot;highlighted&quot;&gt;range queries&lt;/strong&gt; (eg, Get me all twitter users starting with [a-b])&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;u&gt;NetworkTopologyStrategy&lt;/u&gt;: for multi-DC deployments
        &lt;ul&gt;
          &lt;li&gt;Two replicas per DC (data center)&lt;/li&gt;
          &lt;li&gt;Three replicas per DC&lt;/li&gt;
          &lt;li&gt;Per DC
            &lt;ul&gt;
              &lt;li&gt;First replica placed according to Partitioner&lt;/li&gt;
              &lt;li&gt;Then go clockwise around ring until you hit a different rack&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Snitches
    &lt;ul&gt;
      &lt;li&gt;Maps: IPs to racks and DCs. Configured in cassandra.yaml config file&lt;/li&gt;
      &lt;li&gt;Some options:
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;SimpleSnitch&lt;/strong&gt;: Unaware of Topology (rack-unaware)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;RackInferring&lt;/strong&gt;: Assumes topology of network by octet of server’s IP address
            &lt;ul&gt;
              &lt;li&gt;101-102-103-104 = x.&amp;lt;DC octet&amp;gt;.&amp;lt;rack octet&amp;gt;.&amp;lt;node octet&amp;gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;PropertyFileSnitch&lt;/strong&gt;: uses a config file&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;EC2Snitch&lt;/strong&gt;: uses EC2
            &lt;ul&gt;
              &lt;li&gt;EC2 Region = DC&lt;/li&gt;
              &lt;li&gt;Availability zone = rack&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Other snitch options available&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Writes
    &lt;ul&gt;
      &lt;li&gt;Need to be lock-free and fast (no reads or disk seeks)&lt;/li&gt;
      &lt;li&gt;Client sends write to one coordinator node in Cassandra cluster
        &lt;ul&gt;
          &lt;li&gt;coordinator may be per-key, or per-client, or per-query&lt;/li&gt;
          &lt;li&gt;Per-key coordinator ensures writes for the key are serialized&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Coordinator uses Partitioner to send query to all replica nodes responsible for key&lt;/li&gt;
      &lt;li&gt;When X replicas respond, coordinator returns an acknowledgement to the client
        &lt;ul&gt;
          &lt;li&gt;X? We’ll see later.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Always writable: &lt;strong class=&quot;highlighted&quot;&gt;Hinted Handoff Mechanism&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;if any replica is down, the coordinator writes to all other replicas, and keeps the write locally until down replica comes back up.&lt;/li&gt;
          &lt;li&gt;When all replicas are down, the Coordinator (front end) buffers writes (for up to a few hours)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;One ring per datacenter
        &lt;ul&gt;
          &lt;li&gt;Per-DC coordinator elected to coordinate with other DCs&lt;/li&gt;
          &lt;li&gt;Election done via Zookeeper, which runs a Paxos (consensus) variant
            &lt;ul&gt;
              &lt;li&gt;Paxos: elswhere in this course&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WRites at a replica node
    &lt;ul&gt;
      &lt;li&gt;log it in disk commit log (for failure recovery)&lt;/li&gt;
      &lt;li&gt;Make changes to appropriate memtables
        &lt;ul&gt;
          &lt;li&gt;Memtable = In-memory representation of multiple key-value pairs&lt;/li&gt;
          &lt;li&gt;Cache that can be searched by key&lt;/li&gt;
          &lt;li&gt;Write-back cache as opposed to write-through&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Later, when memtable is full or old, flush to disk
        &lt;ul&gt;
          &lt;li&gt;Data File: An &lt;strong class=&quot;highlighted&quot;&gt;SSTable&lt;/strong&gt; (Sorted string table) – list of key-value pairs, sorted by key&lt;/li&gt;
          &lt;li&gt;Index File: an SSTable of (key, position in data sstable) pairs&lt;/li&gt;
          &lt;li&gt;And a Bloom filter (for efficient search) – next slide&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bloom filter
    &lt;ul&gt;
      &lt;li&gt;Compact way of representing a set of items&lt;/li&gt;
      &lt;li&gt;Checking for existence in set is cheap&lt;/li&gt;
      &lt;li&gt;Some probability of false positives: an item not in set may check true as being in set&lt;/li&gt;
      &lt;li&gt;Never false negatives&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compaction
    &lt;ul&gt;
      &lt;li&gt;Data updates accumulate over time and SStables and logs need to be compacted
        &lt;ul&gt;
          &lt;li&gt;the process of compaction merges SSTables, ie, by merging updates for a key&lt;/li&gt;
          &lt;li&gt;run periodically and locally at each server&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deletes
    &lt;ul&gt;
      &lt;li&gt;Delete: don’t delete item right away
        &lt;ul&gt;
          &lt;li&gt;Add a &lt;strong class=&quot;highlighted&quot;&gt;tombstone&lt;/strong&gt; to the log&lt;/li&gt;
          &lt;li&gt;Eventually, when compaction encounters tombstone it will delete item&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reads
    &lt;ul&gt;
      &lt;li&gt;Read: Similar to writes, except
        &lt;ul&gt;
          &lt;li&gt;Coordinator can contact X replicas (eg, in same rack)
            &lt;ul&gt;
              &lt;li&gt;Coordinator sends read to replicas that have responded quickest in past&lt;/li&gt;
              &lt;li&gt;When X replicas respond, coordinator returns the latest-timestamped value from among those X&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Coordinator also fetches value from other replicas
            &lt;ul&gt;
              &lt;li&gt;checks consisten cy in the background, initiating a &lt;strong class=&quot;highlighted&quot;&gt;read repair&lt;/strong&gt; if any two values are different&lt;/li&gt;
              &lt;li&gt;This mechanism seeks to eventually bring all replicas up to date&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;A row may be split across multiple SSTables =&amp;gt; reads need to touch multiple SSTables =&amp;gt; reads slower than writes (but still fast)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Membership
    &lt;ul&gt;
      &lt;li&gt;any server in cluster could be the coordinator&lt;/li&gt;
      &lt;li&gt;So every server needs to maintain a list of all the other servers that are currently  in the server&lt;/li&gt;
      &lt;li&gt;List needs to be updated automatically as servers join, leave, and fail.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Suspicion Mechanisms in Cassandra
    &lt;ul&gt;
      &lt;li&gt;Suspicion mechanisms to adaptively set the timeout based on underlying network and failure behavior&lt;/li&gt;
      &lt;li&gt;Accrual detector: Failure Detector outputs a vlue (PHI) representing suspicion&lt;/li&gt;
      &lt;li&gt;Apps set an appropriate threshold&lt;/li&gt;
      &lt;li&gt;PHI calculation for a member
        &lt;ul&gt;
          &lt;li&gt;Inter-arrival times for gossip messages&lt;/li&gt;
          &lt;li&gt;PHI(t) = -log(CDF or Provbability(t_now - t_last))/log10&lt;/li&gt;
          &lt;li&gt;PHI basically determines the detection timeout, but takes into account historical inter-arrival time variations for gossiped heartbeats.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In Practice, PHI = 5 =&amp;gt; 10-15 sec detection time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cassandra vs RDBMS
    &lt;ul&gt;
      &lt;li&gt;MySQL is one of the most popular (and has been for a while)&lt;/li&gt;
      &lt;li&gt;on &amp;gt; 50 GB data&lt;/li&gt;
      &lt;li&gt;MySQL
        &lt;ul&gt;
          &lt;li&gt;Writes 300 ms avg&lt;/li&gt;
          &lt;li&gt;Reads 350 ms avg&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Cassandra
        &lt;ul&gt;
          &lt;li&gt;Writes 0-12 ms avg&lt;/li&gt;
          &lt;li&gt;Reads 15 ms avg&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Orders of magnitude faster What’s the catch? What did we lose?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-1-3-the-cap-theorem&quot;&gt;5-1-3 The CAP theorem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CAP Theorem
    &lt;ul&gt;
      &lt;li&gt;Prposed by Eric Brewer (Berkeley)&lt;/li&gt;
      &lt;li&gt;Proved by Gilbert and Lynch (NUS and MIT)&lt;/li&gt;
      &lt;li&gt;In a DS you can stisfy at most 2 out of the 3 guarantees:
        &lt;ol&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Consistency&lt;/strong&gt;: all nodes see same data at any time, or reads return latest written value by any client&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Availability&lt;/strong&gt;: the system allows operations all the time, and operations return quickly&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Partition-tolerance&lt;/strong&gt;: the system continues to work in spite of network partitions&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is availability important?
    &lt;ul&gt;
      &lt;li&gt;Availabilty = reads/writes complete reliably and quickly.&lt;/li&gt;
      &lt;li&gt;Measurements have shown that a 500 ms increase in latency for opeartions at Amazon.com or at Google.com can cause a 20% drop in revenue.&lt;/li&gt;
      &lt;li&gt;At amazon, each added millisecond of latency implies a $6M yearly loss&lt;/li&gt;
      &lt;li&gt;SLAs (Service Level Agreements) written by providers predominantly deal with latencies faced by clients.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is consistency important?
    &lt;ul&gt;
      &lt;li&gt;Consistency = all nodes see same data at any time, or reads return latest written value by any client.&lt;/li&gt;
      &lt;li&gt;When you access your bank or investment account via multiple clients (laptop, workstation, phone, tablet), you want the updates done from one client to be visible to other clients.&lt;/li&gt;
      &lt;li&gt;When thousands of customers are looking to book a flight, all updates from any client (eg book a flight) should be accessible by other clients.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;why is Partition-tolerance important?
    &lt;ul&gt;
      &lt;li&gt;Partitions can happen across datacenters when the Internet gets disconnected
        &lt;ul&gt;
          &lt;li&gt;internet router outages&lt;/li&gt;
          &lt;li&gt;under-sea cables cut&lt;/li&gt;
          &lt;li&gt;DNS not working&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Partitions can also occur within a datacenter, eg a rack switch outage&lt;/li&gt;
      &lt;li&gt;Still desire system to continue functioning normally under this scenario&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CAP Theorem fallout
    &lt;ul&gt;
      &lt;li&gt;Since partition-tolerance is essential in today’s cloud computing systems, CAP theorem implies that a system has to choose between consistency and availability&lt;/li&gt;
      &lt;li&gt;Cassandra
        &lt;ul&gt;
          &lt;li&gt;Eventual (weak) consistency, availability, partition-tolerance&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Traditional RDBMSs
        &lt;ul&gt;
          &lt;li&gt;strong consistency over availability under a partition&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eventual consistency
    &lt;ul&gt;
      &lt;li&gt;If all writes stop (to a key), then all its values (replicas) will converge eventually&lt;/li&gt;
      &lt;li&gt;If writes continue, then system always tries to keep converging.
        &lt;ul&gt;
          &lt;li&gt;Moving “wave” of updated values lagging behind the lateset values sent by clients, but always trying to catch up.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;May still return stale values to clients (eg if many back-to-back writes)&lt;/li&gt;
      &lt;li&gt;But works well when there are a few periods of low writes – system converges quickly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RDBMS vs Key-Value stores
    &lt;ul&gt;
      &lt;li&gt;While RDBMS provide ACID
        &lt;ul&gt;
          &lt;li&gt;Atomicity&lt;/li&gt;
          &lt;li&gt;Consistency&lt;/li&gt;
          &lt;li&gt;Isolation&lt;/li&gt;
          &lt;li&gt;Durability&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Key-value stores like Cassandra provide BASE
        &lt;ul&gt;
          &lt;li&gt;Basically Available Soft-state Eventual Consistency&lt;/li&gt;
          &lt;li&gt;Prefers Availability over Consistency&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Eventual Consistency says: All values for a given key will eventually be the same after writes have stopped.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Back to cassandra: mystery of x
    &lt;ul&gt;
      &lt;li&gt;Cassandra has consistency levels&lt;/li&gt;
      &lt;li&gt;Client is allowed to choose a consistency level for each operation (read/write)&lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;ANY&lt;/strong&gt;: any server (may not be replica)
        &lt;ul&gt;
          &lt;li&gt;Fastest: coordinator caches write and replies quickly to client&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;ALL&lt;/strong&gt;: all replicas
        &lt;ul&gt;
          &lt;li&gt;Ensures strong consistency, but slowest&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;ONE&lt;/strong&gt;: at least one replica
        &lt;ul&gt;
          &lt;li&gt;Faster than ALL, but cannot tolerate a failure&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;QUOROM&lt;/strong&gt;: quorum across all replicas in all datacenters (DCs)
        &lt;ul&gt;
          &lt;li&gt;global consistency, but still fast&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;LOCAL_QUORUM&lt;/strong&gt;: quorum in coordinator’s DC
        &lt;ul&gt;
          &lt;li&gt;Faster: only waits for quorum in first DC client contacts&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;EACH_QUORUM&lt;/strong&gt;: quorum in every DC
        &lt;ul&gt;
          &lt;li&gt;Lets each DC do its own quorum: supports hierarchical replies&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quorums in Detail
    &lt;ul&gt;
      &lt;li&gt;Several key-value/NoSQL stores (eg Riak and Cassandra) use quorums&lt;/li&gt;
      &lt;li&gt;Reads
        &lt;ul&gt;
          &lt;li&gt;Client specifies value of R ( ≤ N = total number of replicas of that key).&lt;/li&gt;
          &lt;li&gt;R = read consistency level.&lt;/li&gt;
          &lt;li&gt;Coordinator waits for R replicas to respond before sending result to client.&lt;/li&gt;
          &lt;li&gt;In background, coordinator checks for consistency of remaining (N-R) replicas, and initiates read repair if needed.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Writes come in two flavors
        &lt;ul&gt;
          &lt;li&gt;Client specifies W (≤ N)&lt;/li&gt;
          &lt;li&gt;W = write consistency level.&lt;/li&gt;
          &lt;li&gt;Client writes new value to W replicas and returns. Two falvors:
            &lt;ul&gt;
              &lt;li&gt;Coordinator blocks until quorum is reached.&lt;/li&gt;
              &lt;li&gt;Asynchronous: Just write and return.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;R = read replica count, W = write replica count&lt;/li&gt;
      &lt;li&gt;Two necessary conditions:
        &lt;ol&gt;
          &lt;li&gt;W+R &amp;gt; N&lt;/li&gt;
          &lt;li&gt;W &amp;gt; N/2&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Select values vased on application
        &lt;ul&gt;
          &lt;li&gt;(W=1, R=1): very few writes and reads&lt;/li&gt;
          &lt;li&gt;(W=N, R=1): great for read-heavy workloads&lt;/li&gt;
          &lt;li&gt;(W=N/2+1, R=N/2+1): great for write-heavy workloads&lt;/li&gt;
          &lt;li&gt;(W=1, R=N): great for write-heavy workloads with mostly one client writing per key&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Types of Consistency
    &lt;ul&gt;
      &lt;li&gt;cassandra offers eventual consistency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-1-4-the-consistency-spectrum&quot;&gt;5-1-4 The Consistency Spectrum&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strong consistency models
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Linearizability&lt;/strong&gt;: Each operation by a client is visible (or available) instantaneously to all other clients
        &lt;ul&gt;
          &lt;li&gt;Instantaneously in real time&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Sequential Consistency&lt;/strong&gt; (Lamport):
        &lt;ul&gt;
          &lt;li&gt;“&lt;em&gt;…the result of any execution is the same as if the operations of all the processors were executed in some sequential order, and the operations of each individual processor appear in this sequence in the order specified by its program.&lt;/em&gt;”&lt;/li&gt;
          &lt;li&gt;After the fact, find a “reasonable” ordering of the operations (can re-order operations) that obeys sanity (consistency) at all clients, and across clients&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Transaction ACID properties, eg newer key-value/NoSQL stores (sometimes called “NewSQL”)
        &lt;ul&gt;
          &lt;li&gt;Hyperdex (Cornell)&lt;/li&gt;
          &lt;li&gt;Spanner (Google)&lt;/li&gt;
          &lt;li&gt;Transaction chains (Microsoft Research)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-1-5-hbase&quot;&gt;5-1-5 HBase&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Cassandra is AP, while HBase is CP&lt;/li&gt;
  &lt;li&gt;HBase
    &lt;ul&gt;
      &lt;li&gt;Google’s BigTable was first “blob-based” storage system&lt;/li&gt;
      &lt;li&gt;Yahoo! Open-sourced it –&amp;gt; HBase&lt;/li&gt;
      &lt;li&gt;Major Apache project today&lt;/li&gt;
      &lt;li&gt;Facebook uses HBase internally&lt;/li&gt;
      &lt;li&gt;API functions
        &lt;ul&gt;
          &lt;li&gt;Get/Put(row)&lt;/li&gt;
          &lt;li&gt;Scan(row range, filter) –range queries&lt;/li&gt;
          &lt;li&gt;MultiPut&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Unlike Cassandra, HBase prefers consistency (over availability)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HBase Storage Hierarchy
    &lt;ul&gt;
      &lt;li&gt;HBase Table
        &lt;ul&gt;
          &lt;li&gt;Split into multiple regions: replicated across servers
            &lt;ul&gt;
              &lt;li&gt;ColumnFamily = subset of columns with similar query patterns&lt;/li&gt;
              &lt;li&gt;One &lt;strong class=&quot;highlighted&quot;&gt;Store&lt;/strong&gt; per combination of ColumnFamily + region
                &lt;ul&gt;
                  &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Memstore&lt;/strong&gt; for each Store: in-memory updates to Store; flushed to disk when full
                    &lt;ul&gt;
                      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;StoreFiles&lt;/strong&gt; for each store for each region: where the data lives
                        &lt;ul&gt;
                          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;HFile&lt;/strong&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;HFile
        &lt;ul&gt;
          &lt;li&gt;SSTable from Google’s BigTable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Log Replay
    &lt;ul&gt;
      &lt;li&gt;After recovery from failure, or upon bootup (HRegionServer/HMaster)
        &lt;ul&gt;
          &lt;li&gt;Replay any stale logs (use timestamps to find out where the databse is with respect to the logs)&lt;/li&gt;
          &lt;li&gt;Replay: add edits to the MemStore&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cross-Datacenter Replication
    &lt;ul&gt;
      &lt;li&gt;single Master cluster&lt;/li&gt;
      &lt;li&gt;Other Slave clusters replicate the same tables&lt;/li&gt;
      &lt;li&gt;Master cluster synchronously sends HLogs over to slave clusters&lt;/li&gt;
      &lt;li&gt;Coordination among clusters is via Zookeeper&lt;/li&gt;
      &lt;li&gt;Zookeeper can be used like a file system to store control informmation
        &lt;ol&gt;
          &lt;li&gt;/hbase/replication/state&lt;/li&gt;
          &lt;li&gt;/hbase/replication/peers/&lt;peer cluster=&quot;&quot; number=&quot;&quot;&gt;&lt;/peer&gt;&lt;/li&gt;
          &lt;li&gt;/hbase/replication/rs/&lt;hlog&gt;&lt;/hlog&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;Traditional Database (RDBMSs) work with storng consistency, and offer ACID&lt;/li&gt;
      &lt;li&gt;Modern workloads don’t need such strong guarantees, but do need fast response times (availability)&lt;/li&gt;
      &lt;li&gt;Unfortunately, CAP theorem&lt;/li&gt;
      &lt;li&gt;Key-Value/NoSQL systems offer BASE
        &lt;ul&gt;
          &lt;li&gt;Eventual consistency, and a variety of other consistency models striving towards storng consistency&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;We discussed design of
        &lt;ul&gt;
          &lt;li&gt;Cassandra&lt;/li&gt;
          &lt;li&gt;HBase&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-2-1-introduction-and-basics-of-time-and-ordering&quot;&gt;5-2-1 Introduction and Basics of Time and Ordering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Why is it Challenging?
    &lt;ul&gt;
      &lt;li&gt;End hosts in Internet-based systems (like clouds)
        &lt;ul&gt;
          &lt;li&gt;each have their own clocks&lt;/li&gt;
          &lt;li&gt;Unlike processors (CPUs) within one server or workstation which share a system lcock&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Processes in Internet-based systems follow an asynchronous system model
        &lt;ul&gt;
          &lt;li&gt;No bounds on
            &lt;ul&gt;
              &lt;li&gt;Message delays&lt;/li&gt;
              &lt;li&gt;Processing delays&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Unlike multi-processor (or parallel) systems whcih follow a synchronous system model&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some definitions
    &lt;ul&gt;
      &lt;li&gt;An Asynchronous Distributed System consists of a number of processes&lt;/li&gt;
      &lt;li&gt;Each process has a state (values of variables)&lt;/li&gt;
      &lt;li&gt;Each process takes actions to change its state, which may be an instruction or a communication action (send, receive)&lt;/li&gt;
      &lt;li&gt;An even is the occurrence of an action&lt;/li&gt;
      &lt;li&gt;Each process has a local clock – events within a process can be assigned timestamps, and thus ordered linearly&lt;/li&gt;
      &lt;li&gt;But – in a distributed system, we also need to know the time order of events across different processes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Clock Skew vs Clock drift
    &lt;ul&gt;
      &lt;li&gt;EAch process (running at some end host) has its own clock.&lt;/li&gt;
      &lt;li&gt;When comparing two clocks at two processes:
        &lt;ul&gt;
          &lt;li&gt;Clock Skew = Relative Difference in clock values of two processes
            &lt;ul&gt;
              &lt;li&gt;Liek distance between two vehicles on a road&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Clock Drift = Relative Difference in clock frequencies (rates) of two processes
            &lt;ul&gt;
              &lt;li&gt;Like difference in speeds of two vehicles on the road&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A non-zero clock skew implies clocks are not synchronized&lt;/li&gt;
      &lt;li&gt;A non-zero clock drift causes skew to increase (eventually)
        &lt;ul&gt;
          &lt;li&gt;If faster vehicle is ahead, it will drift away&lt;/li&gt;
          &lt;li&gt;If faster vehicle is behind, it will catch up and then drift away&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How often to Synchronize?
    &lt;ul&gt;
      &lt;li&gt;Maximum Drift Rate (MDR) of a clock&lt;/li&gt;
      &lt;li&gt;Absolute MDR is defined relative to Coordinated Universal Time (UTC).  UTC is the correct time at any point of time.
        &lt;ul&gt;
          &lt;li&gt;MDR of a process depends on the environment&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Max drift rate between two clocks with similar MDR is 2*MDR&lt;/li&gt;
      &lt;li&gt;Given a max acceptable skew M between any pair of clocks, need to synchronize at least once every M/(2*MDR)
        &lt;ul&gt;
          &lt;li&gt;since time = d / r&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;External vs internal synchronization
    &lt;ul&gt;
      &lt;li&gt;Consider a group of processes&lt;/li&gt;
      &lt;li&gt;External Synchronization
        &lt;ul&gt;
          &lt;li&gt;Each process C(i)’s clock is within a bound D of a well-known clock S external to the group&lt;/li&gt;
          &lt;li&gt;|C(i)-S| &amp;lt; D at all times&lt;/li&gt;
          &lt;li&gt;External clock may be connected to UTC or an atomic clock&lt;/li&gt;
          &lt;li&gt;eg, Cristian’s algorithm, NTP&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Internal Synchronization
        &lt;ul&gt;
          &lt;li&gt;Every pair of processes in gorup have clocks within bound D&lt;/li&gt;
          &lt;li&gt;|C(i)-C(j)| &amp;lt; D at all times and for all processes i,j&lt;/li&gt;
          &lt;li&gt;eg, Berkeley algorithm&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;External Synchronization with D =&amp;gt; Internal Synchronization with 2*D&lt;/li&gt;
      &lt;li&gt;Internal synchronization does not imply External Synchronization
        &lt;ul&gt;
          &lt;li&gt;In fact, the entire system may drift away from the extern clock S!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-2-2-cristians-algorithm&quot;&gt;5-2-2 Cristian’s Algorithm&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gotchas
    &lt;ul&gt;
      &lt;li&gt;Allowed to increase clock value but should never decrease clock value
        &lt;ul&gt;
          &lt;li&gt;may violate ordering of events within the same process&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Allowed to increase or decrease speed of clock&lt;/li&gt;
      &lt;li&gt;if error is too high, take multiple readings and average them&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-2-3-ntp&quot;&gt;5-2-3 NTP&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gotchas
    &lt;ul&gt;
      &lt;li&gt;We still have a non-zero error!&lt;/li&gt;
      &lt;li&gt;WE just can’t seem to get rid of error
        &lt;ul&gt;
          &lt;li&gt;Can’t as long as message latencies are non-zero&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Can we avoid synchronizing clocks altogether, and still be able to order events?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;5-2-4-lamport-timestamps&quot;&gt;5-2-4 Lamport Timestamps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ordering events in a DS
    &lt;ul&gt;
      &lt;li&gt;Hard&lt;/li&gt;
      &lt;li&gt;To order events across processes, trying to sync clocks is one approach&lt;/li&gt;
      &lt;li&gt;what if we instead assigned timestamps to events that were not absolute time?&lt;/li&gt;
      &lt;li&gt;As long as these timestamps obey causality, that would work
        &lt;ul&gt;
          &lt;li&gt;If an event A causally happens before another event B, then timestamp(A) &amp;lt; timestamp(B)&lt;/li&gt;
          &lt;li&gt;Humans use Causality all the time
            &lt;ul&gt;
              &lt;li&gt;eg, I enter a house only after I unlock it&lt;/li&gt;
              &lt;li&gt;eg, You receive a letter only after I send it&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Logical (Lamport) Ordering
    &lt;ul&gt;
      &lt;li&gt;Proposed by Leslie Lamport in the 1970s&lt;/li&gt;
      &lt;li&gt;Used in almost all distributed systems since then&lt;/li&gt;
      &lt;li&gt;Almost all cloud computing systems use some form of logical ordering of events&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In practice: Lamport Timestamps
    &lt;ul&gt;
      &lt;li&gt;Goal: assign logical timestamp to each event&lt;/li&gt;
      &lt;li&gt;Timestamps obey causality&lt;/li&gt;
      &lt;li&gt;rules
        &lt;ul&gt;
          &lt;li&gt;each process uses a local counter which is an integer
            &lt;ul&gt;
              &lt;li&gt;initial value of counter is zero&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;A process increments its coutner when a send or an instruction happens at it. The counter is assigned to the event as its timestamp&lt;/li&gt;
          &lt;li&gt;A send (message) event carries its timestamp&lt;/li&gt;
          &lt;li&gt;For a receive (message) event the coutner is updated by max(local clock, message timestamp) +1&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-2-5-vector-clocks&quot;&gt;5-2-5 Vector Clocks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Vector Timestamps
    &lt;ul&gt;
      &lt;li&gt;used in key-value stores like Riak&lt;/li&gt;
      &lt;li&gt;Each process uses a vector of integer clocks&lt;/li&gt;
      &lt;li&gt;suppose there are N processes in the group 1…N&lt;/li&gt;
      &lt;li&gt;Each vector has N elements&lt;/li&gt;
      &lt;li&gt;Process i maintains vector Vi[1…N]&lt;/li&gt;
      &lt;li&gt;jth element of vector clock at process i, Vi[j], is i’s knowledge of latest events at rpocess j&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Assigning vector timestamps
    &lt;ul&gt;
      &lt;li&gt;incrementing vector clocks
        &lt;ol&gt;
          &lt;li&gt;On an instruction or send event at process i, it increments only its ith elemetn of its vector lcokc&lt;/li&gt;
          &lt;li&gt;Each message carries the send-event’s vector timestamp V&lt;sub&gt;message&amp;gt;&lt;/sub&gt;[1…N]&lt;/li&gt;
          &lt;li&gt;On receiving a message at process i:&lt;/li&gt;
        &lt;/ol&gt;
        &lt;ul&gt;
          &lt;li&gt;Vi[i] = Vi[i] + 1&lt;/li&gt;
          &lt;li&gt;Vi[j] = max(V&lt;sub&gt;message&lt;/sub&gt;[j], Vi[j]) for j ≠ i&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS425-wk5-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-427-software-engineering&quot;&gt;CS 427 Software Engineering&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;4-1-definition-of-software-architecture&quot;&gt;4-1 Definition of Software Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Definitions of Software ARchitecture
    &lt;ul&gt;
      &lt;li&gt;“A software system’s architecture is the set of of &lt;strong class=&quot;highlighted&quot;&gt;princiapal design decisions&lt;/strong&gt; about the system.”&lt;/li&gt;
      &lt;li&gt;The software architecture of a program or computing system is the structure or strucutures of the system, whcih comprise &lt;strong class=&quot;highlighted&quot;&gt;software elements&lt;/strong&gt;, the &lt;strong class=&quot;highlighted&quot;&gt;externally visible properties&lt;/strong&gt; of those elements, and the &lt;strong class=&quot;highlighted&quot;&gt;relationshipts&lt;/strong&gt; among them.”&lt;/li&gt;
      &lt;li&gt;A model of software architecture “consists of three components: &lt;strong class=&quot;highlighted&quot;&gt;elements, form, and rationale&lt;/strong&gt;.”
        &lt;ul&gt;
          &lt;li&gt;Elements (what): Processing, data, or connecting elements&lt;/li&gt;
          &lt;li&gt;Form (how): Constraints (properties, relationships) on the elements&lt;/li&gt;
          &lt;li&gt;Rationale (why): System constraints, often derived from system requirements&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Benefits of sofware architecture
    &lt;ul&gt;
      &lt;li&gt;Understanding&lt;/li&gt;
      &lt;li&gt;Reuse&lt;/li&gt;
      &lt;li&gt;Construction&lt;/li&gt;
      &lt;li&gt;Evolution&lt;/li&gt;
      &lt;li&gt;Analysis&lt;/li&gt;
      &lt;li&gt;Management&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-2-software-architect&quot;&gt;4-2 Software Architect&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Important skills of software architects
    &lt;ul&gt;
      &lt;li&gt;“software architects should &lt;strong class=&quot;highlighted&quot;&gt;design, develop, nurture, and maintain&lt;/strong&gt; the architecture of the software-intensive systems they are involved with.”
        &lt;ul&gt;
          &lt;li&gt;Domain Knowledge&lt;/li&gt;
          &lt;li&gt;Software Development Expertise&lt;/li&gt;
          &lt;li&gt;Communication Skills&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS427-wk5-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-3-abstraction&quot;&gt;4-3 Abstraction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Definition of Abstraction
    &lt;ul&gt;
      &lt;li&gt;Removing detail to &lt;strong class=&quot;highlighted&quot;&gt;simplify and foucus attention&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Generalizing to &lt;strong class=&quot;highlighted&quot;&gt;identify the common core or essence&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Importance of Abstraction in CS
    &lt;ul&gt;
      &lt;li&gt;“Once you realize that computing is all about &lt;strong class=&quot;highlighted&quot;&gt;constructing, manipulating, and reasoning about abstractions&lt;/strong&gt;, it becomes clear that an important prerequisiite for writing(good) computer programs is the ability to &lt;strong class=&quot;highlighted&quot;&gt;handle abstractions in a precise manner&lt;/strong&gt;.”&lt;/li&gt;
      &lt;li&gt;“Computer science is not computer programming. Thinking like a computer scientist means more than being able to program a computer. It requires &lt;strong class=&quot;highlighted&quot;&gt;thinking at multiple levels of abstraction&lt;/strong&gt;.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Types of Abstraction in Software Engineering
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Procedural&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Naming a sequence of instructions&lt;/li&gt;
          &lt;li&gt;Parameterizing a procedure&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Data&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Naming a collection of data&lt;/li&gt;
          &lt;li&gt;Data type defined by a set of procedures&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Control&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Without specifying all register/binary-level steps&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Performance&lt;/strong&gt; abstraction O(N)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Software Development process also has abstractions
    &lt;ul&gt;
      &lt;li&gt;Requirements (What)&lt;/li&gt;
      &lt;li&gt;Architecture&lt;/li&gt;
      &lt;li&gt;OO Design&lt;/li&gt;
      &lt;li&gt;Implementation (How)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to get good abstractions
    &lt;ul&gt;
      &lt;li&gt;learn from others&lt;/li&gt;
      &lt;li&gt;generalize from examples&lt;/li&gt;
      &lt;li&gt;look for/eliminate duplication&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstractions can fool you
    &lt;ul&gt;
      &lt;li&gt;suppose a collection c has operation: getItemNumbered(int index)&lt;/li&gt;
      &lt;li&gt;How do you iterate?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;C++&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getItemNumbered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;But what if the collection is a linked list?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-4-modularity&quot;&gt;4-4 Modularity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Functional Independence
    &lt;ul&gt;
      &lt;li&gt;Cohesion (Good)
        &lt;ul&gt;
          &lt;li&gt;Measure of interconnection within a module&lt;/li&gt;
          &lt;li&gt;The degree to which one part of a module depends on another&lt;/li&gt;
          &lt;li&gt;Maximize cohesion&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Coupling (Less desirable)
        &lt;ul&gt;
          &lt;li&gt;Measure of interconnection among modules&lt;/li&gt;
          &lt;li&gt;The degree to which one module depends on others&lt;/li&gt;
          &lt;li&gt;Minimize coupling&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Major types of cohesion
    &lt;ul&gt;
      &lt;li&gt;Coincidental - grouped by chance  (Low cohesion)&lt;/li&gt;
      &lt;li&gt;logical - same idea&lt;/li&gt;
      &lt;li&gt;temporal - same time&lt;/li&gt;
      &lt;li&gt;procedural - one after another&lt;/li&gt;
      &lt;li&gt;communicational - shared data&lt;/li&gt;
      &lt;li&gt;sequential - output of one being input of the other&lt;/li&gt;
      &lt;li&gt;functional - a single well-defined task (high cohesion)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Information hiding
    &lt;ul&gt;
      &lt;li&gt;EAch module should hide a design decision from others&lt;/li&gt;
      &lt;li&gt;Ideally, one design decision per module, but usually design decisions are closely related&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Example design decisions
    &lt;ul&gt;
      &lt;li&gt;Representation of data&lt;/li&gt;
      &lt;li&gt;Use of a particular software package&lt;/li&gt;
      &lt;li&gt;Use of a particular printer&lt;/li&gt;
      &lt;li&gt;Use of a particular operating system&lt;/li&gt;
      &lt;li&gt;Use of a particular algorithm&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other reasons for modularity
    &lt;ul&gt;
      &lt;li&gt;collaborative/distributed development: reduced communication&lt;/li&gt;
      &lt;li&gt;security - compartmentalization&lt;/li&gt;
      &lt;li&gt;reliability - localization of failure&lt;/li&gt;
      &lt;li&gt;Conway’s law: the architecture of a system is the same as the structure of the group that developed it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ways to achieve modularity
    &lt;ul&gt;
      &lt;li&gt;reuse a design with good modularity&lt;/li&gt;
      &lt;li&gt;think about and hide design decisions&lt;/li&gt;
      &lt;li&gt;reduce coupling and increase cohesion&lt;/li&gt;
      &lt;li&gt;eliminate duplication&lt;/li&gt;
      &lt;li&gt;reduce impact of changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-5-architecture&quot;&gt;4-5 Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Three views of software architecture
    &lt;ul&gt;
      &lt;li&gt;Static view&lt;/li&gt;
      &lt;li&gt;Dynamic view&lt;/li&gt;
      &lt;li&gt;Deployment view&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Components and connectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-6-architectural-styles&quot;&gt;4-6 Architectural Styles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Architectural Style
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Vocabularly&lt;/strong&gt; of components and connectors&lt;/li&gt;
      &lt;li&gt;Compositions &lt;strong class=&quot;highlighted&quot;&gt;constraints&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Client-server style
    &lt;ul&gt;
      &lt;li&gt;Example: SVN&lt;/li&gt;
      &lt;li&gt;Easy to add new clients to structure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Layered/Tiered style: 3-tier/n-tier client-server (eg local file system)
    &lt;ul&gt;
      &lt;li&gt;Presentation tier&lt;/li&gt;
      &lt;li&gt;Logic tier&lt;/li&gt;
      &lt;li&gt;data tier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipe-and-filter style
    &lt;ul&gt;
      &lt;li&gt;eg cat contatctbook | grep “illinois” | sort &amp;gt; illini&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-7-mvc-pattern&quot;&gt;4-7 MVC Pattern&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Architectural Pattern
    &lt;ul&gt;
      &lt;li&gt;A &lt;strong class=&quot;highlighted&quot;&gt;general, reusable&lt;/strong&gt; solution to a &lt;strong class=&quot;highlighted&quot;&gt;commonly occuring&lt;/strong&gt; problem in software architecture within a given context.&lt;/li&gt;
      &lt;li&gt;Not the same as architectural style
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Vocabularly&lt;/strong&gt; of components and connectors&lt;/li&gt;
          &lt;li&gt;Composition &lt;strong class=&quot;highlighted&quot;&gt;constraints&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model-View-Controller Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS427-wk5-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 30 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/30/MCS-Notes-Week-5</link>
				<guid isPermaLink="true">/2018/09/30/MCS-Notes-Week-5</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 4 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain how to interpret p(R=1|q,d) and estimate it based on a large set of collected relevance judgments (or clickthrough information) about query q and document d.&lt;/li&gt;
  &lt;li&gt;Explain how to interpret the conditional probability p(q|d) used for scoring documents in the query likelihood retrieval function.&lt;/li&gt;
  &lt;li&gt;Explain what a statistical language model and a unigram language model are.&lt;/li&gt;
  &lt;li&gt;Explain how to compute the maximum likelihood estimate of a unigram language model.&lt;/li&gt;
  &lt;li&gt;Explain how to use unigram language models to discover semantically related words.&lt;/li&gt;
  &lt;li&gt;Compute p(q|d) based on a given document language model p(w|d).&lt;/li&gt;
  &lt;li&gt;Explain what smoothing does.&lt;/li&gt;
  &lt;li&gt;Show that query likelihood retrieval function implements TF-IDF weighting if we smooth the document language model p(w|d) using the collection language model p(w|C) as a reference language model.&lt;/li&gt;
  &lt;li&gt;Compute the estimate of p(w|d) using Jelinek-Mercer (JM) smoothing and Dirichlet Prior smoothing, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Given a table of relevance judgments in the form of three columns (query, document, and binary relevance judgments), how can we estimate p(R=1|q,d)?&lt;/li&gt;
  &lt;li&gt;How should we interpret the query likelihood conditional probability p(q|d)?&lt;/li&gt;
  &lt;li&gt;What is a statistical language model? What is a unigram language model? How many parameters are there in a unigram language model?&lt;/li&gt;
  &lt;li&gt;How do we compute the maximum likelihood estimate of the unigram language model (based on a text sample)?&lt;/li&gt;
  &lt;li&gt;What is a background language model? What is a collection language model? What is a document language model?&lt;/li&gt;
  &lt;li&gt;Why do we need to smooth a document language model in the query likelihood retrieval model? What would happen if we don’t do smoothing?&lt;/li&gt;
  &lt;li&gt;When we smooth a document language model using a collection language model as a reference language model, what is the probability assigned to an unseen word in a document?&lt;/li&gt;
  &lt;li&gt;How can we prove that the query likelihood retrieval function implements TF-IDF weighting if we use a collection language model smoothing?&lt;/li&gt;
  &lt;li&gt;How does linear interpolation (Jelinek-Mercer) smoothing work? What is the formula?&lt;/li&gt;
  &lt;li&gt;How does Dirichlet prior smoothing work? What is the formula?&lt;/li&gt;
  &lt;li&gt;What are the similarities and differences between Jelinek-Mercer smoothing and Dirichlet prior smoothing?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapter 6 - Section 6.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;p(R=1|q,d) ; query likelihood, p(q|d)&lt;/li&gt;
  &lt;li&gt;Statistical and unigram language models&lt;/li&gt;
  &lt;li&gt;Maximum likelihood estimate&lt;/li&gt;
  &lt;li&gt;Background, collection, and document language models&lt;/li&gt;
  &lt;li&gt;Smoothing of unigram language models&lt;/li&gt;
  &lt;li&gt;Relation between query likelihood and TF-IDF weighting&lt;/li&gt;
  &lt;li&gt;Linear interpolation (i.e., Jelinek-Mercer) smoothing&lt;/li&gt;
  &lt;li&gt;Dirichlet Prior smoothing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;41--probabilistic-retrieval-model&quot;&gt;4.1 : Probabilistic Retrieval Model&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Many different retrieval models:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Probabilistic models&lt;/strong&gt;: f(d,q) = p(R=1|d,q), R ∈ {0,1}
        &lt;ul&gt;
          &lt;li&gt;Classic probabilistic model -&amp;gt; BM25&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Language model -&amp;gt; Query Likelihood&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Divergence-from-randomness model -&amp;gt; PL2
            &lt;ul&gt;
              &lt;li&gt;p(R=1|d,q) ≈ p(q|d,R=1)&lt;/li&gt;
              &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;If a user likes document d, how likely would the user enter query q (in order to retrieve d)?&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead, we prefer to use p(q|d,R=1):
    &lt;ul&gt;
      &lt;li&gt;Assume a user formulates a query based on an “&lt;strong class=&quot;highlighted&quot;&gt;imaginary relevant document&lt;/strong&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42--statistical-language-models&quot;&gt;4.2 : Statistical Language Models&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is a statistical language model?
    &lt;ul&gt;
      &lt;li&gt;A probability distribution over word sequences&lt;/li&gt;
      &lt;li&gt;Context Dependent&lt;/li&gt;
      &lt;li&gt;Can also be regarded as a probabilistic mechanism for “generating” text, thus also called a “generative” model.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is a LM useful?
    &lt;ul&gt;
      &lt;li&gt;Quantify the uncertainties in natural language&lt;/li&gt;
      &lt;li&gt;Allows us to answer questions like:
        &lt;ul&gt;
          &lt;li&gt;Given that we see “John” and “feels”, how likely will we see “happy” as opposed to “habit as the next word? (&lt;strong class=&quot;highlighted&quot;&gt;speech recognition&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;Given that we observe “baseball” three times and “game” once in a news article, how likely is it about “sports”? (&lt;strong class=&quot;highlighted&quot;&gt;text categorization, information retrieval&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;Given that a user is interested in sports news, how likely would the user use “baseball” in a query? (&lt;strong class=&quot;highlighted&quot;&gt;information retrieval&lt;/strong&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Simplest Language Model: Unigram LM
    &lt;ul&gt;
      &lt;li&gt;Generate text by generating each word INDEPENDENTLY&lt;/li&gt;
      &lt;li&gt;thus, p(w1, w2, …wn) = p(w1)p(w2)…p(wn)&lt;/li&gt;
      &lt;li&gt;Parameters: {p(wi)} p(w1)+…+p(wn)=1 (N is vocabularly size)&lt;/li&gt;
      &lt;li&gt;Text = sample drawn according to this &lt;strong class=&quot;highlighted&quot;&gt;word distribution&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43--query-likelihood-retrieval-function&quot;&gt;4.3 : Query Likelihood Retrieval Function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;p(q|d), if the user is thinking of this doc, how likely would she pose this query?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;44--ranking-function-based-on-query-likelihood&quot;&gt;4.4 : Ranking Function based on Query likelihood&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Key Question: what probability should be assigned to an unseen word?&lt;/li&gt;
  &lt;li&gt;Let the probability of an unseen word be proportional to its probability given by a refernce LM&lt;/li&gt;
  &lt;li&gt;One possibility: Reference LM = Collection LM
    &lt;ul&gt;
      &lt;li&gt;p(w|d) = {Pseen(w|d), if w is seen in d} , {α&lt;sub&gt;d&lt;/sub&gt;P(w|C), otherwise}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;45--statistical-language-model---part-2&quot;&gt;4.5 : Statistical Language Model - Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;46-smoothing-methods---part-1&quot;&gt;4.6 SMoothing Methods - Part 1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;47--smoothing-methods---part-2&quot;&gt;4.7 : Smoothing Methods - Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;CS 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Know how Napster, Gnutella, FastTrack, and BitTorrent work.&lt;/li&gt;
  &lt;li&gt;Know and analyze how distributed hash tables work (Chord, Pastry, and Kelips).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Peer-to-peer systems&lt;/li&gt;
  &lt;li&gt;Industrial P2P systems: Napster, Gnutella, FastTrack, BitTorrent&lt;/li&gt;
  &lt;li&gt;Distributed hash tables: Chord, Pastry, Kelips&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is the difference between how Napster clients and Gnutella clients search for files?&lt;/li&gt;
  &lt;li&gt;What is the difference between Gnutella and FastTrack?&lt;/li&gt;
  &lt;li&gt;What is BitTorrent’s tit for tat mechanism?&lt;/li&gt;
  &lt;li&gt;What is consistent hashing?&lt;/li&gt;
  &lt;li&gt;Why are DHTs efficient in searching?&lt;/li&gt;
  &lt;li&gt;How does Chord route queries?&lt;/li&gt;
  &lt;li&gt;How does Pastry route queries?&lt;/li&gt;
  &lt;li&gt;How does Kelips route queries?&lt;/li&gt;
  &lt;li&gt;What is churn in P2P systems?&lt;/li&gt;
  &lt;li&gt;How does Chord maintain correct neighbors in spite of failures and churn?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings-and-resources&quot;&gt;Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://courses.engr.illinois.edu/cs425/fa2014/gnutella_protocol_0.4.pdf&quot;&gt;Gnutella v 0.4 paper (PDF)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf&quot;&gt;Chord paper (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;41-p2p-systems-introduction&quot;&gt;4.1 P2P Systems Introduction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;P2P first distributed systems that seriously focused on scalability with respect to number of nodes&lt;/li&gt;
  &lt;li&gt;Widely-deployed P2P Systems
    &lt;ol&gt;
      &lt;li&gt;Napster&lt;/li&gt;
      &lt;li&gt;Gnutella&lt;/li&gt;
      &lt;li&gt;Fasttrack (Kazaa, Kazaalite, Grokster)&lt;/li&gt;
      &lt;li&gt;BitTorrent&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;P2P Systems with Provable Properties
    &lt;ol&gt;
      &lt;li&gt;Chord&lt;/li&gt;
      &lt;li&gt;Pastry&lt;/li&gt;
      &lt;li&gt;Kelips&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-napster&quot;&gt;4.2 Napster&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Napster Operations:
    &lt;ul&gt;
      &lt;li&gt;Client: Connect to a Napster server
        &lt;ul&gt;
          &lt;li&gt;Upload list of music files that you want to share&lt;/li&gt;
          &lt;li&gt;Server maintains list of &amp;lt;filename, ip_address, portnum&amp;gt; tuples. &lt;strong class=&quot;highlighted&quot;&gt;Server stores no files.&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Search
        &lt;ul&gt;
          &lt;li&gt;Send server keywords to search with&lt;/li&gt;
          &lt;li&gt;(server searchs its list with the keywords)&lt;/li&gt;
          &lt;li&gt;Server returns a list of hosts -&amp;lt;ip_address, portnum&amp;gt; tuples - to client&lt;/li&gt;
          &lt;li&gt;client pings each host in the list to find transfer rates&lt;/li&gt;
          &lt;li&gt;Client fetches file from best host&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;All communication uses TCP (Transmission control Protocol)
        &lt;ul&gt;
          &lt;li&gt;Reliable and ordered networking protocol (TCP)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ternary trees store the directory information (3 children per parent)&lt;/li&gt;
  &lt;li&gt;Joining a P2P System
    &lt;ul&gt;
      &lt;li&gt;Can be used for any p2p system
        &lt;ul&gt;
          &lt;li&gt;Send an http request to well-known url for that p2p service -eg: www.myp2pservice.com&lt;/li&gt;
          &lt;li&gt;Message routed (after lookup in DNS=Domain Name System) to introducer, a well known server that keeps track of some recently joined nodes in p2p system&lt;/li&gt;
          &lt;li&gt;Introducer initializes new peer’s neighbor table&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems
    &lt;ul&gt;
      &lt;li&gt;Centralized server a source of congestion&lt;/li&gt;
      &lt;li&gt;Centralized server single point of failure&lt;/li&gt;
      &lt;li&gt;No security: plaintext messages on passwds&lt;/li&gt;
      &lt;li&gt;napster.com declared to be responsible for users’ copyright violation
        &lt;ul&gt;
          &lt;li&gt;“Indirect infringement”&lt;/li&gt;
          &lt;li&gt;events led to Gnutella development&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-gnutella&quot;&gt;4.3 Gnutella&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gnutella does:
    &lt;ul&gt;
      &lt;li&gt;eliminate the servers&lt;/li&gt;
      &lt;li&gt;Client machines search and &lt;strong class=&quot;highlighted&quot;&gt;retrieve&lt;/strong&gt; amongst themselves (clients act as teh servers)&lt;/li&gt;
      &lt;li&gt;Clients act as servers too, called servents&lt;/li&gt;
      &lt;li&gt;3/2000 released by AOL, immediately withdrawn due to copyright issues, 88K users by 3/2003&lt;/li&gt;
      &lt;li&gt;Original design underwent several modifications&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do I search for my files?
    &lt;ul&gt;
      &lt;li&gt;Gnutella routes different messages with the overlay graph&lt;/li&gt;
      &lt;li&gt;Protocol has 5 main message types
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Query&lt;/strong&gt; (search)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;QueryHit&lt;/strong&gt; (response to query)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Ping&lt;/strong&gt; (to probe network for other peers)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Pong&lt;/strong&gt; (reply to ping, contains address of another peer)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Push&lt;/strong&gt; (used to initiate file transfer)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;We’ll go into the message structure and protocol now
        &lt;ul&gt;
          &lt;li&gt;All fields except IP address are in little-endian format&lt;/li&gt;
          &lt;li&gt;Little endian example: 0x12345678 stored as 0x78 in lowest address byte, then 0x56 in next, and so on.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoiding Excessive Traffic
    &lt;ul&gt;
      &lt;li&gt;To avoid duplicate transmissions, each peer maintains a list of recently received messages&lt;/li&gt;
      &lt;li&gt;Query forwarded to all neighbors except peer from which received&lt;/li&gt;
      &lt;li&gt;Each Query (identified by DescriptorID) forwarded only once&lt;/li&gt;
      &lt;li&gt;QueryHit routed back only to peer from which Query received with same DescriptorID&lt;/li&gt;
      &lt;li&gt;For flooded messages, duplicates with same DescriptorID and Payload descriptor are dropped&lt;/li&gt;
      &lt;li&gt;QueryHit with DescriptorID for which Query not seen is dropped.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP is file transfer protocol. why?
    &lt;ul&gt;
      &lt;li&gt;Because it’s standard, well-debugged, and widely used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why the “range” field in teh GET request?
    &lt;ul&gt;
      &lt;li&gt;To support partial file transfers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What if responder is behind firewall that disallows incoming connections? (drops it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responder establishes a TCP connection at ip_address, port specified.  Sends: GIV &lt;File Index=&quot;&quot;&gt;:&lt;Servent Identifier=&quot;&quot;&gt;/&lt;File Name=&quot;&quot;&gt;\n\n&lt;/File&gt;&lt;/Servent&gt;&lt;/File&gt;&lt;/li&gt;
  &lt;li&gt;Requestor then sends GET to responder (as before) and file is transferred as explained earlier.&lt;/li&gt;
  &lt;li&gt;What if requestor is behind firewall too?
    &lt;ul&gt;
      &lt;li&gt;Gnutella gives up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the responding peer is behind a firewall, which of the following statements ARE TRUE about Gnutella?
    &lt;ul&gt;
      &lt;li&gt;A Push message can be sent to it since it is already connected to its peers.&lt;/li&gt;
      &lt;li&gt;A modified version of Gnutella could use the overlay links themselves to transfer the file (though this may be slow).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When a Gnutella peer receives a Ping message from one of its neighbors, which of the following actions does it perform? (all are correct)
    &lt;ul&gt;
      &lt;li&gt;It forwards it to appropriate neighbors after checking TTL.&lt;/li&gt;
      &lt;li&gt;It creates a Pong message about itself and reverse routes it.&lt;/li&gt;
      &lt;li&gt;If it was the original peer that initiated the Ping, it uses received Pong responses to update its membership lists.&lt;/li&gt;
      &lt;li&gt;It reverse routes any Pong messages it receives.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gnutella Summary
    &lt;ul&gt;
      &lt;li&gt;No servers&lt;/li&gt;
      &lt;li&gt;Peers/servents maintain “neighbors”, this forms an overlay graph&lt;/li&gt;
      &lt;li&gt;Peers store their own files&lt;/li&gt;
      &lt;li&gt;Queries flooded out, ttl restricted&lt;/li&gt;
      &lt;li&gt;QueryHit (replies) reverse path routed&lt;/li&gt;
      &lt;li&gt;Supports file transfer through firewalls&lt;/li&gt;
      &lt;li&gt;Periodic Ping-pong to continuously refresh neighbor lists
        &lt;ul&gt;
          &lt;li&gt;List size specified by user at peer : heterogeneity means some peers may have more neighbors&lt;/li&gt;
          &lt;li&gt;Gnutella found to follow power law distribution:  P(#Links = L) ~ L&lt;sup&gt;-k&lt;/sup&gt;  (k is a constant)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems
    &lt;ul&gt;
      &lt;li&gt;Ping/Pong constituted 50% traffic
        &lt;ul&gt;
          &lt;li&gt;Solution: Multiplex, cache and reduce frequency of pings/pongs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Repeated searches with same keywords
        &lt;ul&gt;
          &lt;li&gt;Solution: Cache Query, QueryHit messages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Modem-connected hosts do not have enough bandwidth for passing Gnutella traffic
        &lt;ul&gt;
          &lt;li&gt;Solution: use a central server to act as proxy for such peers&lt;/li&gt;
          &lt;li&gt;Another solution:
            &lt;ul&gt;
              &lt;li&gt;FastTrack System (soon)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Large number of freeloaders
        &lt;ul&gt;
          &lt;li&gt;70% of users in 2000 were freeloaders&lt;/li&gt;
          &lt;li&gt;Only download files, never upload own files&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flooding causes excessive traffic
        &lt;ul&gt;
          &lt;li&gt;Is there some way of maintaining meta-information about peers that leads to more intelligent routing?&lt;br /&gt;
  –&amp;gt; Structured Peer-to-peer systems, eg Chord System (coming up soon)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;44-fasttrack-and-bittorrent&quot;&gt;4.4 FastTrack and BitTorrent&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FastTrack
    &lt;ul&gt;
      &lt;li&gt;Hybrid of gnutella and napster&lt;/li&gt;
      &lt;li&gt;Takes advantage of “healthier” participants in the system&lt;/li&gt;
      &lt;li&gt;Underlying technology in Kazaa, KazaaLite, Grokster&lt;/li&gt;
      &lt;li&gt;Proprietary protocaol, but some details available&lt;/li&gt;
      &lt;li&gt;Gnutella, but with some peers designated as &lt;strong class=&quot;highlighted&quot;&gt;supernodes&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;A supernode stores a directory listing a subset of nearby (&amp;lt;filename, peer pointer&amp;gt;), similar to Napster servers&lt;/li&gt;
      &lt;li&gt;Supernode membership changes over time &lt;strong class=&quot;highlighted&quot;&gt;(a member cannot declare itself a supernode)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Any peer can become (and stay) a supernode, provided it has earned enough &lt;strong class=&quot;highlighted&quot;&gt;reputation&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Kazaalite: participation level (=reputation) of a user between 0 and 1000, initially 10, then affected by length of periods of connectivity and total number of uploads&lt;/li&gt;
          &lt;li&gt;More sophisticated Reputation schemes invented, especially based on economics (See P2PEcon Workshop)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A peer searches by contacting nearby supernode.&lt;/li&gt;
      &lt;li&gt;Supernodes get advantage of having information readily available in its structure so it’s faster to look up stuff.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BitTorrent
    &lt;ul&gt;
      &lt;li&gt;File split into blocks (32 KB - 256 KB)&lt;/li&gt;
      &lt;li&gt;Download &lt;strong class=&quot;highlighted&quot;&gt;Local Rarest First&lt;/strong&gt; block policy: prefer early download of blocks that are least replicated among neighbors
        &lt;ul&gt;
          &lt;li&gt;Exception: New node allowed to pick one random neighbor: helps in bootstrapping&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Tit for tat&lt;/strong&gt; bandwidth usage: Provide blocks to neighbors that provided it the best download rates
        &lt;ul&gt;
          &lt;li&gt;Incentive for nodes to provide good download rates&lt;/li&gt;
          &lt;li&gt;Seeds do the same too&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Choking&lt;/strong&gt;: Limit number of neighbors to which concurrent uploads &amp;lt;= a number (eg, 5), ie, the “best” neighbors
        &lt;ul&gt;
          &lt;li&gt;Everyone else choked&lt;/li&gt;
          &lt;li&gt;Priodically re-evaluate this set (eg, every 10 s)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Optimistic unchoke&lt;/strong&gt;: periodically (eg, ~30s), unchoke a random neighbor - helps keep unchoked set fresh&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Choking helps limit how many peers are uploading, to prevent overwhelming upload bandwidth.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Why are random choices used in the BitTorrent Choking policy?
        &lt;ul&gt;
          &lt;li&gt;To avoid the system from getting stuck where only a few peers receive service (correct)&lt;/li&gt;
          &lt;li&gt;To ensure that all peers receive uniform download speed (incorrect)&lt;/li&gt;
          &lt;li&gt;To ensure Tit for Tat bandwidth usage (incorrect)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;45-chord&quot;&gt;4.5 Chord&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DHT: Distributed Hash Table
    &lt;ul&gt;
      &lt;li&gt;A hash table allows you to insert, lookup and delete objects with keys.&lt;/li&gt;
      &lt;li&gt;A &lt;strong class=&quot;highlighted&quot;&gt;distributed hash table&lt;/strong&gt; allows you to do the same in a distributed setting (objects=files)&lt;/li&gt;
      &lt;li&gt;Performance concerns:
        &lt;ul&gt;
          &lt;li&gt;Load balancing&lt;/li&gt;
          &lt;li&gt;Fault-tolerance&lt;/li&gt;
          &lt;li&gt;Efficiency of lookups and inserts&lt;/li&gt;
          &lt;li&gt;Locality&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Napster, Gnutella, FastTrack are all DHTs (sort of)&lt;/li&gt;
      &lt;li&gt;So is Chord, a structured peer to peer ssytem that we study next&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chord:
    &lt;ul&gt;
      &lt;li&gt;Developers: I Stoica, D Karger, F Kaashoek, H Balakrishnan, R Morris, Berkeley and MIT&lt;/li&gt;
      &lt;li&gt;Intelligent choice of neighbors to reduce latency and message cost of routing (lookups/inserts)&lt;/li&gt;
      &lt;li&gt;Uses &lt;strong class=&quot;highlighted&quot;&gt;Consistent Hashing&lt;/strong&gt; on node’s (peer’s) address
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;SHA-1&lt;/strong&gt;(ip_address.port) –&amp;gt; 160 bit string&lt;/li&gt;
          &lt;li&gt;Truncated to m bits&lt;/li&gt;
          &lt;li&gt;Called peer id (number between 0 and 2&lt;sup&gt;m&lt;/sup&gt; - 1)&lt;/li&gt;
          &lt;li&gt;Not unique but ide conflicts very unlikely&lt;/li&gt;
          &lt;li&gt;Can then map peers to one of 2&lt;sup&gt;m&lt;/sup&gt; logical points on a circle&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;What are the types of neighbors used in a Chord P2P system (All are correct)?
        &lt;ul&gt;
          &lt;li&gt;Successors&lt;/li&gt;
          &lt;li&gt;Finger tables&lt;/li&gt;
          &lt;li&gt;Predecessors (if needed)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In a Chord P2P system with m=8, a peer with id 33 is considering the following peers for its i=3 finger table entry: 40, 42, and 44. Which one is the best (correct) choice?
        &lt;ul&gt;
          &lt;li&gt;33 + 2^3 = 41, first number that is &amp;gt;= to that is 42&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what about the files?
    &lt;ul&gt;
      &lt;li&gt;Filenames also mapped using same consistent hash function
        &lt;ul&gt;
          &lt;li&gt;SHA-1(filename) –&amp;gt; 160 bit string (key)&lt;/li&gt;
          &lt;li&gt;File is stored at first peer with id greater than or equal to its key (mod 2&lt;sup&gt;m&lt;/sup&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;File cnn.com/index.html that maps to key K42 is stored at first peer with id greater than 42
        &lt;ul&gt;
          &lt;li&gt;Note that we are considering a different file-sahring application here: &lt;strong class=&quot;highlighted&quot;&gt;cooperative web caching&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;The same discussion applies to any other file sharing application, including that of mp3 files.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Consistent Hashing =&amp;gt; with K keys and N peers, each peer stores O(K/N) keys (ie, &amp;lt; c.K/N, for some constant c) (ie, good load balancing among the peers)&lt;/li&gt;
      &lt;li&gt;In a Chord ring with m=7, three successive peers have ids 12, 19, 33 (there are other peers in the system too, but not in between 12 and 33). If the number of files is large and a uniform hash function is used, which of the following is true?
        &lt;ul&gt;
          &lt;li&gt;Peer 33 stores about double the number of files as peer 19.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;46-failures-in-chord&quot;&gt;4.6 Failures in Chord&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Search under peer failures
    &lt;ul&gt;
      &lt;li&gt;Lookup fails (  N16 does not know N45, when N32 fails)
        &lt;ul&gt;
          &lt;li&gt;Solution:  maintain multiple successors, but how many?&lt;/li&gt;
          &lt;li&gt;Choosing 2log(N) successors suffices to maintain lookup correctness with high probability (ie, ring connected)
            &lt;ul&gt;
              &lt;li&gt;Say 50% of nodes fail&lt;/li&gt;
              &lt;li&gt;Pr(at given node, at least one successor alive) = 1 - (1/2)^(2logN) = 1 - 1/N^2&lt;/li&gt;
              &lt;li&gt;Pr(above is ttrue at all alive nodes )= (1 - 1/N^2)^(N/2) = e^(-1/2N) ~ 1&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lookup fails ( N45 fails)
        &lt;ul&gt;
          &lt;li&gt;Solution: replicate file/key at r successors adn predecessors)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Need to deal with dynamic changes
    &lt;ul&gt;
      &lt;li&gt;Peers fail (we’ve discussed this)&lt;/li&gt;
      &lt;li&gt;New peers join&lt;/li&gt;
      &lt;li&gt;Peers leave
        &lt;ul&gt;
          &lt;li&gt;p2p systems have a high rate of &lt;strong class=&quot;highlighted&quot;&gt;churn&lt;/strong&gt; (node join, leave and failure)
            &lt;ul&gt;
              &lt;li&gt;25% per hour in Overnet (eDonkey)&lt;/li&gt;
              &lt;li&gt;100% per hour in gnutella&lt;/li&gt;
              &lt;li&gt;Lower in managed clusters&lt;/li&gt;
              &lt;li&gt;Common feature in all distributed systems, including wide-area (eg PlanetLab), clusters (eg Emulab), clouds (eg AWS) etc&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;So, all the time, need to: –&amp;gt; Need to update successors and fingers, and copy keys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-22.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-23.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New peers joining:
    &lt;ul&gt;
      &lt;li&gt;A new peer affects O(log(N)) other finger entries in teh system, on average&lt;/li&gt;
      &lt;li&gt;Number of messages per peer join = O(logN*logN)&lt;/li&gt;
      &lt;li&gt;Similar set of operations for dealing with peers leaving
        &lt;ul&gt;
          &lt;li&gt;For dealing with failures, also need &lt;strong class=&quot;highlighted&quot;&gt;failure detectors&lt;/strong&gt; (we’ll see these later in the course!)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stabilization Protocol
    &lt;ul&gt;
      &lt;li&gt;Concurrent peer joins, leaves, failures might cause loopiness of pointers, and failure of lookups
        &lt;ul&gt;
          &lt;li&gt;Chord peers periodically run a &lt;strong class=&quot;highlighted&quot;&gt;stabilization&lt;/strong&gt; algorithm that checks and updates pointers and keys&lt;/li&gt;
          &lt;li&gt;Ensures &lt;em class=&quot;highlighted&quot;&gt;non-loopiness&lt;/em&gt; of fingers, eventual success of lookups and O(logN) lookups with high probability&lt;/li&gt;
          &lt;li&gt;Each stabilization round at a peer involves a constant number of messages&lt;/li&gt;
          &lt;li&gt;Strong stability takes O(N^2) stabilization rounds&lt;/li&gt;
          &lt;li&gt;For more see [techReport on Chord webpage]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Churn
    &lt;ul&gt;
      &lt;li&gt;When nodes are consttantly joining, leaving, failing
        &lt;ul&gt;
          &lt;li&gt;Significant effect to consider: traces from the Overnet system show hourly peer turnover rates (churn) could be 25-100% of total number of nodes in system&lt;/li&gt;
          &lt;li&gt;Leads to excessive (unnecessary) key copying (remember that keys are replicated)&lt;/li&gt;
          &lt;li&gt;Stabilization algorithm may need to consume more bandwidth to keep up&lt;/li&gt;
          &lt;li&gt;Main issue is that files are replicated, while it might be sufficient to replicate only meta information about files&lt;/li&gt;
          &lt;li&gt;Alternatives
            &lt;ul&gt;
              &lt;li&gt;Introduce a level of indirection (any p2p system)&lt;/li&gt;
              &lt;li&gt;Replicate metadata more, eg, Kelips (later in this lecture series)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Churn leads to which of the following behaviors in Chord (all are correct)?
        &lt;ul&gt;
          &lt;li&gt;Successors being continuously updated&lt;/li&gt;
          &lt;li&gt;Finger tables being continuously updated&lt;/li&gt;
          &lt;li&gt;Files being continuously copied to the correct storing servers&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Virtual nodes
    &lt;ul&gt;
      &lt;li&gt;Hash can get non-uniform –&amp;gt; Bad load balancing
        &lt;ul&gt;
          &lt;li&gt;Treat each node as multiple virtual nodes behaving independently&lt;/li&gt;
          &lt;li&gt;Each joins the system&lt;/li&gt;
          &lt;li&gt;Reduces variance of load imabalance&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;47-pastry&quot;&gt;4.7 Pastry&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Pastry
    &lt;ul&gt;
      &lt;li&gt;Designed by Anthony Rostron (MS Reserach) and Peter Druschel (Rice University)&lt;/li&gt;
      &lt;li&gt;Assigns ids to nodes, just like Chord (using a virtual ring)&lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Leaf Set&lt;/strong&gt; Each node knows its successor(s) and predecessor(S)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Neighbors
    &lt;ul&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Routing tables&lt;/em&gt; based &lt;strong class=&quot;highlighted&quot;&gt;&lt;u&gt;prefix matching&lt;/u&gt;&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Think of &lt;em&gt;hypercube routing&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Routing is thus based on prefix matching, and is thus log(N)
        &lt;ul&gt;
          &lt;li&gt;And hops are short (in the underlying network)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Routing
    &lt;ul&gt;
      &lt;li&gt;Consider a peer with id 01110100101.  It maintains a neighbor peer with an id matching each of the following prefixes (* = starting bit differing from this peer’s corresponding bit):
        &lt;ul&gt;
          &lt;li&gt;*&lt;/li&gt;
          &lt;li&gt;0*&lt;/li&gt;
          &lt;li&gt;01*&lt;/li&gt;
          &lt;li&gt;011*&lt;/li&gt;
          &lt;li&gt;… 0111010010*&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;When it needs to route to a peer, say 011101&lt;strong class=&quot;highlighted&quot;&gt;&lt;u&gt;1&lt;/u&gt;&lt;/strong&gt;1001, it starts by forwarding to a neighbor with the largest matching prefix, ie, 011101*&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Locality
    &lt;ul&gt;
      &lt;li&gt;For each prefix, say 011*, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip-time is selected&lt;/li&gt;
      &lt;li&gt;Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes&lt;/li&gt;
      &lt;li&gt;Thus, in the prefix routing, early hops are short and later hops are longer&lt;/li&gt;
      &lt;li&gt;Yet overall “stretch”, compared to direc Internet path, stays short.&lt;/li&gt;
      &lt;li&gt;A Pastry peer has two neighbors for prefixes of 101* and 101110* respectively. Which of these is more likely to respond to a message faster?
        &lt;ul&gt;
          &lt;li&gt;The 101* neighbor&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary of Chord and Pastry
    &lt;ul&gt;
      &lt;li&gt;Chord and Pastry protocols
        &lt;ul&gt;
          &lt;li&gt;More structured than Gnutella&lt;/li&gt;
          &lt;li&gt;Black box lookup algorithms&lt;/li&gt;
          &lt;li&gt;Churn handling can get complex&lt;/li&gt;
          &lt;li&gt;O(logN) memory and lookup cost
            &lt;ul&gt;
              &lt;li&gt;O(logN) lookup hops may be high&lt;/li&gt;
              &lt;li&gt;Can we reduce the number of hops?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;48-kelips&quot;&gt;4.8 Kelips&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-24.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-25.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-26.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-27.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chord vs Pastry vs Kelips
    &lt;ul&gt;
      &lt;li&gt;Range of tradeoffs available
        &lt;ul&gt;
          &lt;li&gt;Memory vs lookup cost vs background bandwidth ( to keep neighbors fresh)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;
</description>
				<pubDate>Wed, 19 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/19/MCS-Notes-Week-4</link>
				<guid isPermaLink="true">/2018/09/19/MCS-Notes-Week-4</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 3 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain the Cranfield evaluation methodology and how it works for evaluating a text retrieval system.&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a set of retrieved documents and how to compute precision, recall, and F1.&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a ranked list of documents.&lt;/li&gt;
  &lt;li&gt;Explain how to compute and plot a precision-recall curve.&lt;/li&gt;
  &lt;li&gt;Explain how to compute average precision and mean average precision (MAP).&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a ranked list with multi-level relevance judgments.&lt;/li&gt;
  &lt;li&gt;Explain how to compute normalized discounted cumulative gain.&lt;/li&gt;
  &lt;li&gt;Explain why it is important to perform statistical significance tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why is evaluation so critical for research and application development in text retrieval?&lt;/li&gt;
  &lt;li&gt;How does the Cranfield evaluation methodology work?&lt;/li&gt;
  &lt;li&gt;How do we evaluate a set of retrieved documents?&lt;/li&gt;
  &lt;li&gt;How do you compute precision, recall, and F1?&lt;/li&gt;
  &lt;li&gt;How do we evaluate a ranked list of search results?&lt;/li&gt;
  &lt;li&gt;How do you compute average precision? How do you compute mean average precision (MAP) and geometric mean average precision (gMAP)?&lt;/li&gt;
  &lt;li&gt;What is mean reciprocal rank?&lt;/li&gt;
  &lt;li&gt;Why is MAP more appropriate than precision at k documents when comparing two retrieval methods?&lt;/li&gt;
  &lt;li&gt;Why is precision at k documents more meaningful than average precision from a user’s perspective?&lt;/li&gt;
  &lt;li&gt;How can we evaluate a ranked list of search results using multi-level relevance judgments?&lt;/li&gt;
  &lt;li&gt;How do you compute normalized discounted cumulative gain (nDCG)?&lt;/li&gt;
  &lt;li&gt;Why is normalization necessary in nDCG? Does MAP need a similar normalization? Why is it important to perform statistical significance tests when we compare the retrieval accuracies of two search engine systems?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mark Sanderson. Test collection based evaluation of information retrieval systems. Foundations and Trends in Information Retrieval 4, 4 (2010), 247-375.&lt;/li&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapter 9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cranfield evaluation methodology&lt;/li&gt;
  &lt;li&gt;Precision and recall&lt;/li&gt;
  &lt;li&gt;Average precision, mean average precision (MAP), and geometric mean average precision (gMAP)&lt;/li&gt;
  &lt;li&gt;Reciprocal rank and mean reciprocal rank&lt;/li&gt;
  &lt;li&gt;F-measure&lt;/li&gt;
  &lt;li&gt;Normalized discounted cumulative Gain (nDCG)&lt;/li&gt;
  &lt;li&gt;Statistical significance test&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;31-evaluation-of-tr-systems&quot;&gt;3.1 Evaluation of TR Systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What to measure?
    &lt;ul&gt;
      &lt;li&gt;Effectiveness/Accuracy (*)&lt;/li&gt;
      &lt;li&gt;Efficiency&lt;/li&gt;
      &lt;li&gt;Usability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Cranfield Evaluation Methodology
    &lt;ul&gt;
      &lt;li&gt;Build reusable test collections &amp;amp; define measures&lt;/li&gt;
      &lt;li&gt;Collection can be reused many times to compare different systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-evaluation-of-tr-systems---basic-measures&quot;&gt;3.2 Evaluation of TR Systems - Basic Measures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-evaluating-ranked-lists---part-1&quot;&gt;3.3 Evaluating Ranked Lists - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-evaluating-ranked-lists---part-2&quot;&gt;3.4 Evaluating Ranked Lists - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;35-multi-level-judgements&quot;&gt;3.5 Multi-Level Judgements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;so far we’ve been using a binary decision system, relevant or not relevant.  How about a non-binary, gradient based system?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;need normalized DCG so we can compare across different topics.&lt;/li&gt;
  &lt;li&gt;Normalized Discounted Cumulative Gain (nDCG) main ideas:
    &lt;ul&gt;
      &lt;li&gt;Measure the total utility of the top k documents to a user&lt;/li&gt;
      &lt;li&gt;Utility of a lowly ranked document is discounted&lt;/li&gt;
      &lt;li&gt;normalized to ensure comparability across queries (note above about topics)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;36-practical-issues&quot;&gt;3.6 Practical Issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Need ways to measure significance and utility of evaluation techniques
    &lt;ul&gt;
      &lt;li&gt;could use statistical tests, beyond just averaging&lt;/li&gt;
      &lt;li&gt;need to account for variance&lt;/li&gt;
      &lt;li&gt;high variance = low reliability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use many queries before jumping into conclusions&lt;/li&gt;
  &lt;li&gt;Pooling: avoid judging all documents
    &lt;ul&gt;
      &lt;li&gt;if we can’t afford judging all the documents in teh collection, which subset should we judge?&lt;/li&gt;
      &lt;li&gt;Pooling strategy
        &lt;ul&gt;
          &lt;li&gt;choose a diverse set of rankign methods (TR systems)&lt;/li&gt;
          &lt;li&gt;Have each to return top-K documents&lt;/li&gt;
          &lt;li&gt;Combine all the top-K sets to form a pool for human assessors to judge&lt;/li&gt;
          &lt;li&gt;Other (unjudged) documents are usually assumed to be non-relevant (though they don’t have to)&lt;/li&gt;
          &lt;li&gt;okay for comparing system that contributed to the pool, but problematic for evaluating new systems.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;cs 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Analyze various gossip/epidemic protocols.&lt;/li&gt;
  &lt;li&gt;Design and analyze various distributed membership protocols.&lt;/li&gt;
  &lt;li&gt;Know what grid computing is.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Failure detectors&lt;/li&gt;
  &lt;li&gt;Membership protocols&lt;/li&gt;
  &lt;li&gt;Gossip/epidemic protocols&lt;/li&gt;
  &lt;li&gt;Grid computing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why are gossip and epidemic protocols fast and reliable?&lt;/li&gt;
  &lt;li&gt;What is the most efficient way for cloud computing systems to detect failures of servers?&lt;/li&gt;
  &lt;li&gt;How is grid computing related to cloud computing?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings&quot;&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;Gossip-style FD&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Gossip-Style failure detection will have these properties:
        &lt;ol&gt;
          &lt;li&gt;the probability that a member is falsely reported as having failed is inde-&lt;br /&gt;
  pendent of the number of processes.&lt;/li&gt;
          &lt;li&gt;the algorithm is resilient against both message loss (or rather, message&lt;br /&gt;
  delivery timing failures) and process failures, in that a small percentage of&lt;br /&gt;
  lost (or late) messages or small percentage of failed members does not lead&lt;br /&gt;
  to false detections.&lt;/li&gt;
          &lt;li&gt;if local clock drift is negligible, the algorithm detects all failures or un-&lt;br /&gt;
  reachabilities accurately with known probability of mistake.&lt;/li&gt;
          &lt;li&gt;the algorithm scales in detection time, in that the detection time increases&lt;br /&gt;
  O(n log n) with the number of processes.&lt;/li&gt;
          &lt;li&gt;the algorithm scales in network load, in that the required bandwidth goes&lt;br /&gt;
  up at most linearly with the number of processes. For large networks, the&lt;br /&gt;
  bandwidth used in the subnets is approximately constant.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Our protocol gossips to figure out whom else is still gossiping.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ieeexplore.ieee.org/document/1028914/?reload=true&amp;amp;arnumber=1028914&quot;&gt;SWIM&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Membership protocols have been difficult to scale in groups with beyond a few dozen processes [11, &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;16&lt;/a&gt;], thus affecting the performance of applications using them. As reported in [&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;16&lt;/a&gt;], the main symptoms of bad performance at these group sizes is an increase in either the rate of false failure detections of processes, or the time to detect a failure.[12]&lt;/li&gt;
      &lt;li&gt;Our system, called SWIM, provides a membership substrate that:
        &lt;ol&gt;
          &lt;li&gt;imposes a constant message load per group member;&lt;/li&gt;
          &lt;li&gt;detects a process failure in an (expected) constant time&lt;br /&gt;
  at some non-faulty process in the group;&lt;/li&gt;
          &lt;li&gt;provides a deterministic bound (as a function of group&lt;br /&gt;
  size) on the local time that a non-faulty process takes to de-&lt;br /&gt;
  tect failure of another process;&lt;/li&gt;
          &lt;li&gt;propagates membership updates, including informa-&lt;br /&gt;
  tion about failures, in infection-style (also gossip-style or&lt;br /&gt;
  epidemic-style [2, 8]); the dissemination latency in the&lt;br /&gt;
  group grows slowly (logarithmically) with the number of&lt;br /&gt;
  members;&lt;/li&gt;
          &lt;li&gt;provides a mechanism to reduce the rate of false pos-&lt;br /&gt;
  itives by “suspecting” a process before “declaring” it as&lt;br /&gt;
  failed within the group.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Properties of previous distributed failure detector protocols:
        &lt;ol&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Strong Completeness&lt;/em&gt;: crash-failure of any group mem-&lt;br /&gt;
  ber is detected by all non-faulty members [6]);&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Speed of failure detection&lt;/em&gt;: the time interval between a&lt;br /&gt;
  member failure and its detection by some non-faulty group&lt;br /&gt;
  member;&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Accuracy&lt;/em&gt;: the rate of false positives of failure detection;&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Network Message Load&lt;/em&gt;, in bytes per second generated&lt;br /&gt;
  by the protocol.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;SWIM has two basic components:
        &lt;ol&gt;
          &lt;li&gt;a &lt;em class=&quot;highlighted&quot;&gt;Failure Detector Component&lt;/em&gt;, that detects failures of&lt;br /&gt;
  members, and&lt;/li&gt;
          &lt;li&gt;a &lt;em class=&quot;highlighted&quot;&gt;Dissemination Component&lt;/em&gt;, that disseminates informa-&lt;br /&gt;
  tion about members that have recently either joined or left&lt;br /&gt;
  the group, or failed.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;and these advanced components:
        &lt;ol&gt;
          &lt;li&gt;Infection-Style Dissemination Component&lt;/li&gt;
          &lt;li&gt;Suspicion Mechanism: Reducing the Frequency of False Positives&lt;/li&gt;
          &lt;li&gt;Round-Robin Probe Target Selection: Providing Time-Bounded Strong Completeness&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;gossip&quot;&gt;&lt;strong class=&quot;highlighted&quot;&gt;Gossip&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;11--multicast-problem&quot;&gt;1.1 : Multicast Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Centralized Multicast, simplest
    &lt;ul&gt;
      &lt;li&gt;UDP/TCP packets&lt;/li&gt;
      &lt;li&gt;A single, center protocol handler&lt;/li&gt;
      &lt;li&gt;Faulty due to single center protocol handler, if it fails halfway through process then only half of receivers will be updated.&lt;/li&gt;
      &lt;li&gt;High overhead which leads to large latency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tree-Based
    &lt;ul&gt;
      &lt;li&gt;eg, IPmulticast, SRM, RMTP, TRAM, TMTP&lt;/li&gt;
      &lt;li&gt;Pros:
        &lt;ul&gt;
          &lt;li&gt;if tree is balanced, then depth is log(n).  As a result, the complexity of a message reaching a node is O(logn).&lt;/li&gt;
          &lt;li&gt;If children constant at each node, then message propagation is constant&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Con:
        &lt;ul&gt;
          &lt;li&gt;setup and maintain tree&lt;/li&gt;
          &lt;li&gt;if a high node fails, many descendents will be disconnected&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which of the following is FALSE about a NAK in a tree-based multicast protocol?
    &lt;ul&gt;
      &lt;li&gt;It is used to send negative acknowledgments to a sender or designated receiver.&lt;/li&gt;
      &lt;li&gt;It may result in some of the multicast messages being retransmitted.&lt;/li&gt;
      &lt;li&gt;NAKs may cause message implosion.&lt;/li&gt;
      &lt;li&gt;(FALSE) NAKs cannot be used if IP multicast in the underlying network is used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12--the-gossip-protocol&quot;&gt;1.2 : The Gossip Protocol&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The gossip-based protocol described so far (select all correct answers):
    &lt;ul&gt;
      &lt;li&gt;(TRUE) Is executed periodically at each node&lt;/li&gt;
      &lt;li&gt;Receives only one copy of each multicast message at each node&lt;/li&gt;
      &lt;li&gt;Can turn an infected node into an uninfected node&lt;/li&gt;
      &lt;li&gt;(TRUE) Can turn an uninfected node into an infected node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13--gossip-analysis-important&quot;&gt;1.3 : Gossip Analysis &lt;strong class=&quot;highlighted&quot;&gt;(Important)&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Properties of Gossip push protocol:
    &lt;ul&gt;
      &lt;li&gt;lightweight, even in large groups&lt;/li&gt;
      &lt;li&gt;Spreads a multicast quickly&lt;/li&gt;
      &lt;li&gt;highly fault-tolerant&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We’re presented the epidemiology differential equations, which we’re asked to solve on our own.  Below is a video I made to walk through the solution:&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;position:relative;height:0;padding-bottom:56.25%&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/fLAqNFdnaJw?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Pull is faster than push.&lt;/li&gt;
  &lt;li&gt;Push-Pull paradigm could involve push to quickly start up the cascade, and then use pull to facilitate propagation of cascade.&lt;/li&gt;
  &lt;li&gt;second half of pull gossip finishes in time O(loglogn)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14--gossip-implementations&quot;&gt;1.4 : Gossip Implementations&lt;/h3&gt;

&lt;h3 id=&quot;membership&quot;&gt;&lt;strong class=&quot;highlighted&quot;&gt;Membership&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;21--what-is-group-membership-list&quot;&gt;2.1 : What is Group Membership List?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Failures are the norm in datacenters, need to design failure detectors&lt;/li&gt;
  &lt;li&gt;Crash-stop/Fail-stop process failures (processes do not recover!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22--failure-detectors&quot;&gt;2.2 : Failure Detectors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;detectors cannot be both 100% complete and 100% accurate.&lt;/li&gt;
  &lt;li&gt;if you can do both, then you’ve solved the “consensus problem”: group deciding/agreeing on the value of something in a lossy network (impossible, more later)&lt;/li&gt;
  &lt;li&gt;in practice, always 100% complete, 90-99% accurate.&lt;/li&gt;
  &lt;li&gt;Centralized Heartbeating&lt;/li&gt;
  &lt;li&gt;ring heartbeating&lt;/li&gt;
  &lt;li&gt;all-to-all heartbeating (best)
    &lt;ul&gt;
      &lt;li&gt;if one node is slow, it may mark many nodes as faulty, thus causing large false positives…how to fix?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23--gossip-style-membership&quot;&gt;2.3 : Gossip-Style Membership&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In gossip-style failure detection, why should an entry not be deleted right after it’s detected as failed?
    &lt;ul&gt;
      &lt;li&gt;Because other processes may not have deleted that entry and it may be added back (the process may stay in the records despite being dead)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24--which-is-the-best-failure-detector&quot;&gt;2.4 : Which is the best failure detector?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
Next slide should say “All-to-all gossip heartbeating”&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25--another-probabilistic-failure-detector&quot;&gt;2.5 : Another probabilistic Failure Detector&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SWIM allows a process p&lt;sub&gt;j&lt;/sub&gt; extra chances to respond to p&lt;sub&gt;i&lt;/sub&gt; through time and space.&lt;/li&gt;
  &lt;li&gt;It allows it more time to respond, and permits direct and indirect (through other random processes) paths to relay a response.&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;26--dissemination-and-suspicion&quot;&gt;2.6 : Dissemination and suspicion&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In a system with N processes using the SWIM failure detector, given enough network bandwidth, how long does it take for a failure, after it is detected at one process, to disseminate through the group?
    &lt;ul&gt;
      &lt;li&gt;O(logn) (why?)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;31--grid-applications&quot;&gt;3.1 : Grid Applications&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Question: how do we schedule and distribute a list of jobs across multiple different machines?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32--scheduling-problem&quot;&gt;3.2 : Scheduling Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Which of the following are typically NOT the responsibility of an inter-site protocol like Globus, but instead the responsibility of an intra-site protocol like HTCondor (select multiple answers)?
    &lt;ul&gt;
      &lt;li&gt;Deciding which tasks run on which machines (Correct)&lt;/li&gt;
      &lt;li&gt;Monitoring of workstations running tasks (Correct)&lt;/li&gt;
      &lt;li&gt;Wide-area file transfer&lt;/li&gt;
      &lt;li&gt;Allocating jobs to sites&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-23.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-24.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-25.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-26.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-27.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-28.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-29.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain key practices in path-driven methodologies&lt;/li&gt;
  &lt;li&gt;Explain key practices in agile methodologies&lt;/li&gt;
  &lt;li&gt;Choose appropriate processes in the given application context&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;21--process-overview&quot;&gt;2.1 : Process Overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Activity groups in IEEE 1074
    &lt;ul&gt;
      &lt;li&gt;Project Management
        &lt;ul&gt;
          &lt;li&gt;Project initiation&lt;/li&gt;
          &lt;li&gt;Project Planning&lt;/li&gt;
          &lt;li&gt;Project Monitoring and control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Pre-development
        &lt;ul&gt;
          &lt;li&gt;Concept exploration&lt;/li&gt;
          &lt;li&gt;system allocation&lt;/li&gt;
          &lt;li&gt;software importation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Development
        &lt;ul&gt;
          &lt;li&gt;Software requirements
            &lt;ul&gt;
              &lt;li&gt;Define and develop software requirements&lt;/li&gt;
              &lt;li&gt;Define interface requirements&lt;/li&gt;
              &lt;li&gt;Prioritize and integrate software requirements&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Design&lt;/li&gt;
          &lt;li&gt;Implementation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Post-Development
        &lt;ul&gt;
          &lt;li&gt;Installation&lt;/li&gt;
          &lt;li&gt;Operation and support&lt;/li&gt;
          &lt;li&gt;Maintenance&lt;/li&gt;
          &lt;li&gt;Retirement&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Support
        &lt;ul&gt;
          &lt;li&gt;Evaluation&lt;/li&gt;
          &lt;li&gt;Software configuration management&lt;/li&gt;
          &lt;li&gt;Documentation development&lt;/li&gt;
          &lt;li&gt;Training&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22--plan-driven-process&quot;&gt;2.2 : Plan Driven Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Waterfall Process
    &lt;ul&gt;
      &lt;li&gt;Requirements&lt;/li&gt;
      &lt;li&gt;Design&lt;/li&gt;
      &lt;li&gt;Implementation&lt;/li&gt;
      &lt;li&gt;Integration&lt;/li&gt;
      &lt;li&gt;Testing&lt;/li&gt;
      &lt;li&gt;Maintenance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23--agile-process&quot;&gt;2.3 : Agile Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;while all of these are important, we prefer:
    &lt;ul&gt;
      &lt;li&gt;Individuals &amp;amp; interactions &amp;gt; processes and tools&lt;/li&gt;
      &lt;li&gt;Working Software &amp;gt; comprehensive documentation (use better coding to convey meaning, easier/faster to maintain than code with tons of documentation)&lt;/li&gt;
      &lt;li&gt;Customer collaboration &amp;gt; Contract negotiation (let engineers collaborate with customers)&lt;/li&gt;
      &lt;li&gt;Responding to change &amp;gt; following a plan (allow audibles)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XP:
    &lt;ul&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Planning game&lt;/em&gt; for requirements&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Test-driven development&lt;/em&gt; for design and testing&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Refactoring&lt;/em&gt;  for design&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Pair programming&lt;/em&gt; for development&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Continuous integration&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scrum is needed when customer expectations are evolving or uncertain.&lt;/li&gt;
  &lt;li&gt;Scrum should not be chosen if there is high inter-dependencies that make it difficult to split product into shippable increments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-process-choosing&quot;&gt;2.4 Process Choosing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Five critical factors to help choose a strategy:
    &lt;ul&gt;
      &lt;li&gt;Size (number of people on team)&lt;/li&gt;
      &lt;li&gt;Criticality (what are the costs upon failures?)&lt;/li&gt;
      &lt;li&gt;Dynamism (how often requirements of tech change)&lt;/li&gt;
      &lt;li&gt;Personnel (skill of team members)&lt;/li&gt;
      &lt;li&gt;Culture (team members’ preferences and habits)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;25-project-planning&quot;&gt;2.5 Project Planning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Story Points are relative measures of how much time/effort tasks will take to complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;26-scheduling&quot;&gt;2.6 Scheduling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;27-risk-management&quot;&gt;2.7 Risk Management&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t be afraid of bringing up issues/risks, refraining from doing so can do harm to all stakeholders in the project&lt;/li&gt;
  &lt;li&gt;Be proactive!&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 13 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/13/MCS-Notes-Week-3</link>
				<guid isPermaLink="true">/2018/09/13/MCS-Notes-Week-3</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 4</title>
				<description>&lt;h1 id=&quot;under-construction&quot;&gt;under construction&lt;/h1&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-Empty&quot;&gt;
           Empty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-Empty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Empty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-NonEmpty&quot;&gt;
           NonEmpty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-NonEmpty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of NonEmpty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
				<pubDate>Tue, 11 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/11/Scala-Spec-Pt-1-Wk-4</link>
				<guid isPermaLink="true">/2018/09/11/Scala-Spec-Pt-1-Wk-4</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 3</title>
				<description>&lt;p&gt;Last week’s implementation of a set was more functional in style.  This week we do the same thing but more object-oriented in style.  Additionally, we work with a modern application of Scala by interacting with Tweet data from Twitter.  There’s many different classes in this week’s project, but there’s two classes in which most of the implemenation is contained within.  They are listed below:&lt;/p&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-Empty&quot;&gt;
           Empty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-Empty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchElementException&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The following methods are already implemented
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Empty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-NonEmpty&quot;&gt;
           NonEmpty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-NonEmpty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//broken implementation....
//  def union(that: TweetSet): TweetSet =
//    if (!that.contains(elem)) (this.left union (that.incl(elem) union this.right))
//    else this.left union (that union this.right)
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//prevents duplicates like sets should
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The following methods are already implemented
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of NonEmpty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Of particular interest is the union implementation in the NonEmpty set.  The order in which you apply the operations can either result in a successful program or an unsuccessful (does not terminate) program.  Briefly, the issue arrises from the fact that the highest level union call only terminates when the “left” and “right” portions become empty.  This will only happen when the “left” or “right” portions appear on the left of a union call.  Otherwise, they never become empty and the recursion never terminates.  A student, Akhmed U, had a very thorough explanation on the Coursera &lt;a href=&quot;https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/SkerhCXDEeaRtQpho9OEXw/replies/Gl3HSpQbEeaxvRLoQ7NHzw&quot;&gt;forums&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Sun, 09 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/09/Scala-Spec-Pt-1-Wk-3</link>
				<guid isPermaLink="true">/2018/09/09/Scala-Spec-Pt-1-Wk-3</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 2</title>
				<description>&lt;p&gt;For this week’s exercises we’re asked to implement a ‘set’ data structure for integers.  In addition, we’re asked to practice writing unit tests, which is super easy and straightforward in Scala.  Below is my set implementation as well as the unit tests I developed for it:&lt;/p&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-setimplementation&quot;&gt;
           Set Implementation 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-setimplementation&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;funsets&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
  * 2. Purely Functional Sets.
  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * We represent a set by its characteristic function, i.e.
    * its `contains` predicate.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Indicates whether a set contains a given element.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the set of the one given element.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the union of the two given sets,
    * the sets of all elements that are in either `s` or `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the intersection of the two given sets,
    * the set of all elements that are both in `s` and `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the difference of the two given sets,
    * the set of all elements of `s` that are not in `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the subset of `s` for which `p` holds.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The bounds for `forall` and `exists` are +/- 1000.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns whether all bounded integers within `s` satisfy `p`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns whether there exists a bounded integer within `s`
    * that satisfies `p`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns a set transformed by applying `f` to each element of `s`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Displays the contents of a set
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Prints the contents of a set on the console.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Set Implementation&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-settests&quot;&gt;
           Set Tests 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-settests&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;funsets&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalatest.FunSuite&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalatest.junit.JUnitRunner&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
  * This class is a test suite for the methods in object FunSets. To run
  * the test suite, you can either:
  *  - run the &quot;test&quot; command in the SBT console
  *  - right-click the file in eclipse and chose &quot;Run As&quot; - &quot;JUnit Test&quot;
  */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSetSuite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSuite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Link to the scaladoc - very clear and detailed tutorial of FunSuite
    *
    * http://doc.scalatest.org/1.9.1/index.html#org.scalatest.FunSuite
    *
    * Operators
    *  - test
    *  - ignore
    *  - pending
    */&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
    * Tests are written using the &quot;test&quot; operator and the &quot;assert&quot; method.
    */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// test(&quot;string take&quot;) {
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   val message = &quot;hello, world&quot;
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   assert(message.take(5) == &quot;hello&quot;)
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// }
&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
    * For ScalaTest tests, there exists a special equality operator &quot;===&quot; that
    * can be used inside &quot;assert&quot;. If the assertion fails, the two values will
    * be printed in the error message. Otherwise, when using &quot;==&quot;, the test
    * error message will only say &quot;assertion failed&quot;, without showing the values.
    *
    * Try it out! Change the values so that the assertion fails, and look at the
    * error message.
    */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// test(&quot;adding ints&quot;) {
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   assert(1 + 2 === 3)
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// }
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FunSets._&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contains is implemented&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * When writing tests, one would often like to re-use certain values for multiple
    * tests. For instance, we would like to create an Int-set and have multiple test
    * about it.
    *
    * Instead of copy-pasting the code for creating the set into every test, we can
    * store it in the test class using a val:
    *
    *   val s1 = singletonSet(1)
    *
    * However, what happens if the method &quot;singletonSet&quot; has a bug and crashes? Then
    * the test methods are not even executed, because creating an instance of the
    * test class fails!
    *
    * Therefore, we put the shared values into a separate trait (traits are like
    * abstract classes), and create an instance inside each test method.
    *
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * This test is currently disabled (by using &quot;ignore&quot;) because the method
    * &quot;singletonSet&quot; is not yet implemented and the test would fail.
    *
    * Once you finish your implementation of &quot;singletonSet&quot;, exchange the
    * function &quot;ignore&quot; by &quot;test&quot;.
    */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singletonSet(1) contains 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
      * We create a new instance of the &quot;TestSets&quot; trait, this gives us access
      * to the values &quot;s1&quot; to &quot;s3&quot;.
      */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/**
        * The string argument of &quot;assert&quot; is a message that is printed in case
        * the test fails. This helps identifying which assertion failed.
        */&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;union contains all elements of each set&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;intersect contains elements common between sets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;difference contains elements in s not in t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter contains elements in s that satisfy p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forall determines whether all elements in s satisfy p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Forall 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exists determines whether an element in s satisfies p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exists 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exists 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map transforms every element in s with some function f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Set Tests&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
				<pubDate>Thu, 06 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/06/Scala-Spec-Pt-1-Wk-2</link>
				<guid isPermaLink="true">/2018/09/06/Scala-Spec-Pt-1-Wk-2</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 1</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
The first exercise was pretty simple.   Here is my solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pascal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
The second exercise was a little more challenging, but I was able to get it eventually, here is my solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
This was very challenging, so much so I was not able to come up with a functional solution.  After some research I was able to come up with an imperative solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
				<pubDate>Wed, 05 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/05/Scala-Spec-Pt-1-Wk-1</link>
				<guid isPermaLink="true">/2018/09/05/Scala-Spec-Pt-1-Wk-1</guid>
			</item>
		
	</channel>
</rss>
