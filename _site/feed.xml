<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Progress Blog</title>
		<description>This is a blog where I document my projects and progress as a computer scientist/programmer/software engineer.</description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>MCS 1st Semester Week 5 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain the similarity and differences in the three different kinds of feedback, i.e., relevance feedback, pseudo-relevance feedback, and implicit feedback.&lt;/li&gt;
  &lt;li&gt;Explain how the Rocchio feedback algorithm works.&lt;/li&gt;
  &lt;li&gt;Explain how the Kullback-Leibler (KL) divergence retrieval function generalizes the query likelihood retrieval function.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of using a mixture model for feedback.&lt;/li&gt;
  &lt;li&gt;Explain some of the main general challenges in creating a web search engine.&lt;/li&gt;
  &lt;li&gt;Explain what a web crawler is and what factors have to be considered when designing a web crawler.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of Google File System (GFS).&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of MapReduce and how we can use it to build an inverted index in parallel.&lt;/li&gt;
  &lt;li&gt;Explain how links on the web can be leveraged to improve search results.&lt;/li&gt;
  &lt;li&gt;Explain how PageRank algorithm works.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is relevance feedback? What is pseudo-relevance feedback? What is implicit feedback?&lt;/li&gt;
  &lt;li&gt;How does Rocchio work? Why do we need to ensure that the original query terms have sufficiently large weights in feedback?&lt;/li&gt;
  &lt;li&gt;What is the KL-divergence retrieval function? How is it related to the query likelihood retrieval function?&lt;/li&gt;
  &lt;li&gt;What is the basic idea of the two-component mixture model for feedback?&lt;/li&gt;
  &lt;li&gt;What are some of the general challenges in building a web search engine?&lt;/li&gt;
  &lt;li&gt;What is a crawler? How can we implement a simple crawler?&lt;/li&gt;
  &lt;li&gt;What is focused crawling? What is incremental crawling?&lt;/li&gt;
  &lt;li&gt;What kind of pages should have a higher priority for recrawling in incremental crawling?&lt;/li&gt;
  &lt;li&gt;What can we do if the inverted index doesn’t fit in any single machine?&lt;/li&gt;
  &lt;li&gt;What’s the basic idea of the Google File System (GFS)?&lt;/li&gt;
  &lt;li&gt;How does MapReduce work? What are the two key functions that a programmer needs to implement when programming with a MapReduce framework?&lt;/li&gt;
  &lt;li&gt;How can we use MapReduce to build an inverted index in parallel?&lt;/li&gt;
  &lt;li&gt;What is anchor text? Why is it useful for improving search accuracy?&lt;/li&gt;
  &lt;li&gt;What is a hub page? What is an authority page?&lt;/li&gt;
  &lt;li&gt;What kind of web pages tend to receive high scores from PageRank?&lt;/li&gt;
  &lt;li&gt;How can we interpret PageRank from the perspective of a random surfer “walking” on the Web?&lt;/li&gt;
  &lt;li&gt;How exactly do you compute PageRank scores?&lt;/li&gt;
  &lt;li&gt;How does the HITS algorithm work?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapters 7 &amp;amp; 10&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Relevance feedback&lt;/li&gt;
  &lt;li&gt;Pseudo-relevance feedback&lt;/li&gt;
  &lt;li&gt;Implicit feedback&lt;/li&gt;
  &lt;li&gt;Rocchio feedback&lt;/li&gt;
  &lt;li&gt;Kullback-Leiber divergence (KL-divergence) retrieval function&lt;/li&gt;
  &lt;li&gt;Mixture language model&lt;/li&gt;
  &lt;li&gt;Scalability and efficiency&lt;/li&gt;
  &lt;li&gt;Spams&lt;/li&gt;
  &lt;li&gt;Crawler, focused crawling, and incremental crawling&lt;/li&gt;
  &lt;li&gt;Google File System (GFS)&lt;/li&gt;
  &lt;li&gt;MapReduce&lt;/li&gt;
  &lt;li&gt;Link analysis and anchor text&lt;/li&gt;
  &lt;li&gt;PageRank&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;
&lt;h3 id=&quot;51--feedback-in-text-retrieval&quot;&gt;5.1 : Feedback in Text Retrieval&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;52--feedback-in-vector-space-model---rocchio&quot;&gt;5.2 : Feedback in Vector Space Model - Rocchio&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback in vector space model
    &lt;ul&gt;
      &lt;li&gt;how can a TR system learn from examples to improve retrieval accuracy?
        &lt;ul&gt;
          &lt;li&gt;positive examples: docs known to be relevant&lt;/li&gt;
          &lt;li&gt;negatvie examples: docs known to be non-relevant&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;general method: query modicfication
        &lt;ul&gt;
          &lt;li&gt;adding new (weighted) terms (query expansion)&lt;/li&gt;
          &lt;li&gt;adjusting weights of old terms&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rocchio in Practice
    &lt;ul&gt;
      &lt;li&gt;Negative (non-relevant) examples are not very important&lt;/li&gt;
      &lt;li&gt;Often truncate the vector (ie, consider only a small number of words that have highest weights in the centroid vector)(efficiency concern)&lt;/li&gt;
      &lt;li&gt;Avoid “over-fitting” (keep relatively high weight on the original query weights)&lt;/li&gt;
      &lt;li&gt;Can be used for relevence feedback and pseudo feedback (Β should be set to a larger value for relevance feedback than for pseudo feedback)&lt;/li&gt;
      &lt;li&gt;Usually robust and effective&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;53--feedback-in-text-retrieval---feedback-in-lm&quot;&gt;5.3 : Feedback in Text Retrieval - feedback in LM&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Feedback with LM
    &lt;ul&gt;
      &lt;li&gt;Query likelihood method can’t naturally support relevance feedback&lt;/li&gt;
      &lt;li&gt;Solution:
        &lt;ul&gt;
          &lt;li&gt;Kullback-Leibler( KL) divergence retrieval model as a generalization of query likelihood&lt;/li&gt;
          &lt;li&gt;Feedback is achieved through query model estimation/updating&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Summary of feedback in Text Retrieval
    &lt;ul&gt;
      &lt;li&gt;Feedback = learn from examples&lt;/li&gt;
      &lt;li&gt;Three major feedback scenarios
        &lt;ul&gt;
          &lt;li&gt;Relevance, pseudo, and implicit feedback&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Rocchio for VSM (vector space model)&lt;/li&gt;
      &lt;li&gt;Query Model estimation for LM
        &lt;ul&gt;
          &lt;li&gt;Mixture model&lt;/li&gt;
          &lt;li&gt;many other methods (eg, relevance model) have been proposed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;54--web-search-introduction--web-crawler&quot;&gt;5.4 : Web Search: Introduction &amp;amp; Web Crawler&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Web Search: Challenges &amp;amp; Opportunities
    &lt;ul&gt;
      &lt;li&gt;Challenges
        &lt;ul&gt;
          &lt;li&gt;scalability
            &lt;ul&gt;
              &lt;li&gt;how to handle the size of the web and ensure completeness of coverage?&lt;/li&gt;
              &lt;li&gt;how to serve many user queries quickly?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;low quality information and spams&lt;/li&gt;
          &lt;li&gt;dynamics of the web
            &lt;ul&gt;
              &lt;li&gt;new pages are constantly created and some pages may be updated very quickly&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Opportunities
        &lt;ul&gt;
          &lt;li&gt;many additional heuristics (eg links) can be leveraged to improve search accuracy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Component I: Crawler/Spider/Robot
    &lt;ul&gt;
      &lt;li&gt;Building a “toy crawler” is easy
        &lt;ul&gt;
          &lt;li&gt;Start with a set of “seed pages” in a priority queue&lt;/li&gt;
          &lt;li&gt;fetch pages from the web&lt;/li&gt;
          &lt;li&gt;parse fetched pages for hyperlinks; add them to the queue&lt;/li&gt;
          &lt;li&gt;follow the hyperlinks in the queue&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A real crawler is much more complicated…
        &lt;ul&gt;
          &lt;li&gt;Robustness (server failure, trap, etc)&lt;/li&gt;
          &lt;li&gt;Crawling courtesy (server load balance, robot exlclusion, etc)&lt;/li&gt;
          &lt;li&gt;Handling file types (images, PDF files, etc)&lt;/li&gt;
          &lt;li&gt;URL extensions (cgi script, internal references, etc)&lt;/li&gt;
          &lt;li&gt;recognize redundant pages (identical and duplicates)&lt;/li&gt;
          &lt;li&gt;discover “hidden” urls (eg, truncating a long url)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Major Crawling strategies
    &lt;ul&gt;
      &lt;li&gt;Breadth-first is common (balance server load)&lt;/li&gt;
      &lt;li&gt;parallel crawling is natural&lt;/li&gt;
      &lt;li&gt;variation: focused crawling
        &lt;ul&gt;
          &lt;li&gt;targeting at a subset of pages (eg, all pages about “automobiles”)&lt;/li&gt;
          &lt;li&gt;typically given a query&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;How to find new pages (they may not linked to an old page!)&lt;/li&gt;
      &lt;li&gt;Incremental/repeated crawling
        &lt;ul&gt;
          &lt;li&gt;need to minimize reource overhead&lt;/li&gt;
          &lt;li&gt;can learn form the past experience (updated daily vs monthly)&lt;/li&gt;
          &lt;li&gt;target at : 1) frequently updated pages; 2) frequently accessed pages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;55--web-indexing&quot;&gt;5.5 : Web indexing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Overview of web indexing
    &lt;ul&gt;
      &lt;li&gt;standard IR techniques are the baseis, but insufficient
        &lt;ul&gt;
          &lt;li&gt;scalability&lt;/li&gt;
          &lt;li&gt;efficiency&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Google’s gontributions:
        &lt;ul&gt;
          &lt;li&gt;google file system (gfs): distributed file system&lt;/li&gt;
          &lt;li&gt;mapreduce: software framework for parallel computation&lt;/li&gt;
          &lt;li&gt;hadoop: open source implementation of mapreduce&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mapreduce: a framework for parallel programming
    &lt;ul&gt;
      &lt;li&gt;minimize effort of programmer for simple parallel processing tasks&lt;/li&gt;
      &lt;li&gt;Features
        &lt;ul&gt;
          &lt;li&gt;hide many low-level details (network, storage)&lt;/li&gt;
          &lt;li&gt;build-in fault tolerance&lt;/li&gt;
          &lt;li&gt;automatic load balancing&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;56--link-analysis&quot;&gt;5.6 : Link Analysis&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ranking Algorithms for Web Search
    &lt;ul&gt;
      &lt;li&gt;Standard IR (information retrieval) models apply but aren’t sufficient
        &lt;ul&gt;
          &lt;li&gt;Different information needs&lt;/li&gt;
          &lt;li&gt;documents have additional information&lt;/li&gt;
          &lt;li&gt;information quality varies a lot&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Major extensions
        &lt;ul&gt;
          &lt;li&gt;exploiting links to improve scoring&lt;/li&gt;
          &lt;li&gt;exploiting clickthroughs for massive implicit feedback&lt;/li&gt;
          &lt;li&gt;in general, rely on machine learning to combine all kinds of features&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pagerank: capturing page “popularity”
    &lt;ul&gt;
      &lt;li&gt;intutions
        &lt;ul&gt;
          &lt;li&gt;links are like citations in literature&lt;/li&gt;
          &lt;li&gt;a page taht is cited often can be expected to be more useful in general&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;pagerank is essentially “citation counting”, but improves over simple counting
        &lt;ul&gt;
          &lt;li&gt;consider “indirect citations” (being cited by a highly cited paper counts a lot…)&lt;/li&gt;
          &lt;li&gt;smoothing of citations (every page is assumed to have a non-zero pseudo citation count)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;PageRank can also be interpreted as random surfing (thus capturing popularity)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;57--link-analysis-part-2&quot;&gt;5.7 : Link Analysis Part 2&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The pagerank algorithm
    &lt;ul&gt;
      &lt;li&gt;Random surfing model: At any range,
        &lt;ul&gt;
          &lt;li&gt;with probability α randomly jumping to another page&lt;/li&gt;
          &lt;li&gt;with probability (1-α), randomly picking a link to follow.
            &lt;ul&gt;
              &lt;li&gt;p(di): PageRank score of di = average probability of visiting page di&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PageRank in Practice
    &lt;ul&gt;
      &lt;li&gt;computation can be quite efficient since M is usually sparse&lt;/li&gt;
      &lt;li&gt;Normalization doesn’t affect ranking, leading to some variants of the formula&lt;/li&gt;
      &lt;li&gt;The zero-outlink problem: p(di)’s don’t sum to 1
        &lt;ul&gt;
          &lt;li&gt;one possible solution = page-specific damping factor (α =1.0 for a page with no outlink)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many extensions (eg, topic-specific PageRank)&lt;/li&gt;
      &lt;li&gt;Many other applications (eg, social network analysis)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;58--link-analysis---part-3-optional&quot;&gt;5.8 : Link analysis - Part 3 (optional)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;HITS: Capturing Authorities &amp;amp; Hubs
    &lt;ul&gt;
      &lt;li&gt;Intuitions
        &lt;ul&gt;
          &lt;li&gt;Pages that are widely cited are good authorities&lt;/li&gt;
          &lt;li&gt;Pages taht cite many other pages are good hubs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The key idea of HITS (Hypertext-Induced Topic Search)
        &lt;ul&gt;
          &lt;li&gt;Good authorities are cited by good hubs&lt;/li&gt;
          &lt;li&gt;Good hubs point to good authorities&lt;/li&gt;
          &lt;li&gt;Iterative reinforcement…&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many applications in graph/network analysis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary
    &lt;ul&gt;
      &lt;li&gt;link information is very useful
        &lt;ul&gt;
          &lt;li&gt;anchor text&lt;/li&gt;
          &lt;li&gt;pagerank&lt;/li&gt;
          &lt;li&gt;HITS&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Both pagerank and HITS have many applications in analyzing other graphs or networks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS410-wk5-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;CS 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;

&lt;h2 id=&quot;readings-and-resources&quot;&gt;Readings and Resources&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;41--definition-of-software-architecture&quot;&gt;4.1 : Definition of Software Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Definitions of Software ARchitecture
    &lt;ul&gt;
      &lt;li&gt;“A software system’s architecture is the set of of &lt;strong class=&quot;highlighted&quot;&gt;princiapal design decisions&lt;/strong&gt; about the system.”&lt;/li&gt;
      &lt;li&gt;The software architecture of a program or computing system is the structure or strucutures of the system, whcih comprise &lt;strong class=&quot;highlighted&quot;&gt;software elements&lt;/strong&gt;, the &lt;strong class=&quot;highlighted&quot;&gt;externally visible properties&lt;/strong&gt; of those elements, and the &lt;strong class=&quot;highlighted&quot;&gt;relationshipts&lt;/strong&gt; among them.”&lt;/li&gt;
      &lt;li&gt;A model of software architecture “consists of three components: &lt;strong class=&quot;highlighted&quot;&gt;elements, form, and rationale&lt;/strong&gt;.”
        &lt;ul&gt;
          &lt;li&gt;Elements (what): Processing, data, or connecting elements&lt;/li&gt;
          &lt;li&gt;Form (how): Constraints (properties, relationships) on the elements&lt;/li&gt;
          &lt;li&gt;Rationale (why): System constraints, often derived from system requirements&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Benefits of sofware architecture
    &lt;ul&gt;
      &lt;li&gt;Understanding&lt;/li&gt;
      &lt;li&gt;Reuse&lt;/li&gt;
      &lt;li&gt;Construction&lt;/li&gt;
      &lt;li&gt;Evolution&lt;/li&gt;
      &lt;li&gt;Analysis&lt;/li&gt;
      &lt;li&gt;Management&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42--software-architect&quot;&gt;4.2 : Software Architect&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Important skills of software architects
    &lt;ul&gt;
      &lt;li&gt;“software architects should &lt;strong class=&quot;highlighted&quot;&gt;design, develop, nurture, and maintain&lt;/strong&gt; the architecture of the software-intensive systems they are involved with.”
        &lt;ul&gt;
          &lt;li&gt;Domain Knowledge&lt;/li&gt;
          &lt;li&gt;Software Development Expertise&lt;/li&gt;
          &lt;li&gt;Communication Skills&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS427-wk5-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43--abstraction&quot;&gt;4.3 : Abstraction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Definition of Abstraction
    &lt;ul&gt;
      &lt;li&gt;Removing detail to &lt;strong class=&quot;highlighted&quot;&gt;simplify and foucus attention&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Generalizing to &lt;strong class=&quot;highlighted&quot;&gt;identify the common core or essence&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Importance of Abstraction in CS
    &lt;ul&gt;
      &lt;li&gt;“Once you realize that computing is all about &lt;strong class=&quot;highlighted&quot;&gt;constructing, manipulating, and reasoning about abstractions&lt;/strong&gt;, it becomes clear that an important prerequisiite for writing(good) computer programs is the ability to &lt;strong class=&quot;highlighted&quot;&gt;handle abstractions in a precise manner&lt;/strong&gt;.”&lt;/li&gt;
      &lt;li&gt;“Computer science is not computer programming. Thinking like a computer scientist means more than being able to program a computer. It requires &lt;strong class=&quot;highlighted&quot;&gt;thinking at multiple levels of abstraction&lt;/strong&gt;.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Types of Abstraction in Software Engineering
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Procedural&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Naming a sequence of instructions&lt;/li&gt;
          &lt;li&gt;Parameterizing a procedure&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Data&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Naming a collection of data&lt;/li&gt;
          &lt;li&gt;Data type defined by a set of procedures&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Control&lt;/strong&gt; abstraction
        &lt;ul&gt;
          &lt;li&gt;Without specifying all register/binary-level steps&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Performance&lt;/strong&gt; abstraction O(N)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Software Development process also has abstractions
    &lt;ul&gt;
      &lt;li&gt;Requirements (What)&lt;/li&gt;
      &lt;li&gt;Architecture&lt;/li&gt;
      &lt;li&gt;OO Design&lt;/li&gt;
      &lt;li&gt;Implementation (How)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to get good abstractions
    &lt;ul&gt;
      &lt;li&gt;learn from others&lt;/li&gt;
      &lt;li&gt;generalize from examples&lt;/li&gt;
      &lt;li&gt;look for/eliminate duplication&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Abstractions can fool you
    &lt;ul&gt;
      &lt;li&gt;suppose a collection c has operation: getItemNumbered(int index)&lt;/li&gt;
      &lt;li&gt;How do you iterate?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;C++&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getItemNumbered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;But what if the collection is a linked list?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;44--modularity&quot;&gt;4.4 : Modularity&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Functional Independence
    &lt;ul&gt;
      &lt;li&gt;Cohesion (Good)
        &lt;ul&gt;
          &lt;li&gt;Measure of interconnection within a module&lt;/li&gt;
          &lt;li&gt;The degree to which one part of a module depends on another&lt;/li&gt;
          &lt;li&gt;Maximize cohesion&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Coupling (Less desirable)
        &lt;ul&gt;
          &lt;li&gt;Measure of interconnection among modules&lt;/li&gt;
          &lt;li&gt;The degree to which one module depends on others&lt;/li&gt;
          &lt;li&gt;Minimize coupling&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Major types of cohesion
    &lt;ul&gt;
      &lt;li&gt;Coincidental - grouped by chance  (Low cohesion)&lt;/li&gt;
      &lt;li&gt;logical - same idea&lt;/li&gt;
      &lt;li&gt;temporal - same time&lt;/li&gt;
      &lt;li&gt;procedural - one after another&lt;/li&gt;
      &lt;li&gt;communicational - shared data&lt;/li&gt;
      &lt;li&gt;sequential - output of one being input of the other&lt;/li&gt;
      &lt;li&gt;functional - a single well-defined task (high cohesion)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Information hiding
    &lt;ul&gt;
      &lt;li&gt;EAch module should hide a design decision from others&lt;/li&gt;
      &lt;li&gt;Ideally, one design decision per module, but usually design decisions are closely related&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Example design decisions
    &lt;ul&gt;
      &lt;li&gt;Representation of data&lt;/li&gt;
      &lt;li&gt;Use of a particular software package&lt;/li&gt;
      &lt;li&gt;Use of a particular printer&lt;/li&gt;
      &lt;li&gt;Use of a particular operating system&lt;/li&gt;
      &lt;li&gt;Use of a particular algorithm&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Other reasons for modularity
    &lt;ul&gt;
      &lt;li&gt;collaborative/distributed development: reduced communication&lt;/li&gt;
      &lt;li&gt;security - compartmentalization&lt;/li&gt;
      &lt;li&gt;reliability - localization of failure&lt;/li&gt;
      &lt;li&gt;Conway’s law: the architecture of a system is the same as the structure of the group that developed it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ways to achieve modularity
    &lt;ul&gt;
      &lt;li&gt;reuse a design with good modularity&lt;/li&gt;
      &lt;li&gt;think about and hide design decisions&lt;/li&gt;
      &lt;li&gt;reduce coupling and increase cohesion&lt;/li&gt;
      &lt;li&gt;eliminate duplication&lt;/li&gt;
      &lt;li&gt;reduce impact of changes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;45--architecture&quot;&gt;4.5 : Architecture&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Three views of software architecture
    &lt;ul&gt;
      &lt;li&gt;Static view&lt;/li&gt;
      &lt;li&gt;Dynamic view&lt;/li&gt;
      &lt;li&gt;Deployment view&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Components and connectors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;46--architectural-styles&quot;&gt;4.6 : Architectural Styles&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Architectural Style
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Vocabularly&lt;/strong&gt; of components and connectors&lt;/li&gt;
      &lt;li&gt;Compositions &lt;strong class=&quot;highlighted&quot;&gt;constraints&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Client-server style
    &lt;ul&gt;
      &lt;li&gt;Example: SVN&lt;/li&gt;
      &lt;li&gt;Easy to add new clients to structure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Layered/Tiered style: 3-tier/n-tier client-server (eg local file system)
    &lt;ul&gt;
      &lt;li&gt;Presentation tier&lt;/li&gt;
      &lt;li&gt;Logic tier&lt;/li&gt;
      &lt;li&gt;data tier&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pipe-and-filter style
    &lt;ul&gt;
      &lt;li&gt;eg cat contatctbook | grep “illinois” | sort &amp;gt; illini&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;47--mvc-pattern&quot;&gt;4.7 : MVC Pattern&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Architectural Pattern
    &lt;ul&gt;
      &lt;li&gt;A &lt;strong class=&quot;highlighted&quot;&gt;general, reusable&lt;/strong&gt; solution to a &lt;strong class=&quot;highlighted&quot;&gt;commonly occuring&lt;/strong&gt; problem in software architecture within a given context.&lt;/li&gt;
      &lt;li&gt;Not the same as architectural style
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Vocabularly&lt;/strong&gt; of components and connectors&lt;/li&gt;
          &lt;li&gt;Composition &lt;strong class=&quot;highlighted&quot;&gt;constraints&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model-View-Controller Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180930/CS427-wk5-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 30 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/30/MCS-Notes-Week-5</link>
				<guid isPermaLink="true">/2018/09/30/MCS-Notes-Week-5</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 4 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain how to interpret p(R=1|q,d) and estimate it based on a large set of collected relevance judgments (or clickthrough information) about query q and document d.&lt;/li&gt;
  &lt;li&gt;Explain how to interpret the conditional probability p(q|d) used for scoring documents in the query likelihood retrieval function.&lt;/li&gt;
  &lt;li&gt;Explain what a statistical language model and a unigram language model are.&lt;/li&gt;
  &lt;li&gt;Explain how to compute the maximum likelihood estimate of a unigram language model.&lt;/li&gt;
  &lt;li&gt;Explain how to use unigram language models to discover semantically related words.&lt;/li&gt;
  &lt;li&gt;Compute p(q|d) based on a given document language model p(w|d).&lt;/li&gt;
  &lt;li&gt;Explain what smoothing does.&lt;/li&gt;
  &lt;li&gt;Show that query likelihood retrieval function implements TF-IDF weighting if we smooth the document language model p(w|d) using the collection language model p(w|C) as a reference language model.&lt;/li&gt;
  &lt;li&gt;Compute the estimate of p(w|d) using Jelinek-Mercer (JM) smoothing and Dirichlet Prior smoothing, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Given a table of relevance judgments in the form of three columns (query, document, and binary relevance judgments), how can we estimate p(R=1|q,d)?&lt;/li&gt;
  &lt;li&gt;How should we interpret the query likelihood conditional probability p(q|d)?&lt;/li&gt;
  &lt;li&gt;What is a statistical language model? What is a unigram language model? How many parameters are there in a unigram language model?&lt;/li&gt;
  &lt;li&gt;How do we compute the maximum likelihood estimate of the unigram language model (based on a text sample)?&lt;/li&gt;
  &lt;li&gt;What is a background language model? What is a collection language model? What is a document language model?&lt;/li&gt;
  &lt;li&gt;Why do we need to smooth a document language model in the query likelihood retrieval model? What would happen if we don’t do smoothing?&lt;/li&gt;
  &lt;li&gt;When we smooth a document language model using a collection language model as a reference language model, what is the probability assigned to an unseen word in a document?&lt;/li&gt;
  &lt;li&gt;How can we prove that the query likelihood retrieval function implements TF-IDF weighting if we use a collection language model smoothing?&lt;/li&gt;
  &lt;li&gt;How does linear interpolation (Jelinek-Mercer) smoothing work? What is the formula?&lt;/li&gt;
  &lt;li&gt;How does Dirichlet prior smoothing work? What is the formula?&lt;/li&gt;
  &lt;li&gt;What are the similarities and differences between Jelinek-Mercer smoothing and Dirichlet prior smoothing?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapter 6 - Section 6.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;p(R=1|q,d) ; query likelihood, p(q|d)&lt;/li&gt;
  &lt;li&gt;Statistical and unigram language models&lt;/li&gt;
  &lt;li&gt;Maximum likelihood estimate&lt;/li&gt;
  &lt;li&gt;Background, collection, and document language models&lt;/li&gt;
  &lt;li&gt;Smoothing of unigram language models&lt;/li&gt;
  &lt;li&gt;Relation between query likelihood and TF-IDF weighting&lt;/li&gt;
  &lt;li&gt;Linear interpolation (i.e., Jelinek-Mercer) smoothing&lt;/li&gt;
  &lt;li&gt;Dirichlet Prior smoothing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;41--probabilistic-retrieval-model&quot;&gt;4.1 : Probabilistic Retrieval Model&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Many different retrieval models:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Probabilistic models&lt;/strong&gt;: f(d,q) = p(R=1|d,q), R ∈ {0,1}
        &lt;ul&gt;
          &lt;li&gt;Classic probabilistic model -&amp;gt; BM25&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Language model -&amp;gt; Query Likelihood&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Divergence-from-randomness model -&amp;gt; PL2
            &lt;ul&gt;
              &lt;li&gt;p(R=1|d,q) ≈ p(q|d,R=1)&lt;/li&gt;
              &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;If a user likes document d, how likely would the user enter query q (in order to retrieve d)?&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instead, we prefer to use p(q|d,R=1):
    &lt;ul&gt;
      &lt;li&gt;Assume a user formulates a query based on an “&lt;strong class=&quot;highlighted&quot;&gt;imaginary relevant document&lt;/strong&gt;”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;42--statistical-language-models&quot;&gt;4.2 : Statistical Language Models&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What is a statistical language model?
    &lt;ul&gt;
      &lt;li&gt;A probability distribution over word sequences&lt;/li&gt;
      &lt;li&gt;Context Dependent&lt;/li&gt;
      &lt;li&gt;Can also be regarded as a probabilistic mechanism for “generating” text, thus also called a “generative” model.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why is a LM useful?
    &lt;ul&gt;
      &lt;li&gt;Quantify the uncertainties in natural language&lt;/li&gt;
      &lt;li&gt;Allows us to answer questions like:
        &lt;ul&gt;
          &lt;li&gt;Given that we see “John” and “feels”, how likely will we see “happy” as opposed to “habit as the next word? (&lt;strong class=&quot;highlighted&quot;&gt;speech recognition&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;Given that we observe “baseball” three times and “game” once in a news article, how likely is it about “sports”? (&lt;strong class=&quot;highlighted&quot;&gt;text categorization, information retrieval&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;Given that a user is interested in sports news, how likely would the user use “baseball” in a query? (&lt;strong class=&quot;highlighted&quot;&gt;information retrieval&lt;/strong&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Simplest Language Model: Unigram LM
    &lt;ul&gt;
      &lt;li&gt;Generate text by generating each word INDEPENDENTLY&lt;/li&gt;
      &lt;li&gt;thus, p(w1, w2, …wn) = p(w1)p(w2)…p(wn)&lt;/li&gt;
      &lt;li&gt;Parameters: {p(wi)} p(w1)+…+p(wn)=1 (N is vocabularly size)&lt;/li&gt;
      &lt;li&gt;Text = sample drawn according to this &lt;strong class=&quot;highlighted&quot;&gt;word distribution&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43--query-likelihood-retrieval-function&quot;&gt;4.3 : Query Likelihood Retrieval Function&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;p(q|d), if the user is thinking of this doc, how likely would she pose this query?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;44--ranking-function-based-on-query-likelihood&quot;&gt;4.4 : Ranking Function based on Query likelihood&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Key Question: what probability should be assigned to an unseen word?&lt;/li&gt;
  &lt;li&gt;Let the probability of an unseen word be proportional to its probability given by a refernce LM&lt;/li&gt;
  &lt;li&gt;One possibility: Reference LM = Collection LM
    &lt;ul&gt;
      &lt;li&gt;p(w|d) = {Pseen(w|d), if w is seen in d} , {α&lt;sub&gt;d&lt;/sub&gt;P(w|C), otherwise}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;45--statistical-language-model---part-2&quot;&gt;4.5 : Statistical Language Model - Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;46-smoothing-methods---part-1&quot;&gt;4.6 SMoothing Methods - Part 1&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;47--smoothing-methods---part-2&quot;&gt;4.7 : Smoothing Methods - Part 2&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS410-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;CS 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Know how Napster, Gnutella, FastTrack, and BitTorrent work.&lt;/li&gt;
  &lt;li&gt;Know and analyze how distributed hash tables work (Chord, Pastry, and Kelips).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Peer-to-peer systems&lt;/li&gt;
  &lt;li&gt;Industrial P2P systems: Napster, Gnutella, FastTrack, BitTorrent&lt;/li&gt;
  &lt;li&gt;Distributed hash tables: Chord, Pastry, Kelips&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What is the difference between how Napster clients and Gnutella clients search for files?&lt;/li&gt;
  &lt;li&gt;What is the difference between Gnutella and FastTrack?&lt;/li&gt;
  &lt;li&gt;What is BitTorrent’s tit for tat mechanism?&lt;/li&gt;
  &lt;li&gt;What is consistent hashing?&lt;/li&gt;
  &lt;li&gt;Why are DHTs efficient in searching?&lt;/li&gt;
  &lt;li&gt;How does Chord route queries?&lt;/li&gt;
  &lt;li&gt;How does Pastry route queries?&lt;/li&gt;
  &lt;li&gt;How does Kelips route queries?&lt;/li&gt;
  &lt;li&gt;What is churn in P2P systems?&lt;/li&gt;
  &lt;li&gt;How does Chord maintain correct neighbors in spite of failures and churn?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings-and-resources&quot;&gt;Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://courses.engr.illinois.edu/cs425/fa2014/gnutella_protocol_0.4.pdf&quot;&gt;Gnutella v 0.4 paper (PDF)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pdos.csail.mit.edu/papers/chord:sigcomm01/chord_sigcomm.pdf&quot;&gt;Chord paper (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;41-p2p-systems-introduction&quot;&gt;4.1 P2P Systems Introduction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;P2P first distributed systems that seriously focused on scalability with respect to number of nodes&lt;/li&gt;
  &lt;li&gt;Widely-deployed P2P Systems
    &lt;ol&gt;
      &lt;li&gt;Napster&lt;/li&gt;
      &lt;li&gt;Gnutella&lt;/li&gt;
      &lt;li&gt;Fasttrack (Kazaa, Kazaalite, Grokster)&lt;/li&gt;
      &lt;li&gt;BitTorrent&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;P2P Systems with Provable Properties
    &lt;ol&gt;
      &lt;li&gt;Chord&lt;/li&gt;
      &lt;li&gt;Pastry&lt;/li&gt;
      &lt;li&gt;Kelips&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-napster&quot;&gt;4.2 Napster&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Napster Operations:
    &lt;ul&gt;
      &lt;li&gt;Client: Connect to a Napster server
        &lt;ul&gt;
          &lt;li&gt;Upload list of music files that you want to share&lt;/li&gt;
          &lt;li&gt;Server maintains list of &amp;lt;filename, ip_address, portnum&amp;gt; tuples. &lt;strong class=&quot;highlighted&quot;&gt;Server stores no files.&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Search
        &lt;ul&gt;
          &lt;li&gt;Send server keywords to search with&lt;/li&gt;
          &lt;li&gt;(server searchs its list with the keywords)&lt;/li&gt;
          &lt;li&gt;Server returns a list of hosts -&amp;lt;ip_address, portnum&amp;gt; tuples - to client&lt;/li&gt;
          &lt;li&gt;client pings each host in the list to find transfer rates&lt;/li&gt;
          &lt;li&gt;Client fetches file from best host&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;All communication uses TCP (Transmission control Protocol)
        &lt;ul&gt;
          &lt;li&gt;Reliable and ordered networking protocol (TCP)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ternary trees store the directory information (3 children per parent)&lt;/li&gt;
  &lt;li&gt;Joining a P2P System
    &lt;ul&gt;
      &lt;li&gt;Can be used for any p2p system
        &lt;ul&gt;
          &lt;li&gt;Send an http request to well-known url for that p2p service -eg: www.myp2pservice.com&lt;/li&gt;
          &lt;li&gt;Message routed (after lookup in DNS=Domain Name System) to introducer, a well known server that keeps track of some recently joined nodes in p2p system&lt;/li&gt;
          &lt;li&gt;Introducer initializes new peer’s neighbor table&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems
    &lt;ul&gt;
      &lt;li&gt;Centralized server a source of congestion&lt;/li&gt;
      &lt;li&gt;Centralized server single point of failure&lt;/li&gt;
      &lt;li&gt;No security: plaintext messages on passwds&lt;/li&gt;
      &lt;li&gt;napster.com declared to be responsible for users’ copyright violation
        &lt;ul&gt;
          &lt;li&gt;“Indirect infringement”&lt;/li&gt;
          &lt;li&gt;events led to Gnutella development&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-gnutella&quot;&gt;4.3 Gnutella&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gnutella does:
    &lt;ul&gt;
      &lt;li&gt;eliminate the servers&lt;/li&gt;
      &lt;li&gt;Client machines search and &lt;strong class=&quot;highlighted&quot;&gt;retrieve&lt;/strong&gt; amongst themselves (clients act as teh servers)&lt;/li&gt;
      &lt;li&gt;Clients act as servers too, called servents&lt;/li&gt;
      &lt;li&gt;3/2000 released by AOL, immediately withdrawn due to copyright issues, 88K users by 3/2003&lt;/li&gt;
      &lt;li&gt;Original design underwent several modifications&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How do I search for my files?
    &lt;ul&gt;
      &lt;li&gt;Gnutella routes different messages with the overlay graph&lt;/li&gt;
      &lt;li&gt;Protocol has 5 main message types
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Query&lt;/strong&gt; (search)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;QueryHit&lt;/strong&gt; (response to query)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Ping&lt;/strong&gt; (to probe network for other peers)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Pong&lt;/strong&gt; (reply to ping, contains address of another peer)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Push&lt;/strong&gt; (used to initiate file transfer)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;We’ll go into the message structure and protocol now
        &lt;ul&gt;
          &lt;li&gt;All fields except IP address are in little-endian format&lt;/li&gt;
          &lt;li&gt;Little endian example: 0x12345678 stored as 0x78 in lowest address byte, then 0x56 in next, and so on.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Avoiding Excessive Traffic
    &lt;ul&gt;
      &lt;li&gt;To avoid duplicate transmissions, each peer maintains a list of recently received messages&lt;/li&gt;
      &lt;li&gt;Query forwarded to all neighbors except peer from which received&lt;/li&gt;
      &lt;li&gt;Each Query (identified by DescriptorID) forwarded only once&lt;/li&gt;
      &lt;li&gt;QueryHit routed back only to peer from which Query received with same DescriptorID&lt;/li&gt;
      &lt;li&gt;For flooded messages, duplicates with same DescriptorID and Payload descriptor are dropped&lt;/li&gt;
      &lt;li&gt;QueryHit with DescriptorID for which Query not seen is dropped.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP is file transfer protocol. why?
    &lt;ul&gt;
      &lt;li&gt;Because it’s standard, well-debugged, and widely used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why the “range” field in teh GET request?
    &lt;ul&gt;
      &lt;li&gt;To support partial file transfers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What if responder is behind firewall that disallows incoming connections? (drops it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responder establishes a TCP connection at ip_address, port specified.  Sends: GIV &lt;File Index=&quot;&quot;&gt;:&lt;Servent Identifier=&quot;&quot;&gt;/&lt;File Name=&quot;&quot;&gt;\n\n&lt;/File&gt;&lt;/Servent&gt;&lt;/File&gt;&lt;/li&gt;
  &lt;li&gt;Requestor then sends GET to responder (as before) and file is transferred as explained earlier.&lt;/li&gt;
  &lt;li&gt;What if requestor is behind firewall too?
    &lt;ul&gt;
      &lt;li&gt;Gnutella gives up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If the responding peer is behind a firewall, which of the following statements ARE TRUE about Gnutella?
    &lt;ul&gt;
      &lt;li&gt;A Push message can be sent to it since it is already connected to its peers.&lt;/li&gt;
      &lt;li&gt;A modified version of Gnutella could use the overlay links themselves to transfer the file (though this may be slow).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;When a Gnutella peer receives a Ping message from one of its neighbors, which of the following actions does it perform? (all are correct)
    &lt;ul&gt;
      &lt;li&gt;It forwards it to appropriate neighbors after checking TTL.&lt;/li&gt;
      &lt;li&gt;It creates a Pong message about itself and reverse routes it.&lt;/li&gt;
      &lt;li&gt;If it was the original peer that initiated the Ping, it uses received Pong responses to update its membership lists.&lt;/li&gt;
      &lt;li&gt;It reverse routes any Pong messages it receives.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gnutella Summary
    &lt;ul&gt;
      &lt;li&gt;No servers&lt;/li&gt;
      &lt;li&gt;Peers/servents maintain “neighbors”, this forms an overlay graph&lt;/li&gt;
      &lt;li&gt;Peers store their own files&lt;/li&gt;
      &lt;li&gt;Queries flooded out, ttl restricted&lt;/li&gt;
      &lt;li&gt;QueryHit (replies) reverse path routed&lt;/li&gt;
      &lt;li&gt;Supports file transfer through firewalls&lt;/li&gt;
      &lt;li&gt;Periodic Ping-pong to continuously refresh neighbor lists
        &lt;ul&gt;
          &lt;li&gt;List size specified by user at peer : heterogeneity means some peers may have more neighbors&lt;/li&gt;
          &lt;li&gt;Gnutella found to follow power law distribution:  P(#Links = L) ~ L&lt;sup&gt;-k&lt;/sup&gt;  (k is a constant)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Problems
    &lt;ul&gt;
      &lt;li&gt;Ping/Pong constituted 50% traffic
        &lt;ul&gt;
          &lt;li&gt;Solution: Multiplex, cache and reduce frequency of pings/pongs&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Repeated searches with same keywords
        &lt;ul&gt;
          &lt;li&gt;Solution: Cache Query, QueryHit messages&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Modem-connected hosts do not have enough bandwidth for passing Gnutella traffic
        &lt;ul&gt;
          &lt;li&gt;Solution: use a central server to act as proxy for such peers&lt;/li&gt;
          &lt;li&gt;Another solution:
            &lt;ul&gt;
              &lt;li&gt;FastTrack System (soon)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Large number of freeloaders
        &lt;ul&gt;
          &lt;li&gt;70% of users in 2000 were freeloaders&lt;/li&gt;
          &lt;li&gt;Only download files, never upload own files&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Flooding causes excessive traffic
        &lt;ul&gt;
          &lt;li&gt;Is there some way of maintaining meta-information about peers that leads to more intelligent routing?&lt;br /&gt;
  –&amp;gt; Structured Peer-to-peer systems, eg Chord System (coming up soon)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;44-fasttrack-and-bittorrent&quot;&gt;4.4 FastTrack and BitTorrent&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FastTrack
    &lt;ul&gt;
      &lt;li&gt;Hybrid of gnutella and napster&lt;/li&gt;
      &lt;li&gt;Takes advantage of “healthier” participants in the system&lt;/li&gt;
      &lt;li&gt;Underlying technology in Kazaa, KazaaLite, Grokster&lt;/li&gt;
      &lt;li&gt;Proprietary protocaol, but some details available&lt;/li&gt;
      &lt;li&gt;Gnutella, but with some peers designated as &lt;strong class=&quot;highlighted&quot;&gt;supernodes&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;A supernode stores a directory listing a subset of nearby (&amp;lt;filename, peer pointer&amp;gt;), similar to Napster servers&lt;/li&gt;
      &lt;li&gt;Supernode membership changes over time &lt;strong class=&quot;highlighted&quot;&gt;(a member cannot declare itself a supernode)&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Any peer can become (and stay) a supernode, provided it has earned enough &lt;strong class=&quot;highlighted&quot;&gt;reputation&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Kazaalite: participation level (=reputation) of a user between 0 and 1000, initially 10, then affected by length of periods of connectivity and total number of uploads&lt;/li&gt;
          &lt;li&gt;More sophisticated Reputation schemes invented, especially based on economics (See P2PEcon Workshop)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;A peer searches by contacting nearby supernode.&lt;/li&gt;
      &lt;li&gt;Supernodes get advantage of having information readily available in its structure so it’s faster to look up stuff.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BitTorrent
    &lt;ul&gt;
      &lt;li&gt;File split into blocks (32 KB - 256 KB)&lt;/li&gt;
      &lt;li&gt;Download &lt;strong class=&quot;highlighted&quot;&gt;Local Rarest First&lt;/strong&gt; block policy: prefer early download of blocks that are least replicated among neighbors
        &lt;ul&gt;
          &lt;li&gt;Exception: New node allowed to pick one random neighbor: helps in bootstrapping&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Tit for tat&lt;/strong&gt; bandwidth usage: Provide blocks to neighbors that provided it the best download rates
        &lt;ul&gt;
          &lt;li&gt;Incentive for nodes to provide good download rates&lt;/li&gt;
          &lt;li&gt;Seeds do the same too&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Choking&lt;/strong&gt;: Limit number of neighbors to which concurrent uploads &amp;lt;= a number (eg, 5), ie, the “best” neighbors
        &lt;ul&gt;
          &lt;li&gt;Everyone else choked&lt;/li&gt;
          &lt;li&gt;Priodically re-evaluate this set (eg, every 10 s)&lt;/li&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Optimistic unchoke&lt;/strong&gt;: periodically (eg, ~30s), unchoke a random neighbor - helps keep unchoked set fresh&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Choking helps limit how many peers are uploading, to prevent overwhelming upload bandwidth.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Why are random choices used in the BitTorrent Choking policy?
        &lt;ul&gt;
          &lt;li&gt;To avoid the system from getting stuck where only a few peers receive service (correct)&lt;/li&gt;
          &lt;li&gt;To ensure that all peers receive uniform download speed (incorrect)&lt;/li&gt;
          &lt;li&gt;To ensure Tit for Tat bandwidth usage (incorrect)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;45-chord&quot;&gt;4.5 Chord&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;DHT: Distributed Hash Table
    &lt;ul&gt;
      &lt;li&gt;A hash table allows you to insert, lookup and delete objects with keys.&lt;/li&gt;
      &lt;li&gt;A &lt;strong class=&quot;highlighted&quot;&gt;distributed hash table&lt;/strong&gt; allows you to do the same in a distributed setting (objects=files)&lt;/li&gt;
      &lt;li&gt;Performance concerns:
        &lt;ul&gt;
          &lt;li&gt;Load balancing&lt;/li&gt;
          &lt;li&gt;Fault-tolerance&lt;/li&gt;
          &lt;li&gt;Efficiency of lookups and inserts&lt;/li&gt;
          &lt;li&gt;Locality&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Napster, Gnutella, FastTrack are all DHTs (sort of)&lt;/li&gt;
      &lt;li&gt;So is Chord, a structured peer to peer ssytem that we study next&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chord:
    &lt;ul&gt;
      &lt;li&gt;Developers: I Stoica, D Karger, F Kaashoek, H Balakrishnan, R Morris, Berkeley and MIT&lt;/li&gt;
      &lt;li&gt;Intelligent choice of neighbors to reduce latency and message cost of routing (lookups/inserts)&lt;/li&gt;
      &lt;li&gt;Uses &lt;strong class=&quot;highlighted&quot;&gt;Consistent Hashing&lt;/strong&gt; on node’s (peer’s) address
        &lt;ul&gt;
          &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;SHA-1&lt;/strong&gt;(ip_address.port) –&amp;gt; 160 bit string&lt;/li&gt;
          &lt;li&gt;Truncated to m bits&lt;/li&gt;
          &lt;li&gt;Called peer id (number between 0 and 2&lt;sup&gt;m&lt;/sup&gt; - 1)&lt;/li&gt;
          &lt;li&gt;Not unique but ide conflicts very unlikely&lt;/li&gt;
          &lt;li&gt;Can then map peers to one of 2&lt;sup&gt;m&lt;/sup&gt; logical points on a circle&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;What are the types of neighbors used in a Chord P2P system (All are correct)?
        &lt;ul&gt;
          &lt;li&gt;Successors&lt;/li&gt;
          &lt;li&gt;Finger tables&lt;/li&gt;
          &lt;li&gt;Predecessors (if needed)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;In a Chord P2P system with m=8, a peer with id 33 is considering the following peers for its i=3 finger table entry: 40, 42, and 44. Which one is the best (correct) choice?
        &lt;ul&gt;
          &lt;li&gt;33 + 2^3 = 41, first number that is &amp;gt;= to that is 42&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;what about the files?
    &lt;ul&gt;
      &lt;li&gt;Filenames also mapped using same consistent hash function
        &lt;ul&gt;
          &lt;li&gt;SHA-1(filename) –&amp;gt; 160 bit string (key)&lt;/li&gt;
          &lt;li&gt;File is stored at first peer with id greater than or equal to its key (mod 2&lt;sup&gt;m&lt;/sup&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;File cnn.com/index.html that maps to key K42 is stored at first peer with id greater than 42
        &lt;ul&gt;
          &lt;li&gt;Note that we are considering a different file-sahring application here: &lt;strong class=&quot;highlighted&quot;&gt;cooperative web caching&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;The same discussion applies to any other file sharing application, including that of mp3 files.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Consistent Hashing =&amp;gt; with K keys and N peers, each peer stores O(K/N) keys (ie, &amp;lt; c.K/N, for some constant c) (ie, good load balancing among the peers)&lt;/li&gt;
      &lt;li&gt;In a Chord ring with m=7, three successive peers have ids 12, 19, 33 (there are other peers in the system too, but not in between 12 and 33). If the number of files is large and a uniform hash function is used, which of the following is true?
        &lt;ul&gt;
          &lt;li&gt;Peer 33 stores about double the number of files as peer 19.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;46-failures-in-chord&quot;&gt;4.6 Failures in Chord&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Search under peer failures
    &lt;ul&gt;
      &lt;li&gt;Lookup fails (  N16 does not know N45, when N32 fails)
        &lt;ul&gt;
          &lt;li&gt;Solution:  maintain multiple successors, but how many?&lt;/li&gt;
          &lt;li&gt;Choosing 2log(N) successors suffices to maintain lookup correctness with high probability (ie, ring connected)
            &lt;ul&gt;
              &lt;li&gt;Say 50% of nodes fail&lt;/li&gt;
              &lt;li&gt;Pr(at given node, at least one successor alive) = 1 - (1/2)^(2logN) = 1 - 1/N^2&lt;/li&gt;
              &lt;li&gt;Pr(above is ttrue at all alive nodes )= (1 - 1/N^2)^(N/2) = e^(-1/2N) ~ 1&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lookup fails ( N45 fails)
        &lt;ul&gt;
          &lt;li&gt;Solution: replicate file/key at r successors adn predecessors)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Need to deal with dynamic changes
    &lt;ul&gt;
      &lt;li&gt;Peers fail (we’ve discussed this)&lt;/li&gt;
      &lt;li&gt;New peers join&lt;/li&gt;
      &lt;li&gt;Peers leave
        &lt;ul&gt;
          &lt;li&gt;p2p systems have a high rate of &lt;strong class=&quot;highlighted&quot;&gt;churn&lt;/strong&gt; (node join, leave and failure)
            &lt;ul&gt;
              &lt;li&gt;25% per hour in Overnet (eDonkey)&lt;/li&gt;
              &lt;li&gt;100% per hour in gnutella&lt;/li&gt;
              &lt;li&gt;Lower in managed clusters&lt;/li&gt;
              &lt;li&gt;Common feature in all distributed systems, including wide-area (eg PlanetLab), clusters (eg Emulab), clouds (eg AWS) etc&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;So, all the time, need to: –&amp;gt; Need to update successors and fingers, and copy keys&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-22.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-23.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New peers joining:
    &lt;ul&gt;
      &lt;li&gt;A new peer affects O(log(N)) other finger entries in teh system, on average&lt;/li&gt;
      &lt;li&gt;Number of messages per peer join = O(logN*logN)&lt;/li&gt;
      &lt;li&gt;Similar set of operations for dealing with peers leaving
        &lt;ul&gt;
          &lt;li&gt;For dealing with failures, also need &lt;strong class=&quot;highlighted&quot;&gt;failure detectors&lt;/strong&gt; (we’ll see these later in the course!)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stabilization Protocol
    &lt;ul&gt;
      &lt;li&gt;Concurrent peer joins, leaves, failures might cause loopiness of pointers, and failure of lookups
        &lt;ul&gt;
          &lt;li&gt;Chord peers periodically run a &lt;strong class=&quot;highlighted&quot;&gt;stabilization&lt;/strong&gt; algorithm that checks and updates pointers and keys&lt;/li&gt;
          &lt;li&gt;Ensures &lt;em class=&quot;highlighted&quot;&gt;non-loopiness&lt;/em&gt; of fingers, eventual success of lookups and O(logN) lookups with high probability&lt;/li&gt;
          &lt;li&gt;Each stabilization round at a peer involves a constant number of messages&lt;/li&gt;
          &lt;li&gt;Strong stability takes O(N^2) stabilization rounds&lt;/li&gt;
          &lt;li&gt;For more see [techReport on Chord webpage]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Churn
    &lt;ul&gt;
      &lt;li&gt;When nodes are consttantly joining, leaving, failing
        &lt;ul&gt;
          &lt;li&gt;Significant effect to consider: traces from the Overnet system show hourly peer turnover rates (churn) could be 25-100% of total number of nodes in system&lt;/li&gt;
          &lt;li&gt;Leads to excessive (unnecessary) key copying (remember that keys are replicated)&lt;/li&gt;
          &lt;li&gt;Stabilization algorithm may need to consume more bandwidth to keep up&lt;/li&gt;
          &lt;li&gt;Main issue is that files are replicated, while it might be sufficient to replicate only meta information about files&lt;/li&gt;
          &lt;li&gt;Alternatives
            &lt;ul&gt;
              &lt;li&gt;Introduce a level of indirection (any p2p system)&lt;/li&gt;
              &lt;li&gt;Replicate metadata more, eg, Kelips (later in this lecture series)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Churn leads to which of the following behaviors in Chord (all are correct)?
        &lt;ul&gt;
          &lt;li&gt;Successors being continuously updated&lt;/li&gt;
          &lt;li&gt;Finger tables being continuously updated&lt;/li&gt;
          &lt;li&gt;Files being continuously copied to the correct storing servers&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Virtual nodes
    &lt;ul&gt;
      &lt;li&gt;Hash can get non-uniform –&amp;gt; Bad load balancing
        &lt;ul&gt;
          &lt;li&gt;Treat each node as multiple virtual nodes behaving independently&lt;/li&gt;
          &lt;li&gt;Each joins the system&lt;/li&gt;
          &lt;li&gt;Reduces variance of load imabalance&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;47-pastry&quot;&gt;4.7 Pastry&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Pastry
    &lt;ul&gt;
      &lt;li&gt;Designed by Anthony Rostron (MS Reserach) and Peter Druschel (Rice University)&lt;/li&gt;
      &lt;li&gt;Assigns ids to nodes, just like Chord (using a virtual ring)&lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Leaf Set&lt;/strong&gt; Each node knows its successor(s) and predecessor(S)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Neighbors
    &lt;ul&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Routing tables&lt;/em&gt; based &lt;strong class=&quot;highlighted&quot;&gt;&lt;u&gt;prefix matching&lt;/u&gt;&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Think of &lt;em&gt;hypercube routing&lt;/em&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Routing is thus based on prefix matching, and is thus log(N)
        &lt;ul&gt;
          &lt;li&gt;And hops are short (in the underlying network)&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Routing
    &lt;ul&gt;
      &lt;li&gt;Consider a peer with id 01110100101.  It maintains a neighbor peer with an id matching each of the following prefixes (* = starting bit differing from this peer’s corresponding bit):
        &lt;ul&gt;
          &lt;li&gt;*&lt;/li&gt;
          &lt;li&gt;0*&lt;/li&gt;
          &lt;li&gt;01*&lt;/li&gt;
          &lt;li&gt;011*&lt;/li&gt;
          &lt;li&gt;… 0111010010*&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;When it needs to route to a peer, say 011101&lt;strong class=&quot;highlighted&quot;&gt;&lt;u&gt;1&lt;/u&gt;&lt;/strong&gt;1001, it starts by forwarding to a neighbor with the largest matching prefix, ie, 011101*&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pastry Locality
    &lt;ul&gt;
      &lt;li&gt;For each prefix, say 011*, among all potential neighbors with a matching prefix, the neighbor with the shortest round-trip-time is selected&lt;/li&gt;
      &lt;li&gt;Since shorter prefixes have many more candidates (spread out throughout the Internet), the neighbors for shorter prefixes are likely to be closer than the neighbors for longer prefixes&lt;/li&gt;
      &lt;li&gt;Thus, in the prefix routing, early hops are short and later hops are longer&lt;/li&gt;
      &lt;li&gt;Yet overall “stretch”, compared to direc Internet path, stays short.&lt;/li&gt;
      &lt;li&gt;A Pastry peer has two neighbors for prefixes of 101* and 101110* respectively. Which of these is more likely to respond to a message faster?
        &lt;ul&gt;
          &lt;li&gt;The 101* neighbor&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Summary of Chord and Pastry
    &lt;ul&gt;
      &lt;li&gt;Chord and Pastry protocols
        &lt;ul&gt;
          &lt;li&gt;More structured than Gnutella&lt;/li&gt;
          &lt;li&gt;Black box lookup algorithms&lt;/li&gt;
          &lt;li&gt;Churn handling can get complex&lt;/li&gt;
          &lt;li&gt;O(logN) memory and lookup cost
            &lt;ul&gt;
              &lt;li&gt;O(logN) lookup hops may be high&lt;/li&gt;
              &lt;li&gt;Can we reduce the number of hops?&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;48-kelips&quot;&gt;4.8 Kelips&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-24.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-25.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-26.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180919/CS425-wk4-img-27.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chord vs Pastry vs Kelips
    &lt;ul&gt;
      &lt;li&gt;Range of tradeoffs available
        &lt;ul&gt;
          &lt;li&gt;Memory vs lookup cost vs background bandwidth ( to keep neighbors fresh)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;
</description>
				<pubDate>Wed, 19 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/19/MCS-Notes-Week-4</link>
				<guid isPermaLink="true">/2018/09/19/MCS-Notes-Week-4</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 3 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain the Cranfield evaluation methodology and how it works for evaluating a text retrieval system.&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a set of retrieved documents and how to compute precision, recall, and F1.&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a ranked list of documents.&lt;/li&gt;
  &lt;li&gt;Explain how to compute and plot a precision-recall curve.&lt;/li&gt;
  &lt;li&gt;Explain how to compute average precision and mean average precision (MAP).&lt;/li&gt;
  &lt;li&gt;Explain how to evaluate a ranked list with multi-level relevance judgments.&lt;/li&gt;
  &lt;li&gt;Explain how to compute normalized discounted cumulative gain.&lt;/li&gt;
  &lt;li&gt;Explain why it is important to perform statistical significance tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why is evaluation so critical for research and application development in text retrieval?&lt;/li&gt;
  &lt;li&gt;How does the Cranfield evaluation methodology work?&lt;/li&gt;
  &lt;li&gt;How do we evaluate a set of retrieved documents?&lt;/li&gt;
  &lt;li&gt;How do you compute precision, recall, and F1?&lt;/li&gt;
  &lt;li&gt;How do we evaluate a ranked list of search results?&lt;/li&gt;
  &lt;li&gt;How do you compute average precision? How do you compute mean average precision (MAP) and geometric mean average precision (gMAP)?&lt;/li&gt;
  &lt;li&gt;What is mean reciprocal rank?&lt;/li&gt;
  &lt;li&gt;Why is MAP more appropriate than precision at k documents when comparing two retrieval methods?&lt;/li&gt;
  &lt;li&gt;Why is precision at k documents more meaningful than average precision from a user’s perspective?&lt;/li&gt;
  &lt;li&gt;How can we evaluate a ranked list of search results using multi-level relevance judgments?&lt;/li&gt;
  &lt;li&gt;How do you compute normalized discounted cumulative gain (nDCG)?&lt;/li&gt;
  &lt;li&gt;Why is normalization necessary in nDCG? Does MAP need a similar normalization? Why is it important to perform statistical significance tests when we compare the retrieval accuracies of two search engine systems?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;additional-readings-and-resources&quot;&gt;Additional Readings and Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Mark Sanderson. Test collection based evaluation of information retrieval systems. Foundations and Trends in Information Retrieval 4, 4 (2010), 247-375.&lt;/li&gt;
  &lt;li&gt;C. Zhai and S. Massung. Text Data Management and Analysis: A Practical Introduction to Information Retrieval and Text Mining, ACM Book Series, Morgan &amp;amp; Claypool Publishers, 2016. Chapter 9&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cranfield evaluation methodology&lt;/li&gt;
  &lt;li&gt;Precision and recall&lt;/li&gt;
  &lt;li&gt;Average precision, mean average precision (MAP), and geometric mean average precision (gMAP)&lt;/li&gt;
  &lt;li&gt;Reciprocal rank and mean reciprocal rank&lt;/li&gt;
  &lt;li&gt;F-measure&lt;/li&gt;
  &lt;li&gt;Normalized discounted cumulative Gain (nDCG)&lt;/li&gt;
  &lt;li&gt;Statistical significance test&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;31-evaluation-of-tr-systems&quot;&gt;3.1 Evaluation of TR Systems&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;What to measure?
    &lt;ul&gt;
      &lt;li&gt;Effectiveness/Accuracy (*)&lt;/li&gt;
      &lt;li&gt;Efficiency&lt;/li&gt;
      &lt;li&gt;Usability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Cranfield Evaluation Methodology
    &lt;ul&gt;
      &lt;li&gt;Build reusable test collections &amp;amp; define measures&lt;/li&gt;
      &lt;li&gt;Collection can be reused many times to compare different systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-evaluation-of-tr-systems---basic-measures&quot;&gt;3.2 Evaluation of TR Systems - Basic Measures&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-evaluating-ranked-lists---part-1&quot;&gt;3.3 Evaluating Ranked Lists - Part 1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;34-evaluating-ranked-lists---part-2&quot;&gt;3.4 Evaluating Ranked Lists - Part 2&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;35-multi-level-judgements&quot;&gt;3.5 Multi-Level Judgements&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;so far we’ve been using a binary decision system, relevant or not relevant.  How about a non-binary, gradient based system?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;need normalized DCG so we can compare across different topics.&lt;/li&gt;
  &lt;li&gt;Normalized Discounted Cumulative Gain (nDCG) main ideas:
    &lt;ul&gt;
      &lt;li&gt;Measure the total utility of the top k documents to a user&lt;/li&gt;
      &lt;li&gt;Utility of a lowly ranked document is discounted&lt;/li&gt;
      &lt;li&gt;normalized to ensure comparability across queries (note above about topics)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;36-practical-issues&quot;&gt;3.6 Practical Issues&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Need ways to measure significance and utility of evaluation techniques
    &lt;ul&gt;
      &lt;li&gt;could use statistical tests, beyond just averaging&lt;/li&gt;
      &lt;li&gt;need to account for variance&lt;/li&gt;
      &lt;li&gt;high variance = low reliability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use many queries before jumping into conclusions&lt;/li&gt;
  &lt;li&gt;Pooling: avoid judging all documents
    &lt;ul&gt;
      &lt;li&gt;if we can’t afford judging all the documents in teh collection, which subset should we judge?&lt;/li&gt;
      &lt;li&gt;Pooling strategy
        &lt;ul&gt;
          &lt;li&gt;choose a diverse set of rankign methods (TR systems)&lt;/li&gt;
          &lt;li&gt;Have each to return top-K documents&lt;/li&gt;
          &lt;li&gt;Combine all the top-K sets to form a pool for human assessors to judge&lt;/li&gt;
          &lt;li&gt;Other (unjudged) documents are usually assumed to be non-relevant (though they don’t have to)&lt;/li&gt;
          &lt;li&gt;okay for comparing system that contributed to the pool, but problematic for evaluating new systems.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS410-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;cs 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Analyze various gossip/epidemic protocols.&lt;/li&gt;
  &lt;li&gt;Design and analyze various distributed membership protocols.&lt;/li&gt;
  &lt;li&gt;Know what grid computing is.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Failure detectors&lt;/li&gt;
  &lt;li&gt;Membership protocols&lt;/li&gt;
  &lt;li&gt;Gossip/epidemic protocols&lt;/li&gt;
  &lt;li&gt;Grid computing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why are gossip and epidemic protocols fast and reliable?&lt;/li&gt;
  &lt;li&gt;What is the most efficient way for cloud computing systems to detect failures of servers?&lt;/li&gt;
  &lt;li&gt;How is grid computing related to cloud computing?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;readings&quot;&gt;Readings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;Gossip-style FD&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Gossip-Style failure detection will have these properties:
        &lt;ol&gt;
          &lt;li&gt;the probability that a member is falsely reported as having failed is inde-&lt;br /&gt;
  pendent of the number of processes.&lt;/li&gt;
          &lt;li&gt;the algorithm is resilient against both message loss (or rather, message&lt;br /&gt;
  delivery timing failures) and process failures, in that a small percentage of&lt;br /&gt;
  lost (or late) messages or small percentage of failed members does not lead&lt;br /&gt;
  to false detections.&lt;/li&gt;
          &lt;li&gt;if local clock drift is negligible, the algorithm detects all failures or un-&lt;br /&gt;
  reachabilities accurately with known probability of mistake.&lt;/li&gt;
          &lt;li&gt;the algorithm scales in detection time, in that the detection time increases&lt;br /&gt;
  O(n log n) with the number of processes.&lt;/li&gt;
          &lt;li&gt;the algorithm scales in network load, in that the required bandwidth goes&lt;br /&gt;
  up at most linearly with the number of processes. For large networks, the&lt;br /&gt;
  bandwidth used in the subnets is approximately constant.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Our protocol gossips to figure out whom else is still gossiping.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ieeexplore.ieee.org/document/1028914/?reload=true&amp;amp;arnumber=1028914&quot;&gt;SWIM&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Membership protocols have been difficult to scale in groups with beyond a few dozen processes [11, &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;16&lt;/a&gt;], thus affecting the performance of applications using them. As reported in [&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=1659238&quot;&gt;16&lt;/a&gt;], the main symptoms of bad performance at these group sizes is an increase in either the rate of false failure detections of processes, or the time to detect a failure.[12]&lt;/li&gt;
      &lt;li&gt;Our system, called SWIM, provides a membership substrate that:
        &lt;ol&gt;
          &lt;li&gt;imposes a constant message load per group member;&lt;/li&gt;
          &lt;li&gt;detects a process failure in an (expected) constant time&lt;br /&gt;
  at some non-faulty process in the group;&lt;/li&gt;
          &lt;li&gt;provides a deterministic bound (as a function of group&lt;br /&gt;
  size) on the local time that a non-faulty process takes to de-&lt;br /&gt;
  tect failure of another process;&lt;/li&gt;
          &lt;li&gt;propagates membership updates, including informa-&lt;br /&gt;
  tion about failures, in infection-style (also gossip-style or&lt;br /&gt;
  epidemic-style [2, 8]); the dissemination latency in the&lt;br /&gt;
  group grows slowly (logarithmically) with the number of&lt;br /&gt;
  members;&lt;/li&gt;
          &lt;li&gt;provides a mechanism to reduce the rate of false pos-&lt;br /&gt;
  itives by “suspecting” a process before “declaring” it as&lt;br /&gt;
  failed within the group.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;Properties of previous distributed failure detector protocols:
        &lt;ol&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Strong Completeness&lt;/em&gt;: crash-failure of any group mem-&lt;br /&gt;
  ber is detected by all non-faulty members [6]);&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Speed of failure detection&lt;/em&gt;: the time interval between a&lt;br /&gt;
  member failure and its detection by some non-faulty group&lt;br /&gt;
  member;&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Accuracy&lt;/em&gt;: the rate of false positives of failure detection;&lt;/li&gt;
          &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Network Message Load&lt;/em&gt;, in bytes per second generated&lt;br /&gt;
  by the protocol.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;SWIM has two basic components:
        &lt;ol&gt;
          &lt;li&gt;a &lt;em class=&quot;highlighted&quot;&gt;Failure Detector Component&lt;/em&gt;, that detects failures of&lt;br /&gt;
  members, and&lt;/li&gt;
          &lt;li&gt;a &lt;em class=&quot;highlighted&quot;&gt;Dissemination Component&lt;/em&gt;, that disseminates informa-&lt;br /&gt;
  tion about members that have recently either joined or left&lt;br /&gt;
  the group, or failed.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;and these advanced components:
        &lt;ol&gt;
          &lt;li&gt;Infection-Style Dissemination Component&lt;/li&gt;
          &lt;li&gt;Suspicion Mechanism: Reducing the Frequency of False Positives&lt;/li&gt;
          &lt;li&gt;Round-Robin Probe Target Selection: Providing Time-Bounded Strong Completeness&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;gossip&quot;&gt;&lt;strong class=&quot;highlighted&quot;&gt;Gossip&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;11--multicast-problem&quot;&gt;1.1 : Multicast Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Centralized Multicast, simplest
    &lt;ul&gt;
      &lt;li&gt;UDP/TCP packets&lt;/li&gt;
      &lt;li&gt;A single, center protocol handler&lt;/li&gt;
      &lt;li&gt;Faulty due to single center protocol handler, if it fails halfway through process then only half of receivers will be updated.&lt;/li&gt;
      &lt;li&gt;High overhead which leads to large latency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tree-Based
    &lt;ul&gt;
      &lt;li&gt;eg, IPmulticast, SRM, RMTP, TRAM, TMTP&lt;/li&gt;
      &lt;li&gt;Pros:
        &lt;ul&gt;
          &lt;li&gt;if tree is balanced, then depth is log(n).  As a result, the complexity of a message reaching a node is O(logn).&lt;/li&gt;
          &lt;li&gt;If children constant at each node, then message propagation is constant&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Con:
        &lt;ul&gt;
          &lt;li&gt;setup and maintain tree&lt;/li&gt;
          &lt;li&gt;if a high node fails, many descendents will be disconnected&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which of the following is FALSE about a NAK in a tree-based multicast protocol?
    &lt;ul&gt;
      &lt;li&gt;It is used to send negative acknowledgments to a sender or designated receiver.&lt;/li&gt;
      &lt;li&gt;It may result in some of the multicast messages being retransmitted.&lt;/li&gt;
      &lt;li&gt;NAKs may cause message implosion.&lt;/li&gt;
      &lt;li&gt;(FALSE) NAKs cannot be used if IP multicast in the underlying network is used.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12--the-gossip-protocol&quot;&gt;1.2 : The Gossip Protocol&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;The gossip-based protocol described so far (select all correct answers):
    &lt;ul&gt;
      &lt;li&gt;(TRUE) Is executed periodically at each node&lt;/li&gt;
      &lt;li&gt;Receives only one copy of each multicast message at each node&lt;/li&gt;
      &lt;li&gt;Can turn an infected node into an uninfected node&lt;/li&gt;
      &lt;li&gt;(TRUE) Can turn an uninfected node into an infected node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13--gossip-analysis-important&quot;&gt;1.3 : Gossip Analysis &lt;strong class=&quot;highlighted&quot;&gt;(Important)&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Properties of Gossip push protocol:
    &lt;ul&gt;
      &lt;li&gt;lightweight, even in large groups&lt;/li&gt;
      &lt;li&gt;Spreads a multicast quickly&lt;/li&gt;
      &lt;li&gt;highly fault-tolerant&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We’re presented the epidemiology differential equations, which we’re asked to solve on our own.  Below is a video I made to walk through the solution:&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;position:relative;height:0;padding-bottom:56.25%&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/fLAqNFdnaJw?ecver=2&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; style=&quot;position:absolute;width:100%;height:100%;left:0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Pull is faster than push.&lt;/li&gt;
  &lt;li&gt;Push-Pull paradigm could involve push to quickly start up the cascade, and then use pull to facilitate propagation of cascade.&lt;/li&gt;
  &lt;li&gt;second half of pull gossip finishes in time O(loglogn)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14--gossip-implementations&quot;&gt;1.4 : Gossip Implementations&lt;/h3&gt;

&lt;h3 id=&quot;membership&quot;&gt;&lt;strong class=&quot;highlighted&quot;&gt;Membership&lt;/strong&gt;&lt;/h3&gt;
&lt;h3 id=&quot;21--what-is-group-membership-list&quot;&gt;2.1 : What is Group Membership List?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Failures are the norm in datacenters, need to design failure detectors&lt;/li&gt;
  &lt;li&gt;Crash-stop/Fail-stop process failures (processes do not recover!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22--failure-detectors&quot;&gt;2.2 : Failure Detectors&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;detectors cannot be both 100% complete and 100% accurate.&lt;/li&gt;
  &lt;li&gt;if you can do both, then you’ve solved the “consensus problem”: group deciding/agreeing on the value of something in a lossy network (impossible, more later)&lt;/li&gt;
  &lt;li&gt;in practice, always 100% complete, 90-99% accurate.&lt;/li&gt;
  &lt;li&gt;Centralized Heartbeating&lt;/li&gt;
  &lt;li&gt;ring heartbeating&lt;/li&gt;
  &lt;li&gt;all-to-all heartbeating (best)
    &lt;ul&gt;
      &lt;li&gt;if one node is slow, it may mark many nodes as faulty, thus causing large false positives…how to fix?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23--gossip-style-membership&quot;&gt;2.3 : Gossip-Style Membership&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In gossip-style failure detection, why should an entry not be deleted right after it’s detected as failed?
    &lt;ul&gt;
      &lt;li&gt;Because other processes may not have deleted that entry and it may be added back (the process may stay in the records despite being dead)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24--which-is-the-best-failure-detector&quot;&gt;2.4 : Which is the best failure detector?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-9.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
Next slide should say “All-to-all gossip heartbeating”&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-10.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-11.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-12.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25--another-probabilistic-failure-detector&quot;&gt;2.5 : Another probabilistic Failure Detector&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-13.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SWIM allows a process p&lt;sub&gt;j&lt;/sub&gt; extra chances to respond to p&lt;sub&gt;i&lt;/sub&gt; through time and space.&lt;/li&gt;
  &lt;li&gt;It allows it more time to respond, and permits direct and indirect (through other random processes) paths to relay a response.&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-14.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-15.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-16.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-17.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;26--dissemination-and-suspicion&quot;&gt;2.6 : Dissemination and suspicion&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In a system with N processes using the SWIM failure detector, given enough network bandwidth, how long does it take for a failure, after it is detected at one process, to disseminate through the group?
    &lt;ul&gt;
      &lt;li&gt;O(logn) (why?)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-18.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-19.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-20.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-21.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;31--grid-applications&quot;&gt;3.1 : Grid Applications&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Question: how do we schedule and distribute a list of jobs across multiple different machines?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32--scheduling-problem&quot;&gt;3.2 : Scheduling Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Which of the following are typically NOT the responsibility of an inter-site protocol like Globus, but instead the responsibility of an intra-site protocol like HTCondor (select multiple answers)?
    &lt;ul&gt;
      &lt;li&gt;Deciding which tasks run on which machines (Correct)&lt;/li&gt;
      &lt;li&gt;Monitoring of workstations running tasks (Correct)&lt;/li&gt;
      &lt;li&gt;Wide-area file transfer&lt;/li&gt;
      &lt;li&gt;Allocating jobs to sites&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-23.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-24.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-25.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-26.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-27.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-28.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS425-wk3-img-29.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives-1&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Explain key practices in path-driven methodologies&lt;/li&gt;
  &lt;li&gt;Explain key practices in agile methodologies&lt;/li&gt;
  &lt;li&gt;Choose appropriate processes in the given application context&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;21--process-overview&quot;&gt;2.1 : Process Overview&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Activity groups in IEEE 1074
    &lt;ul&gt;
      &lt;li&gt;Project Management
        &lt;ul&gt;
          &lt;li&gt;Project initiation&lt;/li&gt;
          &lt;li&gt;Project Planning&lt;/li&gt;
          &lt;li&gt;Project Monitoring and control&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Pre-development
        &lt;ul&gt;
          &lt;li&gt;Concept exploration&lt;/li&gt;
          &lt;li&gt;system allocation&lt;/li&gt;
          &lt;li&gt;software importation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Development
        &lt;ul&gt;
          &lt;li&gt;Software requirements
            &lt;ul&gt;
              &lt;li&gt;Define and develop software requirements&lt;/li&gt;
              &lt;li&gt;Define interface requirements&lt;/li&gt;
              &lt;li&gt;Prioritize and integrate software requirements&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Design&lt;/li&gt;
          &lt;li&gt;Implementation&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Post-Development
        &lt;ul&gt;
          &lt;li&gt;Installation&lt;/li&gt;
          &lt;li&gt;Operation and support&lt;/li&gt;
          &lt;li&gt;Maintenance&lt;/li&gt;
          &lt;li&gt;Retirement&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Support
        &lt;ul&gt;
          &lt;li&gt;Evaluation&lt;/li&gt;
          &lt;li&gt;Software configuration management&lt;/li&gt;
          &lt;li&gt;Documentation development&lt;/li&gt;
          &lt;li&gt;Training&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22--plan-driven-process&quot;&gt;2.2 : Plan Driven Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Waterfall Process
    &lt;ul&gt;
      &lt;li&gt;Requirements&lt;/li&gt;
      &lt;li&gt;Design&lt;/li&gt;
      &lt;li&gt;Implementation&lt;/li&gt;
      &lt;li&gt;Integration&lt;/li&gt;
      &lt;li&gt;Testing&lt;/li&gt;
      &lt;li&gt;Maintenance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23--agile-process&quot;&gt;2.3 : Agile Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;while all of these are important, we prefer:
    &lt;ul&gt;
      &lt;li&gt;Individuals &amp;amp; interactions &amp;gt; processes and tools&lt;/li&gt;
      &lt;li&gt;Working Software &amp;gt; comprehensive documentation (use better coding to convey meaning, easier/faster to maintain than code with tons of documentation)&lt;/li&gt;
      &lt;li&gt;Customer collaboration &amp;gt; Contract negotiation (let engineers collaborate with customers)&lt;/li&gt;
      &lt;li&gt;Responding to change &amp;gt; following a plan (allow audibles)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;XP:
    &lt;ul&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Planning game&lt;/em&gt; for requirements&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Test-driven development&lt;/em&gt; for design and testing&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Refactoring&lt;/em&gt;  for design&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Pair programming&lt;/em&gt; for development&lt;/li&gt;
      &lt;li&gt;&lt;em class=&quot;highlighted&quot;&gt;Continuous integration&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scrum is needed when customer expectations are evolving or uncertain.&lt;/li&gt;
  &lt;li&gt;Scrum should not be chosen if there is high inter-dependencies that make it difficult to split product into shippable increments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-process-choosing&quot;&gt;2.4 Process Choosing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Five critical factors to help choose a strategy:
    &lt;ul&gt;
      &lt;li&gt;Size (number of people on team)&lt;/li&gt;
      &lt;li&gt;Criticality (what are the costs upon failures?)&lt;/li&gt;
      &lt;li&gt;Dynamism (how often requirements of tech change)&lt;/li&gt;
      &lt;li&gt;Personnel (skill of team members)&lt;/li&gt;
      &lt;li&gt;Culture (team members’ preferences and habits)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;25-project-planning&quot;&gt;2.5 Project Planning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Story Points are relative measures of how much time/effort tasks will take to complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;26-scheduling&quot;&gt;2.6 Scheduling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180913/CS427-wk3-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;27-risk-management&quot;&gt;2.7 Risk Management&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t be afraid of bringing up issues/risks, refraining from doing so can do harm to all stakeholders in the project&lt;/li&gt;
  &lt;li&gt;Be proactive!&lt;/li&gt;
&lt;/ul&gt;

</description>
				<pubDate>Thu, 13 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/13/MCS-Notes-Week-3</link>
				<guid isPermaLink="true">/2018/09/13/MCS-Notes-Week-3</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 4</title>
				<description>&lt;h1 id=&quot;under-construction&quot;&gt;under construction&lt;/h1&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-Empty&quot;&gt;
           Empty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-Empty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Empty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-NonEmpty&quot;&gt;
           NonEmpty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-NonEmpty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of NonEmpty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
				<pubDate>Tue, 11 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/11/Scala-Spec-Pt-1-Wk-4</link>
				<guid isPermaLink="true">/2018/09/11/Scala-Spec-Pt-1-Wk-4</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 3</title>
				<description>&lt;p&gt;Last week’s implementation of a set was more functional in style.  This week we do the same thing but more object-oriented in style.  Additionally, we work with a modern application of Scala by interacting with Tweet data from Twitter.  There’s many different classes in this week’s project, but there’s two classes in which most of the implemenation is contained within.  They are listed below:&lt;/p&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-Empty&quot;&gt;
           Empty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-Empty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchElementException&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The following methods are already implemented
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Empty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-NonEmpty&quot;&gt;
           NonEmpty Set 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-NonEmpty&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterAcc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//broken implementation....
//  def union(that: TweetSet): TweetSet =
//    if (!that.contains(elem)) (this.left union (that.incl(elem) union this.right))
//    else this.left union (that union this.right)
&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//prevents duplicates like sets should
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retweets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mostRetweeted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descendingByRetweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The following methods are already implemented
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TweetSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tweet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of NonEmpty Set&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Of particular interest is the union implementation in the NonEmpty set.  The order in which you apply the operations can either result in a successful program or an unsuccessful (does not terminate) program.  Briefly, the issue arrises from the fact that the highest level union call only terminates when the “left” and “right” portions become empty.  This will only happen when the “left” or “right” portions appear on the left of a union call.  Otherwise, they never become empty and the recursion never terminates.  A student, Akhmed U, had a very thorough explanation on the Coursera &lt;a href=&quot;https://www.coursera.org/learn/progfun1/discussions/weeks/3/threads/SkerhCXDEeaRtQpho9OEXw/replies/Gl3HSpQbEeaxvRLoQ7NHzw&quot;&gt;forums&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Sun, 09 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/09/Scala-Spec-Pt-1-Wk-3</link>
				<guid isPermaLink="true">/2018/09/09/Scala-Spec-Pt-1-Wk-3</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 2</title>
				<description>&lt;p&gt;For this week’s exercises we’re asked to implement a ‘set’ data structure for integers.  In addition, we’re asked to practice writing unit tests, which is super easy and straightforward in Scala.  Below is my set implementation as well as the unit tests I developed for it:&lt;/p&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-setimplementation&quot;&gt;
           Set Implementation 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-setimplementation&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;funsets&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
  * 2. Purely Functional Sets.
  */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * We represent a set by its characteristic function, i.e.
    * its `contains` predicate.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Indicates whether a set contains a given element.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the set of the one given element.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the union of the two given sets,
    * the sets of all elements that are in either `s` or `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the intersection of the two given sets,
    * the set of all elements that are both in `s` and `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the difference of the two given sets,
    * the set of all elements of `s` that are not in `t`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns the subset of `s` for which `p` holds.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * The bounds for `forall` and `exists` are +/- 1000.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns whether all bounded integers within `s` satisfy `p`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns whether there exists a bounded integer within `s`
    * that satisfies `p`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Returns a set transformed by applying `f` to each element of `s`.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Displays the contents of a set
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Prints the contents of a set on the console.
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Set Implementation&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;panel-group&quot; style=&quot;border-color:#292929; color:#444444;&quot;&gt;
  &lt;div class=&quot;panel panel-default&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
    &lt;div class=&quot;panel-heading&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
      &lt;h4 class=&quot;panel-title&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444;&quot;&gt;
        &lt;button class=&quot;btn&quot; data-toggle=&quot;collapse&quot; style=&quot;background-color:#35B4DE; color:#444444;&quot; data-target=&quot;#toggle-settests&quot;&gt;
           Set Tests 
        &lt;/button&gt;
      &lt;/h4&gt;
    &lt;/div&gt;
    &lt;div id=&quot;toggle-settests&quot; class=&quot;panel-collapse collapse&quot; style=&quot;border-color:#292929; background-color:#292929; color:#444444; outline-color:#ff0000;&quot;&gt;
      &lt;div class=&quot;panel-body&quot;&gt;
&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;funsets&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalatest.FunSuite&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.scalatest.junit.JUnitRunner&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
  * This class is a test suite for the methods in object FunSets. To run
  * the test suite, you can either:
  *  - run the &quot;test&quot; command in the SBT console
  *  - right-click the file in eclipse and chose &quot;Run As&quot; - &quot;JUnit Test&quot;
  */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;JUnitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSetSuite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FunSuite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * Link to the scaladoc - very clear and detailed tutorial of FunSuite
    *
    * http://doc.scalatest.org/1.9.1/index.html#org.scalatest.FunSuite
    *
    * Operators
    *  - test
    *  - ignore
    *  - pending
    */&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
    * Tests are written using the &quot;test&quot; operator and the &quot;assert&quot; method.
    */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// test(&quot;string take&quot;) {
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   val message = &quot;hello, world&quot;
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   assert(message.take(5) == &quot;hello&quot;)
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// }
&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
    * For ScalaTest tests, there exists a special equality operator &quot;===&quot; that
    * can be used inside &quot;assert&quot;. If the assertion fails, the two values will
    * be printed in the error message. Otherwise, when using &quot;==&quot;, the test
    * error message will only say &quot;assertion failed&quot;, without showing the values.
    *
    * Try it out! Change the values so that the assertion fails, and look at the
    * error message.
    */&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// test(&quot;adding ints&quot;) {
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//   assert(1 + 2 === 3)
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// }
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FunSets._&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contains is implemented&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * When writing tests, one would often like to re-use certain values for multiple
    * tests. For instance, we would like to create an Int-set and have multiple test
    * about it.
    *
    * Instead of copy-pasting the code for creating the set into every test, we can
    * store it in the test class using a val:
    *
    *   val s1 = singletonSet(1)
    *
    * However, what happens if the method &quot;singletonSet&quot; has a bug and crashes? Then
    * the test methods are not even executed, because creating an instance of the
    * test class fails!
    *
    * Therefore, we put the shared values into a separate trait (traits are like
    * abstract classes), and create an instance inside each test method.
    *
    */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singletonSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
    * This test is currently disabled (by using &quot;ignore&quot;) because the method
    * &quot;singletonSet&quot; is not yet implemented and the test would fail.
    *
    * Once you finish your implementation of &quot;singletonSet&quot;, exchange the
    * function &quot;ignore&quot; by &quot;test&quot;.
    */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;singletonSet(1) contains 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
      * We create a new instance of the &quot;TestSets&quot; trait, this gives us access
      * to the values &quot;s1&quot; to &quot;s3&quot;.
      */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;cm&quot;&gt;/**
        * The string argument of &quot;assert&quot; is a message that is printed in case
        * the test fails. This helps identifying which assertion failed.
        */&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;union contains all elements of each set&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Union 6&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;intersect contains elements common between sets&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Intersection 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;difference contains elements in s not in t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Difference 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filter contains elements in s that satisfy p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Filter 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;forall determines whether all elements in s satisfy p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Forall 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exists determines whether an element in s satisfies p&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exists 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exists 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;map transforms every element in s with some function f&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;union&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Map 5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
      &lt;div class=&quot;panel-footer&quot; style=&quot;background-color:#292929; color:#dddddd;&quot;&gt;End of Set Tests&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
				<pubDate>Thu, 06 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/06/Scala-Spec-Pt-1-Wk-2</link>
				<guid isPermaLink="true">/2018/09/06/Scala-Spec-Pt-1-Wk-2</guid>
			</item>
		
			<item>
				<title>Scala Specialization Part 1 Week 1</title>
				<description>&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
The first exercise was pretty simple.   Here is my solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pascal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
The second exercise was a little more challenging, but I was able to get it eventually, here is my solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'('&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;')'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180905/Scala-wk1-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
This was very challenging, so much so I was not able to come up with a functional solution.  After some research I was able to come up with an imperative solution:&lt;/p&gt;

&lt;blockquote class=&quot;filename&quot;&gt;
  &lt;p&gt;Scala&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
				<pubDate>Wed, 05 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/05/Scala-Spec-Pt-1-Wk-1</link>
				<guid isPermaLink="true">/2018/09/05/Scala-Spec-Pt-1-Wk-1</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 2 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What are some different ways to place a document as a vector in the vector space?&lt;/li&gt;
  &lt;li&gt;What is term frequency (TF)?&lt;/li&gt;
  &lt;li&gt;What is TF transformation?&lt;/li&gt;
  &lt;li&gt;What is document frequency (DF)?&lt;/li&gt;
  &lt;li&gt;What is inverse document frequency (IDF)?&lt;/li&gt;
  &lt;li&gt;What is TF-IDF weighting?&lt;/li&gt;
  &lt;li&gt;Why do we need to penalize long documents in text retrieval?&lt;/li&gt;
  &lt;li&gt;What is pivoted document length normalization?&lt;/li&gt;
  &lt;li&gt;What are the main ideas behind the retrieval function BM25?&lt;/li&gt;
  &lt;li&gt;What is the typical architecture of a text retrieval system?&lt;/li&gt;
  &lt;li&gt;What is an inverted index?&lt;/li&gt;
  &lt;li&gt;Why is it desirable to compress an inverted index?&lt;/li&gt;
  &lt;li&gt;How can we create an inverted index when the collection of documents does not fit into the memory?&lt;/li&gt;
  &lt;li&gt;How can we leverage an inverted index to score documents quickly?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Term frequency (TF)&lt;/li&gt;
  &lt;li&gt;Document frequency (DF) and inverse document frequency (IDF)&lt;/li&gt;
  &lt;li&gt;TF transformation&lt;/li&gt;
  &lt;li&gt;Pivoted length normalization&lt;/li&gt;
  &lt;li&gt;sBM25&lt;/li&gt;
  &lt;li&gt;Inverted index and postings&lt;/li&gt;
  &lt;li&gt;sBinary coding, unary coding, gamma-coding, and d-gap&lt;/li&gt;
  &lt;li&gt;Zipf’s law&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;21-vector-space-model---improved-instantiation&quot;&gt;2.1 Vector Space Model - Improved Instantiation&lt;/h3&gt;

&lt;p&gt;Slide 2 : Two problems with Simplest VSM&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Matching a keyword more times deserves more credit towards a document&lt;/li&gt;
  &lt;li&gt;Matching some keywords may be more important than other keywords (not all keywords are created equal).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 3 : Improved Vector Placement: Term Frequency (how many times it occurs in document) Vector&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use counts of each word in query/document instead of 1’s and 0’s&lt;/li&gt;
  &lt;li&gt;Will solve term frequency problem, but will not fix hierarchy of keywords&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 6 : Keyword Hierarchy&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;use Inverse Document Frequency of word to help differentiate between low and high priority words&lt;/li&gt;
  &lt;li&gt;IDF(W) = log((M+1)/k), M = Total number of docs in collection, k = total number of docs containing W (words that appear in many documents have lower priority than words that occur in only a relatively small number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 12 : VSM with TF-IDF effective?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;works well for some cases, but introduces new problems in other situations&lt;/li&gt;
  &lt;li&gt;Still have problems with words that have high frequency in a document but missing other important keywords.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22--tf-transformation&quot;&gt;2.2 : TF Transformation&lt;/h3&gt;

&lt;p&gt;Slide 5 : TF Transformation: c(w, d) -&amp;gt; TF(w,d)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A way to lessen impact of c(w,d) of unimportant word when using TF-IDF weighting.&lt;/li&gt;
  &lt;li&gt;Best developed so far is BM25: y = (k+1)x/(x+k)  (upper bound of k+1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180908/CS410-wk2-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23--doc-length-normalization&quot;&gt;2.3 : Doc Length Normalization&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Length Normalization can be a double edged sword, need to be careful to heavily penalize those with more words and lightly penalize those with more relevant content.&lt;/li&gt;
  &lt;li&gt;Have length normalizer depend on document length and average document length&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;normalizer = 1 - b + b(&lt;/td&gt;
          &lt;td&gt;d&lt;/td&gt;
          &lt;td&gt;)/avdl where b is between 0 and 1.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;State of the Art VSM Ranking Functions:&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180908/CS410-wk2-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 7 : Further improvement of VSM?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Improved instantiation of dimension?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved instantiation of similarity function?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 8 : Further improvements of BM25&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;BM25F (combine frequency counts of terms in all fields and then apply BM25 (instead of the other way)&lt;/li&gt;
  &lt;li&gt;BM25+ (add small constant to TF)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24--implementation-of-tr-text-retrieval-systems&quot;&gt;2.4 : Implementation of TR (Text Retrieval) Systems&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180908/CS410-wk2-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;rationale behind why inverted index is so fast compared to just sequential search through a document:&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180908/CS410-wk2-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Two datastructures that can be used:  Dictionary or Posting (&lt;a href=&quot;https://en.wikipedia.org/wiki/Inverted_index&quot;&gt;inverted index&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;25--system-implementation---inverted-index-construction&quot;&gt;2.5 : System Implementation - Inverted Index Construction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Most of this lecture spoke about different compression procedures:
    &lt;ul&gt;
      &lt;li&gt;unary&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Elias_gamma_coding&quot;&gt;γ-encoding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Delta_encoding&quot;&gt;δ-encoding&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The methods in the links above appear different to what Cheng describes in his slides:&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180908/CS410-wk2-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;
    &lt;h3 id=&quot;26--system-implementation---fast-search&quot;&gt;2.6 : System Implementation - Fast Search&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;CS 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;goals&quot;&gt;Goals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Know the key differences between cloud computing and previous generations of distributed systems.&lt;/li&gt;
  &lt;li&gt;Design MapReduce programs for a variety of problems.&lt;/li&gt;
  &lt;li&gt;Know how Hadoop schedules jobs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Clouds&lt;/li&gt;
  &lt;li&gt;MapReduce&lt;/li&gt;
  &lt;li&gt;Hadoop YARN&lt;/li&gt;
  &lt;li&gt;Sumeet Singh Interview&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions-1&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Why is cloud computing popular today?&lt;/li&gt;
  &lt;li&gt;What is different in cloud computing compared to previous generations of distributed systems?&lt;/li&gt;
  &lt;li&gt;How does one program in MapReduce?&lt;/li&gt;
  &lt;li&gt;How does the MapReduce system schedule jobs?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-1&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;11--why-clouds&quot;&gt;1.1 : Why Clouds?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Many different Cloud services (AWS, Google App Engine, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 5 : Two categories of clouds&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Private Clouds (within company only)&lt;/li&gt;
  &lt;li&gt;Public Clouds for customers
    &lt;ul&gt;
      &lt;li&gt;Amazon S3 (Simple Storage Service): store data&lt;/li&gt;
      &lt;li&gt;Amazon EC2 (Elastic Compute Cloud): upload and run OS images, pay per hour&lt;/li&gt;
      &lt;li&gt;Google App Engine/ Compute Engine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 6 : Customers Save Time and Money&lt;/p&gt;

&lt;h3 id=&quot;12--what-is-a-cloud&quot;&gt;1.2 : What is a Cloud?&lt;/h3&gt;
&lt;p&gt;Slide 1 : What is it?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;cluster!&lt;/li&gt;
  &lt;li&gt;supercomputer!&lt;/li&gt;
  &lt;li&gt;datastore!&lt;/li&gt;
  &lt;li&gt;superman!&lt;/li&gt;
  &lt;li&gt;none or all of the above!&lt;/li&gt;
  &lt;li&gt;Course Definition: &lt;strong class=&quot;highlighted&quot;&gt;Cloud = Lots of Storage + compute cycles nearby&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 2 : What is it continued&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Single or multiple geographical data centers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 3 : Sample Cloud topology&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13--intro-to-clouds-history&quot;&gt;1.3 : Intro to Clouds: History&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;14--intro-to-clouds-whats-new-in-todays-clouds&quot;&gt;1.4 : Intro to Clouds: What’s New in Today’s Clouds&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Massive Scale&lt;/li&gt;
  &lt;li&gt;On-demand access (pay as you go, anybody!)&lt;/li&gt;
  &lt;li&gt;Data-intensive Nature&lt;/li&gt;
  &lt;li&gt;New Cloud Programming Paradigms (MapReduce/Hadoop, NoSQL/Cassandra/MongoDB, etc)&lt;/li&gt;
  &lt;li&gt;WUE = Annual water usage / IT equipment energy (L/kWh)&lt;/li&gt;
  &lt;li&gt;PUE = Total Facility Power /IT Equipment Power&lt;/li&gt;
  &lt;li&gt;A datacenter consumes 2 MW of power, and out of this only 1.5 MW is used for the computing equipment. What is the PUE of this datacenter?
    &lt;ul&gt;
      &lt;li&gt;1.33&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22--what-is-a-distributed-system&quot;&gt;2.2 : What is a Distributed System?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Cloud is one form of a distributed system&lt;/li&gt;
  &lt;li&gt;Course Definition: &lt;strong class=&quot;highlighted&quot;&gt;A distributed system is a collection of entities(processes), each of which is autonomous, programmable, asynchronous (not working at same time, ie not parallel systems) and failure-prone, and which communicate through an unreliable communication medium.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;31--mapreduce-paradigm&quot;&gt;3.1 : MapReduce Paradigm&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;comes from functional programming’s map and reduce&lt;/li&gt;
  &lt;li&gt;Use hashing to evenly distribute reduce tasks among workers&lt;/li&gt;
  &lt;li&gt;The primary difference between Map and Reduce is that Reduces process batches of values associated with the same key while Maps process keys independently.&lt;/li&gt;
  &lt;li&gt;A given Mapreduce program has the Map phase generate 100 key-value pairs with 10 unique keys. How many Reduce tasks can this program have when at least one Reduce task will certainly be assigned no keys when a hash partitioner is used (select all answers that are correct)?”
    &lt;ul&gt;
      &lt;li&gt;Between 11 and 101.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32--mapreduce-examples&quot;&gt;3.2 : MapReduce Examples&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;There are three advantages of Maps and Reduces sorting their outputs:
    &lt;ul&gt;
      &lt;li&gt;A Map can know which contiguous sets of its key-value pairs (sharing the same key) need to be sent to one Reduce&lt;/li&gt;
      &lt;li&gt;A Reduce task can call the Reduce function on a contiguous set of key-value pairs (sharing the same key)&lt;/li&gt;
      &lt;li&gt;Sorting as an application becomes very simple to write&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33--mapreduce-scheduling&quot;&gt;3.3 : MapReduce Scheduling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Ensure no reduce tasks start before the map tasks all finish&lt;/li&gt;
  &lt;li&gt;Someone writes a variant of Mapreduce without a barrier, i.e., where Reduces can start before all Maps are done computing. Which of the following are TRUE statements?
    &lt;ul&gt;
      &lt;li&gt;A Mapreduce run may be incorrect since some of the key-value pairs generated by Maps may never be processed by a Reduce if the reduce function is called exactly once per key&lt;/li&gt;
      &lt;li&gt;All Mapreduce runs could be correct if Reduces maintain partial results for keys, and update these as new key-value pairs come in&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-6.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-7.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FIFO task management.&lt;/li&gt;
  &lt;li&gt;In YARN, which of the following is dedicated to one job?
    &lt;ul&gt;
      &lt;li&gt;Application Master&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;34--mapreduce-fault-tolerance&quot;&gt;3.4 : MapReduce Fault-Tolerance&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180904/CS425-wk2-img-8.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speculative execution refers to (Replicative Execution is a better term, the point is to observe tasks, and if one is going super slow, replicate the task on other threads and whichever replica finishes first completes the task):
    &lt;ul&gt;
      &lt;li&gt;Replicating slow tasks so that the first copy that finishes, completes the task&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explain differences between programming and software engineering.&lt;/li&gt;
  &lt;li&gt;Explain main goals of software engineering.&lt;/li&gt;
  &lt;li&gt;Explain main subareas of software engineering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes-2&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;11--origins-of-software-engineering&quot;&gt;1.1 : Origins of Software Engineering&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;programming (single worker) vs software engineering (team of workers)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12--software&quot;&gt;1.2 : Software&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Malleable&lt;/li&gt;
  &lt;li&gt;Complex&lt;/li&gt;
  &lt;li&gt;Useful&lt;/li&gt;
  &lt;li&gt;Varies&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13--software-project&quot;&gt;1.3 : Software Project&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Development Process (Productivity)&lt;/li&gt;
  &lt;li&gt;Software System (quality)&lt;/li&gt;
  &lt;li&gt;Software Users (Experience)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14--software-engineer&quot;&gt;1.4 : Software Engineer&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In real world, customer/user requirements for a software are ambiguous, constantly changing&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Tue, 04 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/04/MCS-Notes-Week-2</link>
				<guid isPermaLink="true">/2018/09/04/MCS-Notes-Week-2</guid>
			</item>
		
			<item>
				<title>MCS 1st Semester Week 1 Notes</title>
				<description>&lt;h1 id=&quot;cs-410--text-information-systems&quot;&gt;CS 410 : Text Information Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180903/CS410-wk1-img-1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;goals-and-objectives&quot;&gt;Goals and Objectives&lt;/h2&gt;
&lt;p&gt;After you actively engage in the learning experiences in this module, you should be able to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Explain some basic concepts in natural language processing, text information access.&lt;/li&gt;
  &lt;li&gt;Explain why text retrieval is often defined as a ranking problem.&lt;/li&gt;
  &lt;li&gt;Explain the basic idea of the vector space retrieval model and how to instantiate it with the simplest bit-vector representation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;guiding-questions&quot;&gt;Guiding Questions&lt;/h2&gt;
&lt;p&gt;Develop your answers to the following guiding questions while watching the video lectures throughout the week.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What does a computer have to do in order to understand a natural language sentence?&lt;/li&gt;
  &lt;li&gt;What is ambiguity?&lt;/li&gt;
  &lt;li&gt;What is bag-of-words representation? Why do modern search engines use this simple representation of text?&lt;/li&gt;
  &lt;li&gt;What are the two modes of text information access? Which mode does a web search engine such as Google support?&lt;/li&gt;
  &lt;li&gt;When is browsing more useful than querying to help a user find relevant information?&lt;/li&gt;
  &lt;li&gt;Why is a text retrieval task defined as a ranking task?&lt;/li&gt;
  &lt;li&gt;What is a retrieval model?&lt;/li&gt;
  &lt;li&gt;What are the two assumptions made by the Probability Ranking Principle?&lt;/li&gt;
  &lt;li&gt;What is the Vector Space Retrieval Model? How does it work?&lt;/li&gt;
  &lt;li&gt;How do we define the dimensions of the Vector Space Model? What does “bag of words” representation mean?&lt;/li&gt;
  &lt;li&gt;What does the retrieval function intuitively capture when we instantiate a vector space model with bag of words representation and bit representation for documents and queries?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;key-phrases-and-concepts&quot;&gt;Key Phrases and Concepts&lt;/h2&gt;
&lt;p&gt;Keep your eyes open for the following key terms or phrases as you complete the readings and interact with the lectures. These topics will help you better understand the content in this module.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part of speech tagging, syntactic analysis, semantic analysis, and ambiguity&lt;/li&gt;
  &lt;li&gt;“Bag of words” representation&lt;/li&gt;
  &lt;li&gt;Push, pull, querying, browsing&lt;/li&gt;
  &lt;li&gt;Probability ranking principle&lt;/li&gt;
  &lt;li&gt;Relevance&lt;/li&gt;
  &lt;li&gt;Vector space model&lt;/li&gt;
  &lt;li&gt;Dot product&lt;/li&gt;
  &lt;li&gt;Bag of words representation&lt;/li&gt;
  &lt;li&gt;Bit vector representation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;video-lecture-notes&quot;&gt;Video Lecture Notes&lt;/h2&gt;

&lt;h3 id=&quot;11-natural-language-content-analysis&quot;&gt;1.1 Natural Language Content Analysis&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NLP: Natural Language Processing&lt;/li&gt;
  &lt;li&gt;Semantic Analysis&lt;/li&gt;
  &lt;li&gt;In general, what we find as easy to read and understand is hard and complex for computers.&lt;/li&gt;
  &lt;li&gt;What we can’t do:
    &lt;ul&gt;
      &lt;li&gt;100% Part-Of-Speech (POS) tagging
        &lt;ul&gt;
          &lt;li&gt;“He turned &lt;u&gt;off&lt;/u&gt; the highway.” vs “He turned &lt;u&gt;off&lt;/u&gt; his fan.”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;General complete parsing
        &lt;ul&gt;
          &lt;li&gt;“A man saw a boy with telescope.”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Precise deep semantic analysis
        &lt;ul&gt;
          &lt;li&gt;Will we ever be able to precisely define the meaning of “own’ in “John owns a restaurant.” ?&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Robust and general NLP tends to be “shallow” while “deep” understanding doesn’t scale up. (ie, program will only work in conditions they are designed for, will not work in general unrestricted situations).&lt;/li&gt;
  &lt;li&gt;This implies NLP for text retrieval must be generally robust and efficient, shallow NLP at best.&lt;/li&gt;
  &lt;li&gt;“Bag of words” representation (google search) tends to be sufficient for most search tasks (but not all!)
    &lt;ul&gt;
      &lt;li&gt;words given together often aligns with their intended meanings, obviating the need for more sophisticated algorithms.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some text retrieval techniques can naturally address NLP problems&lt;/li&gt;
  &lt;li&gt;However, deeper NLP is needed for complex search tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-text-access-high-level&quot;&gt;1.2 Text Access (high level)&lt;/h3&gt;

&lt;p&gt;Slide 1&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How can a text information system help useres get access to the relevant text data?
    &lt;ul&gt;
      &lt;li&gt;push vs pull&lt;/li&gt;
      &lt;li&gt;querying vs browing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 2&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pull mode (search engines)
    &lt;ul&gt;
      &lt;li&gt;users take initiative&lt;/li&gt;
      &lt;li&gt;Ad hoc (temporary) information need&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push Mode (recommender systems, newsfeeds)
    &lt;ul&gt;
      &lt;li&gt;systems take initiative&lt;/li&gt;
      &lt;li&gt;stable information need (ie, consistent) or system has good knowledge about a user’s need.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 3:  Pull Mode - Querying vs Browsing.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Querying
    &lt;ul&gt;
      &lt;li&gt;User enters a (keyword) query&lt;/li&gt;
      &lt;li&gt;System returns relevant documents&lt;/li&gt;
      &lt;li&gt;Works well when the user knows what keywords to use&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Browsing
    &lt;ul&gt;
      &lt;li&gt;User navigates into relevant information by following a path enabled by the structures on the documents&lt;/li&gt;
      &lt;li&gt;works well when the user wants to explore information, doesn’t know what keywords to use, or can’t conveniently enter a query.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 4: Information seeking as sightseeing (An analogy)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sightseeing: Know address of an attraction?
    &lt;ul&gt;
      &lt;li&gt;Yes: take a taxi and go directly to the site.&lt;/li&gt;
      &lt;li&gt;No: walk around or take a taxi to a nearby place then walk.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Information seeking: Know exactly what you want to find?
    &lt;ul&gt;
      &lt;li&gt;Yes: use the right keywords as a query and find the information directly.&lt;/li&gt;
      &lt;li&gt;No: browse the information space or start with a rough query and then browse.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Need topic map to effectively browse when information seeking, many interesting applications regarding this…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 5: &lt;br /&gt;
&lt;img src=&quot;/assets/images/20180903/CS410-wk1-img-2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generally combine both push (sometimes referred to as “filtering”) and pull  as well as Browsing and Querying to better serve users&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-text-retrieval-problem-supporting-pull-method&quot;&gt;1.3: Text Retrieval Problem (supporting pull method)&lt;/h3&gt;

&lt;p&gt;Slide 3: What is Text Retrieval (TR) ?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Collection of text documents exists&lt;/li&gt;
  &lt;li&gt;User gives a query to express the information need&lt;/li&gt;
  &lt;li&gt;Search engine system returns relevant documents to users&lt;/li&gt;
  &lt;li&gt;Often called “information retrieval” (IR), but IR is actually much broader (there are others aside from “text”, such as images and audio)&lt;/li&gt;
  &lt;li&gt;known as “search technology’ in industry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 4: TR vs Database Retrieval&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Information
    &lt;ul&gt;
      &lt;li&gt;Unstructured/free text vs structured data&lt;/li&gt;
      &lt;li&gt;ambiguous vs well-defined semantics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Query
    &lt;ul&gt;
      &lt;li&gt;Ambiguous vs well-defined semantics&lt;/li&gt;
      &lt;li&gt;incomplete vs complete specification&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Answers
    &lt;ul&gt;
      &lt;li&gt;relevant documents vs matched records&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TR is an empirically defined problem
    &lt;ul&gt;
      &lt;li&gt;can’t mathematically prove one method is better than another&lt;/li&gt;
      &lt;li&gt;must rely on empirical evaluation involving users!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 5: Formal Formulation of TR&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Vocabulary (set of words in a language): V&lt;/li&gt;
  &lt;li&gt;query (sequence of words provided by user): q&lt;/li&gt;
  &lt;li&gt;document (sequence of words provided by document) d&lt;sub&gt;i&lt;/sub&gt;&lt;/li&gt;
  &lt;li&gt;collection (of documents): C&lt;/li&gt;
  &lt;li&gt;Set of relevant documents: R(q) is a subset of C
    &lt;ul&gt;
      &lt;li&gt;generally unknown and user-dependent&lt;/li&gt;
      &lt;li&gt;query is a “hint” on which doc is in R(q)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Task = compute R’(q), an approximation of R(q)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 6: How to compute R’(q)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Strat 1: Document selection
    &lt;ul&gt;
      &lt;li&gt;R’(q) = set of documents in C for which f(d, q) = 1 where f(d, q) is either 0 (fail) or 1 (success).&lt;/li&gt;
      &lt;li&gt;System must decide if a doc is relevant or not (&lt;strong class=&quot;highlighted&quot;&gt;absolute relevance&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Strat 2: Document Ranking
    &lt;ul&gt;
      &lt;li&gt;R’(q) = set of documents in C for which f(d, q) &amp;gt; Θ where f(d, q) is a relevance measure function, Θ is a cutoff determined by the user&lt;/li&gt;
      &lt;li&gt;System only needs to decide if one doc is more likely relevant than another (&lt;strong class=&quot;highlighted&quot;&gt;relative relevance&lt;/strong&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 8: Problems of Document Selection (ranking is usually preferred)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The classifier is unlikely accurate
    &lt;ul&gt;
      &lt;li&gt;“Over-constrained” query results in no relevant documents to return&lt;/li&gt;
      &lt;li&gt;“under-constrained” query results in over delivery.&lt;/li&gt;
      &lt;li&gt;Hard to find the right position between these two extremes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Even if it is accurate, all relevant documents are not equally relevant (relevance is a matter of degree!)
    &lt;ul&gt;
      &lt;li&gt;Prioritization is needed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 9: Theoretical Justification for Ranking&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Probability Ranking Principle [Robertson 77]: Returning a ranked list of documents in descending order of probability that a document is relevant to the query is the optimal strategy under the following two assumptions:
    &lt;ul&gt;
      &lt;li&gt;The utility of a document (to a user) is independent of the utility of any other document.&lt;/li&gt;
      &lt;li&gt;A user would browse the results sequentially&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Do these two assumptions hold?
    &lt;ul&gt;
      &lt;li&gt;Neither are necessarily true, but forms a solid foundation for ranking as the primary method.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14-overview-of-text-retrieval-methods&quot;&gt;1.4: Overview of Text Retrieval Methods&lt;/h3&gt;

&lt;p&gt;Slide 3 : How to design a Ranking Function&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Query: q&lt;/li&gt;
  &lt;li&gt;Document: d&lt;/li&gt;
  &lt;li&gt;Ranking function: f(d, q) in &lt;strong&gt;R&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;A good ranking function should rank relevant documents on top of non-relevant ones.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Key challenge: how to measure the likelihood that document d is &lt;u&gt;relevant&lt;/u&gt; to query q&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Retrieval model = formalization of relevance (give a computational definition of relevance).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 4 : Many different Retrieval Models&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Similarity-based models&lt;/strong&gt;: f(q, d) = similarity(q,d)
    &lt;ul&gt;
      &lt;li&gt;vector space model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;strong class=&quot;highlighted&quot;&gt;Probabilistic models&lt;/strong&gt;: f(d, q) = p(R=1&lt;/td&gt;
          &lt;td&gt;d,q), where R is 0 or 1.&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;ul&gt;
      &lt;li&gt;Classic probabilistic model&lt;/li&gt;
      &lt;li&gt;Language model&lt;/li&gt;
      &lt;li&gt;Divergence-from-randomness model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Probabilistic inference model&lt;/strong&gt;:f(q, d) = p(d implies q)&lt;/li&gt;
  &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Axiomatic Model&lt;/strong&gt;: f(q, d) must satisfy a set of constraints.&lt;/li&gt;
  &lt;li&gt;These different models tend to result in similar ranking functions involving similar variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 5 : Common Ideas in State of the Art Retrieval Models&lt;br /&gt;
&lt;img src=&quot;/assets/images/20180903/CS410-wk1-img-3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Slide 6 : Which Model Works the Best?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When optimized, the following models tend to perform equally well [Fang eg al 11]:
    &lt;ul&gt;
      &lt;li&gt;Pivoted length normalization&lt;/li&gt;
      &lt;li&gt;BM25&lt;/li&gt;
      &lt;li&gt;Query Likelihood&lt;/li&gt;
      &lt;li&gt;PL2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BM25 is most popular&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;15--vector-space-model---basic-idea&quot;&gt;1.5 : Vector Space Model - Basic Idea&lt;/h3&gt;

&lt;p&gt;Slide 3 : Many different Retrieval Models&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Similarity-based models: f(q,d) = similarity(q,d)
    &lt;ul&gt;
      &lt;li&gt;Vector space model&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 5: VSM is a framework&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Represent a doc/query by a term vector
    &lt;ul&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Term&lt;/strong&gt;: basic concept, eg word or phrase&lt;/li&gt;
      &lt;li&gt;Each term defines one dimension&lt;/li&gt;
      &lt;li&gt;N terms define an &lt;strong class=&quot;highlighted&quot;&gt;N-dimensional space&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Query&lt;/strong&gt; vector: q=(x,…) is query term weight&lt;/li&gt;
      &lt;li&gt;&lt;strong class=&quot;highlighted&quot;&gt;Doc&lt;/strong&gt; vector: d=(y,…) is doc term weight&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;relevance(q,d) is proportional to similarity(&lt;strong class=&quot;highlighted&quot;&gt;q&lt;/strong&gt;,&lt;strong class=&quot;highlighted&quot;&gt;d&lt;/strong&gt;) = f(q,d)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Slide 6: What VSM doesn’t say&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to define/select the “basic concept”
    &lt;ul&gt;
      &lt;li&gt;concepts are assumed to be orthogonal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to place docs and query in the space (= how to assign term weights)
    &lt;ul&gt;
      &lt;li&gt;Term weight in query indicates importance of term&lt;/li&gt;
      &lt;li&gt;Term weight in doc indicates how well the term characterizes the doc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How to define the similarity measure? (topic of next lecture)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;16--vector-space-retrieval-model---simplest-instantiation&quot;&gt;1.6 : Vector Space Retrieval Model - Simplest Instantiation&lt;/h3&gt;

&lt;p&gt;Slide 7: &lt;br /&gt;
&lt;img src=&quot;/assets/images/20180903/CS410-wk1-img-4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
This only measures how many query words are in the document words, it provides nothing on semantic relevance nor repeated words.&lt;/p&gt;

&lt;h1 id=&quot;cs-425--distributed-systems&quot;&gt;CS 425 : Distributed Systems&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;No new content was presented this week.&lt;/p&gt;

&lt;h1 id=&quot;cs-427--software-engineering&quot;&gt;CS 427 : Software Engineering&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;No new (relevant) content was presented this week.&lt;/p&gt;
</description>
				<pubDate>Mon, 03 Sep 2018 00:00:00 -0500</pubDate>
				<link>/2018/09/03/MCS-Notes-Week-1</link>
				<guid isPermaLink="true">/2018/09/03/MCS-Notes-Week-1</guid>
			</item>
		
			<item>
				<title>Coursera Algoirthms with Roughgarden Pt 4, Week 4</title>
				<description>&lt;p&gt;&lt;em class=&quot;highlighted&quot;&gt;Note: those marked with an asterisk I am not 100% confident in my answer/reasoning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em class=&quot;highlighted&quot;&gt;Please feel free to discuss the problems and my proposed solutions below!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;quiz&quot;&gt;Quiz&lt;/h2&gt;

&lt;h3 id=&quot;p1&quot;&gt;P1&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex1.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first one is most definitely false as the generic local search algorithm is only guaranteed to provide a local optimal solution, not a general optimal solution.&lt;/p&gt;

&lt;h3 id=&quot;p2&quot;&gt;P2&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex2.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will certainly finish in polynomial number of iterations, that’s the point of the approximate heuristic algorithm.&lt;/p&gt;

&lt;h3 id=&quot;p3&quot;&gt;P3&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex3.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;br /&gt;
This problem is taken directly from Kleinberg/Tardos’ Algorithm Design, Theorem 12.5.  Please feel free to refer to that text for more in depth analysis.&lt;/p&gt;

&lt;p&gt;The proof for that theorem is fairly involved for a binary partition, and even more complicated for k partitions.  Refer to my simplified proof below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex3-1.svg&quot; alt=&quot;img&quot; class=&quot;latexequation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that C is the sum of the weights of the set of edges that cross the clusters, C’ is that of the optimal solution’s.  W is the sum of all of the weights of the edges and A&lt;sub&gt;i&lt;/sub&gt; is the sum of the weights of edges exclusively in that corresponding cluster.&lt;/p&gt;

&lt;p&gt;See the text for background on why the first line is true.&lt;/p&gt;

&lt;h3 id=&quot;p4&quot;&gt;P4&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex4.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The probability approaches 100%. (say a sample space of 2 with probability of 99% and -100 with probability of 1%)&lt;/p&gt;

&lt;h3 id=&quot;p5&quot;&gt;P5&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/20180830/Algorithms-pt4-wk4-ex5.png&quot; alt=&quot;img&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the smallest case, which represents the case with the maximum probability, consider a sample space of 0 and 2 with equal probability.  This will be as large as the probability can go, due to there not being any negative numbers. So 50% is the largest it can be.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;programming-assignment&quot;&gt;Programming Assignment&lt;/h2&gt;

&lt;p&gt;This assignment we are tasked with determining which of six different 2SAT problems are satisfiable.  Since all of the clauses depend on just two variables, it was easy to make a graph representation (via the corresponding equivalent implications implied by the clauses).  With this representation, I was able to re-use my &lt;a href=&quot;/2018/07/09/Coursera-Roughgarden-Algorithms-Pt-2-Wk-1&quot;&gt;SCC solution&lt;/a&gt; to look for SCC’s.  Those that are not satisfiable will have a paradox, ie ~t -&amp;gt; t, within a SCC.  One could search through the SCCs individually to look for paradoxes, but I found an interesting property that permitted me to quickly determine if a paradox exists based on the number and sizes of the SCCs.  If there’s an even number of SCCs with sizes larger than 1, then no paradox exists.  If there’s an odd number of SCCs with size larger than 1, then a paradox exists.  So as a couple of examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5 3 3 1 1 1 1…. would correspond to paradox present as there’s an odd number of SCCs with size 5.&lt;/li&gt;
  &lt;li&gt;8 8 5 5 1 1 1…. would correspond to no paradox present as there’s even numbers of SCCs with size 8 &amp;amp; 5.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I just calculated and printed the SCCs sorted by decreasing size for each 2SAT problem and determined satisfiability based on the number of SCC sizes.&lt;/p&gt;

&lt;p&gt;Since I didn’t change much in my SCC code nor did I write any new interesting code, I refrain from posting any code.&lt;/p&gt;

</description>
				<pubDate>Thu, 30 Aug 2018 00:00:00 -0500</pubDate>
				<link>/2018/08/30/Coursera-Roughgarden-Algorithms-Pt-4-Wk-4</link>
				<guid isPermaLink="true">/2018/08/30/Coursera-Roughgarden-Algorithms-Pt-4-Wk-4</guid>
			</item>
		
	</channel>
</rss>
